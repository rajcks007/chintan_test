
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004d48  08004d48  00005d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc8  08004dc8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004dc8  08004dc8  00005dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dd0  08004dd0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd0  08004dd0  00005dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dd4  08004dd4  00005dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004dd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000268  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000acfa  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001827  00000000  00000000  00010d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  000125b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000636  00000000  00000000  00012db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020929  00000000  00000000  000133ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c407  00000000  00000000  00033d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c955b  00000000  00000000  0004011e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109679  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002514  00000000  00000000  001096bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0010bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d30 	.word	0x08004d30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004d30 	.word	0x08004d30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fb8b 	bl	80009b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f879 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f975 	bl	800058c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a2:	f000 f943 	bl	800052c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002a6:	f000 f8d1 	bl	800044c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	2102      	movs	r1, #2
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002b2:	f001 ff3d 	bl	8002130 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80002b6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80002ba:	f000 fbdf 	bl	8000a7c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80002be:	482e      	ldr	r0, [pc, #184]	@ (8000378 <main+0xe8>)
 80002c0:	f000 fdfa 	bl	8000eb8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002c4:	f04f 31ff 	mov.w	r1, #4294967295
 80002c8:	482b      	ldr	r0, [pc, #172]	@ (8000378 <main+0xe8>)
 80002ca:	f000 ff0b 	bl	80010e4 <HAL_ADC_PollForConversion>
	  adc_values[0] = HAL_ADC_GetValue(&hadc1);
 80002ce:	482a      	ldr	r0, [pc, #168]	@ (8000378 <main+0xe8>)
 80002d0:	f001 f80a 	bl	80012e8 <HAL_ADC_GetValue>
 80002d4:	4603      	mov	r3, r0
 80002d6:	b29a      	uxth	r2, r3
 80002d8:	4b28      	ldr	r3, [pc, #160]	@ (800037c <main+0xec>)
 80002da:	801a      	strh	r2, [r3, #0]

	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002dc:	f04f 31ff 	mov.w	r1, #4294967295
 80002e0:	4825      	ldr	r0, [pc, #148]	@ (8000378 <main+0xe8>)
 80002e2:	f000 feff 	bl	80010e4 <HAL_ADC_PollForConversion>
	  adc_values[1] = HAL_ADC_GetValue(&hadc1);
 80002e6:	4824      	ldr	r0, [pc, #144]	@ (8000378 <main+0xe8>)
 80002e8:	f000 fffe 	bl	80012e8 <HAL_ADC_GetValue>
 80002ec:	4603      	mov	r3, r0
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	4b22      	ldr	r3, [pc, #136]	@ (800037c <main+0xec>)
 80002f2:	805a      	strh	r2, [r3, #2]

	  HAL_Delay(1000);
 80002f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002f8:	f000 fbc0 	bl	8000a7c <HAL_Delay>
	  if(adc_values[1] < 3000){
 80002fc:	4b1f      	ldr	r3, [pc, #124]	@ (800037c <main+0xec>)
 80002fe:	885b      	ldrh	r3, [r3, #2]
 8000300:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000304:	4293      	cmp	r3, r2
 8000306:	d809      	bhi.n	800031c <main+0x8c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 , GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2102      	movs	r1, #2
 800030c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000310:	f001 ff0e 	bl	8002130 <HAL_GPIO_WritePin>
		  data_1 = 0;
 8000314:	4b1a      	ldr	r3, [pc, #104]	@ (8000380 <main+0xf0>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e00d      	b.n	8000338 <main+0xa8>
	  }
	  	else {
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2102      	movs	r1, #2
 8000320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000324:	f001 ff04 	bl	8002130 <HAL_GPIO_WritePin>
	  		data_1 = 1;
 8000328:	4b15      	ldr	r3, [pc, #84]	@ (8000380 <main+0xf0>)
 800032a:	2201      	movs	r2, #1
 800032c:	701a      	strb	r2, [r3, #0]
	  		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800032e:	2120      	movs	r1, #32
 8000330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000334:	f001 ff14 	bl	8002160 <HAL_GPIO_TogglePin>
	  	}

	  // Format the message as: /*data_1; data_2*/
	  snprintf(msg, sizeof(msg), "/*%u; %d; %u*/\r\n", adc_values[0], data_1, adc_values[1]);
 8000338:	4b10      	ldr	r3, [pc, #64]	@ (800037c <main+0xec>)
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	4619      	mov	r1, r3
 800033e:	4b10      	ldr	r3, [pc, #64]	@ (8000380 <main+0xf0>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	461a      	mov	r2, r3
 8000344:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <main+0xec>)
 8000346:	885b      	ldrh	r3, [r3, #2]
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	9200      	str	r2, [sp, #0]
 800034c:	460b      	mov	r3, r1
 800034e:	4a0d      	ldr	r2, [pc, #52]	@ (8000384 <main+0xf4>)
 8000350:	211e      	movs	r1, #30
 8000352:	480d      	ldr	r0, [pc, #52]	@ (8000388 <main+0xf8>)
 8000354:	f004 f838 	bl	80043c8 <sniprintf>

	  // Transmit the message over UART
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000358:	480b      	ldr	r0, [pc, #44]	@ (8000388 <main+0xf8>)
 800035a:	f7ff ff41 	bl	80001e0 <strlen>
 800035e:	4603      	mov	r3, r0
 8000360:	b29a      	uxth	r2, r3
 8000362:	f04f 33ff 	mov.w	r3, #4294967295
 8000366:	4908      	ldr	r1, [pc, #32]	@ (8000388 <main+0xf8>)
 8000368:	4808      	ldr	r0, [pc, #32]	@ (800038c <main+0xfc>)
 800036a:	f003 fbb3 	bl	8003ad4 <HAL_UART_Transmit>

	  HAL_Delay(100);
 800036e:	2064      	movs	r0, #100	@ 0x64
 8000370:	f000 fb84 	bl	8000a7c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000374:	e7a3      	b.n	80002be <main+0x2e>
 8000376:	bf00      	nop
 8000378:	20000078 	.word	0x20000078
 800037c:	20000150 	.word	0x20000150
 8000380:	20000172 	.word	0x20000172
 8000384:	08004d48 	.word	0x08004d48
 8000388:	20000154 	.word	0x20000154
 800038c:	200000c8 	.word	0x200000c8

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b0a6      	sub	sp, #152	@ 0x98
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800039a:	2228      	movs	r2, #40	@ 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f004 f848 	bl	8004434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2258      	movs	r2, #88	@ 0x58
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f004 f83a 	bl	8004434 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c0:	2302      	movs	r3, #2
 80003c2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c4:	2301      	movs	r3, #1
 80003c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c8:	2310      	movs	r3, #16
 80003ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ce:	2302      	movs	r3, #2
 80003d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003dc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fed0 	bl	8002194 <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003fa:	f000 f975 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	230f      	movs	r3, #15
 8000400:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000402:	2302      	movs	r3, #2
 8000404:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800040e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000414:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f002 fede 	bl	80031dc <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000426:	f000 f95f 	bl	80006e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800042a:	2302      	movs	r3, #2
 800042c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4618      	mov	r0, r3
 8000436:	f003 f8e3 	bl	8003600 <HAL_RCCEx_PeriphCLKConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000440:	f000 f952 	bl	80006e8 <Error_Handler>
  }
}
 8000444:	bf00      	nop
 8000446:	3798      	adds	r7, #152	@ 0x98
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b08a      	sub	sp, #40	@ 0x28
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000452:	f107 031c 	add.w	r3, r7, #28
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
 800046c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800046e:	4b2e      	ldr	r3, [pc, #184]	@ (8000528 <MX_ADC1_Init+0xdc>)
 8000470:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000474:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000476:	4b2c      	ldr	r3, [pc, #176]	@ (8000528 <MX_ADC1_Init+0xdc>)
 8000478:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800047c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800047e:	4b2a      	ldr	r3, [pc, #168]	@ (8000528 <MX_ADC1_Init+0xdc>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000484:	4b28      	ldr	r3, [pc, #160]	@ (8000528 <MX_ADC1_Init+0xdc>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800048a:	4b27      	ldr	r3, [pc, #156]	@ (8000528 <MX_ADC1_Init+0xdc>)
 800048c:	2201      	movs	r2, #1
 800048e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000490:	4b25      	ldr	r3, [pc, #148]	@ (8000528 <MX_ADC1_Init+0xdc>)
 8000492:	2200      	movs	r2, #0
 8000494:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000498:	4b23      	ldr	r3, [pc, #140]	@ (8000528 <MX_ADC1_Init+0xdc>)
 800049a:	2200      	movs	r2, #0
 800049c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800049e:	4b22      	ldr	r3, [pc, #136]	@ (8000528 <MX_ADC1_Init+0xdc>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a4:	4b20      	ldr	r3, [pc, #128]	@ (8000528 <MX_ADC1_Init+0xdc>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000528 <MX_ADC1_Init+0xdc>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000528 <MX_ADC1_Init+0xdc>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <MX_ADC1_Init+0xdc>)
 80004ba:	2204      	movs	r2, #4
 80004bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004be:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <MX_ADC1_Init+0xdc>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004c4:	4b18      	ldr	r3, [pc, #96]	@ (8000528 <MX_ADC1_Init+0xdc>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004ca:	4817      	ldr	r0, [pc, #92]	@ (8000528 <MX_ADC1_Init+0xdc>)
 80004cc:	f000 fafa 	bl	8000ac4 <HAL_ADC_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80004d6:	f000 f907 	bl	80006e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	4619      	mov	r1, r3
 80004e4:	4810      	ldr	r0, [pc, #64]	@ (8000528 <MX_ADC1_Init+0xdc>)
 80004e6:	f001 f9f7 	bl	80018d8 <HAL_ADCEx_MultiModeConfigChannel>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80004f0:	f000 f8fa 	bl	80006e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4619      	mov	r1, r3
 8000510:	4805      	ldr	r0, [pc, #20]	@ (8000528 <MX_ADC1_Init+0xdc>)
 8000512:	f000 fef7 	bl	8001304 <HAL_ADC_ConfigChannel>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800051c:	f000 f8e4 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000520:	bf00      	nop
 8000522:	3728      	adds	r7, #40	@ 0x28
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000078 	.word	0x20000078

0800052c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000530:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 8000532:	4a15      	ldr	r2, [pc, #84]	@ (8000588 <MX_USART2_UART_Init+0x5c>)
 8000534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000536:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 8000538:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800053c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054a:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000550:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 8000552:	220c      	movs	r2, #12
 8000554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000562:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	@ (8000584 <MX_USART2_UART_Init+0x58>)
 8000570:	f003 fa62 	bl	8003a38 <HAL_UART_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800057a:	f000 f8b5 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000c8 	.word	0x200000c8
 8000588:	40004400 	.word	0x40004400

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	@ 0x28
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b4f      	ldr	r3, [pc, #316]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a4e      	ldr	r2, [pc, #312]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b4c      	ldr	r3, [pc, #304]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ba:	4b49      	ldr	r3, [pc, #292]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a48      	ldr	r2, [pc, #288]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b46      	ldr	r3, [pc, #280]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b43      	ldr	r3, [pc, #268]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a42      	ldr	r2, [pc, #264]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b40      	ldr	r3, [pc, #256]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b3d      	ldr	r3, [pc, #244]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a3c      	ldr	r2, [pc, #240]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b3a      	ldr	r3, [pc, #232]	@ (80006e0 <MX_GPIO_Init+0x154>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2122      	movs	r1, #34	@ 0x22
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f001 fd91 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, efuse_EN_Pin|Buck_Boost_EN_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000614:	4833      	ldr	r0, [pc, #204]	@ (80006e4 <MX_GPIO_Init+0x158>)
 8000616:	f001 fd8b 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LATCH_1_Pin|LATCH_2_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000624:	f001 fd84 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000628:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4829      	ldr	r0, [pc, #164]	@ (80006e4 <MX_GPIO_Init+0x158>)
 8000640:	f001 fbec 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8000644:	2322      	movs	r3, #34	@ 0x22
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065e:	f001 fbdd 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : efuse_EN_Pin Buck_Boost_EN_Pin */
  GPIO_InitStruct.Pin = efuse_EN_Pin|Buck_Boost_EN_Pin;
 8000662:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	481a      	ldr	r0, [pc, #104]	@ (80006e4 <MX_GPIO_Init+0x158>)
 800067c:	f001 fbce 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PGOOD_Pin */
  GPIO_InitStruct.Pin = PGOOD_Pin;
 8000680:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800068a:	2301      	movs	r3, #1
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PGOOD_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f001 fbc0 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OVP_Pin */
  GPIO_InitStruct.Pin = OVP_Pin;
 800069c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OVP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f001 fbb2 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LATCH_1_Pin LATCH_2_Pin */
  GPIO_InitStruct.Pin = LATCH_1_Pin|LATCH_2_Pin;
 80006b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f001 fba2 	bl	8001e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000800 	.word	0x48000800

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <Error_Handler+0x8>

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <HAL_MspInit+0x44>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <HAL_MspInit+0x44>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <HAL_MspInit+0x44>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <HAL_MspInit+0x44>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <HAL_MspInit+0x44>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <HAL_MspInit+0x44>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800072a:	2007      	movs	r0, #7
 800072c:	f001 fb42 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800075c:	d13c      	bne.n	80007d8 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <HAL_ADC_MspInit+0xa4>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a1f      	ldr	r2, [pc, #124]	@ (80007e0 <HAL_ADC_MspInit+0xa4>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <HAL_ADC_MspInit+0xa4>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <HAL_ADC_MspInit+0xa4>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <HAL_ADC_MspInit+0xa4>)
 800077c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_ADC_MspInit+0xa4>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <HAL_ADC_MspInit+0xa4>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <HAL_ADC_MspInit+0xa4>)
 8000794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <HAL_ADC_MspInit+0xa4>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a6:	2301      	movs	r3, #1
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	2303      	movs	r3, #3
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	480a      	ldr	r0, [pc, #40]	@ (80007e4 <HAL_ADC_MspInit+0xa8>)
 80007ba:	f001 fb2f 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c2:	2303      	movs	r3, #3
 80007c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d4:	f001 fb22 	bl	8001e1c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	@ 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000800 	.word	0x48000800

080007e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <HAL_UART_MspInit+0x7c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d128      	bne.n	800085c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800080a:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <HAL_UART_MspInit+0x80>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a16      	ldr	r2, [pc, #88]	@ (8000868 <HAL_UART_MspInit+0x80>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <HAL_UART_MspInit+0x80>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <HAL_UART_MspInit+0x80>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a10      	ldr	r2, [pc, #64]	@ (8000868 <HAL_UART_MspInit+0x80>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <HAL_UART_MspInit+0x80>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800083a:	230c      	movs	r3, #12
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084a:	2307      	movs	r3, #7
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f001 fae0 	bl	8001e1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40004400 	.word	0x40004400
 8000868:	40021000 	.word	0x40021000

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f8bb 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d4:	4a14      	ldr	r2, [pc, #80]	@ (8000928 <_sbrk+0x5c>)
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <_sbrk+0x60>)
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <_sbrk+0x64>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <_sbrk+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d207      	bcs.n	800090c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008fc:	f003 fda2 	bl	8004444 <__errno>
 8000900:	4603      	mov	r3, r0
 8000902:	220c      	movs	r2, #12
 8000904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	e009      	b.n	8000920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800090c:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000912:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <_sbrk+0x64>)
 800091c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20010000 	.word	0x20010000
 800092c:	00000400 	.word	0x00000400
 8000930:	20000174 	.word	0x20000174
 8000934:	200002c8 	.word	0x200002c8

08000938 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800095c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000994 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000960:	f7ff ffea 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <LoopForever+0x6>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	@ (800099c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <LoopForever+0xe>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	@ (80009a8 <LoopForever+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098a:	f003 fd61 	bl	8004450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800098e:	f7ff fc7f 	bl	8000290 <main>

08000992 <LoopForever>:

LoopForever:
    b LoopForever
 8000992:	e7fe      	b.n	8000992 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000994:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009a0:	08004dd8 	.word	0x08004dd8
  ldr r2, =_sbss
 80009a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009a8:	200002c4 	.word	0x200002c4

080009ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC1_2_IRQHandler>
	...

080009b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_Init+0x28>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <HAL_Init+0x28>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f001 f9f7 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f000 f808 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff fe92 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40022000 	.word	0x40022000

080009dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_InitTick+0x54>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_InitTick+0x58>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fa01 	bl	8001e02 <HAL_SYSTICK_Config>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00e      	b.n	8000a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d80a      	bhi.n	8000a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f001 f9d7 	bl	8001dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	@ (8000a38 <HAL_InitTick+0x5c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000178 	.word	0x20000178

08000a64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000178 	.word	0x20000178

08000a7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff ffee 	bl	8000a64 <HAL_GetTick>
 8000a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_Delay+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aa2:	bf00      	nop
 8000aa4:	f7ff ffde 	bl	8000a64 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
  {
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09a      	sub	sp, #104	@ 0x68
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e1e3      	b.n	8000eac <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 0310 	and.w	r3, r3, #16
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d176      	bne.n	8000be4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d152      	bne.n	8000ba4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff fe0f 	bl	800073c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d13b      	bne.n	8000ba4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f001 f829 	bl	8001b84 <ADC_Disable>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	f003 0310 	and.w	r3, r3, #16
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d12f      	bne.n	8000ba4 <HAL_ADC_Init+0xe0>
 8000b44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12b      	bne.n	8000ba4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b54:	f023 0302 	bic.w	r3, r3, #2
 8000b58:	f043 0202 	orr.w	r2, r3, #2
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000b6e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b7e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b80:	4b92      	ldr	r3, [pc, #584]	@ (8000dcc <HAL_ADC_Init+0x308>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a92      	ldr	r2, [pc, #584]	@ (8000dd0 <HAL_ADC_Init+0x30c>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	0c9a      	lsrs	r2, r3, #18
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b96:	e002      	b.n	8000b9e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1f9      	bne.n	8000b98 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d007      	beq.n	8000bc2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bc0:	d110      	bne.n	8000be4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f023 0312 	bic.w	r3, r3, #18
 8000bca:	f043 0210 	orr.w	r2, r3, #16
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	f043 0201 	orr.w	r2, r3, #1
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f040 8150 	bne.w	8000e92 <HAL_ADC_Init+0x3ce>
 8000bf2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 814b 	bne.w	8000e92 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8143 	bne.w	8000e92 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c10:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c14:	f043 0202 	orr.w	r2, r3, #2
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c24:	d004      	beq.n	8000c30 <HAL_ADC_Init+0x16c>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a6a      	ldr	r2, [pc, #424]	@ (8000dd4 <HAL_ADC_Init+0x310>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <HAL_ADC_Init+0x170>
 8000c30:	4b69      	ldr	r3, [pc, #420]	@ (8000dd8 <HAL_ADC_Init+0x314>)
 8000c32:	e000      	b.n	8000c36 <HAL_ADC_Init+0x172>
 8000c34:	4b69      	ldr	r3, [pc, #420]	@ (8000ddc <HAL_ADC_Init+0x318>)
 8000c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c40:	d102      	bne.n	8000c48 <HAL_ADC_Init+0x184>
 8000c42:	4b64      	ldr	r3, [pc, #400]	@ (8000dd4 <HAL_ADC_Init+0x310>)
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	e01a      	b.n	8000c7e <HAL_ADC_Init+0x1ba>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a61      	ldr	r2, [pc, #388]	@ (8000dd4 <HAL_ADC_Init+0x310>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d103      	bne.n	8000c5a <HAL_ADC_Init+0x196>
 8000c52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e011      	b.n	8000c7e <HAL_ADC_Init+0x1ba>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a60      	ldr	r2, [pc, #384]	@ (8000de0 <HAL_ADC_Init+0x31c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d102      	bne.n	8000c6a <HAL_ADC_Init+0x1a6>
 8000c64:	4b5f      	ldr	r3, [pc, #380]	@ (8000de4 <HAL_ADC_Init+0x320>)
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e009      	b.n	8000c7e <HAL_ADC_Init+0x1ba>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a5d      	ldr	r2, [pc, #372]	@ (8000de4 <HAL_ADC_Init+0x320>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d102      	bne.n	8000c7a <HAL_ADC_Init+0x1b6>
 8000c74:	4b5a      	ldr	r3, [pc, #360]	@ (8000de0 <HAL_ADC_Init+0x31c>)
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	e001      	b.n	8000c7e <HAL_ADC_Init+0x1ba>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d108      	bne.n	8000c9e <HAL_ADC_Init+0x1da>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <HAL_ADC_Init+0x1da>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <HAL_ADC_Init+0x1dc>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d11c      	bne.n	8000cde <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d010      	beq.n	8000ccc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d107      	bne.n	8000cc6 <HAL_ADC_Init+0x202>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d101      	bne.n	8000cc6 <HAL_ADC_Init+0x202>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <HAL_ADC_Init+0x204>
 8000cc6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d108      	bne.n	8000cde <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ccc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cdc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7e5b      	ldrb	r3, [r3, #25]
 8000ce2:	035b      	lsls	r3, r3, #13
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ce8:	2a01      	cmp	r2, #1
 8000cea:	d002      	beq.n	8000cf2 <HAL_ADC_Init+0x22e>
 8000cec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cf0:	e000      	b.n	8000cf4 <HAL_ADC_Init+0x230>
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d04:	4313      	orrs	r3, r2
 8000d06:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d11b      	bne.n	8000d4a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7e5b      	ldrb	r3, [r3, #25]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d109      	bne.n	8000d2e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	045a      	lsls	r2, r3, #17
 8000d22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d24:	4313      	orrs	r3, r2
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000d2c:	e00d      	b.n	8000d4a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000d36:	f043 0220 	orr.w	r2, r3, #32
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	f043 0201 	orr.w	r2, r3, #1
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d054      	beq.n	8000dfc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a22      	ldr	r2, [pc, #136]	@ (8000de0 <HAL_ADC_Init+0x31c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d004      	beq.n	8000d66 <HAL_ADC_Init+0x2a2>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a20      	ldr	r2, [pc, #128]	@ (8000de4 <HAL_ADC_Init+0x320>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d140      	bne.n	8000de8 <HAL_ADC_Init+0x324>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d6a:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000d6e:	d02a      	beq.n	8000dc6 <HAL_ADC_Init+0x302>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d78:	d022      	beq.n	8000dc0 <HAL_ADC_Init+0x2fc>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d7e:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000d82:	d01a      	beq.n	8000dba <HAL_ADC_Init+0x2f6>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d88:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000d8c:	d012      	beq.n	8000db4 <HAL_ADC_Init+0x2f0>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d92:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000d96:	d00a      	beq.n	8000dae <HAL_ADC_Init+0x2ea>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9c:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000da0:	d002      	beq.n	8000da8 <HAL_ADC_Init+0x2e4>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da6:	e023      	b.n	8000df0 <HAL_ADC_Init+0x32c>
 8000da8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000dac:	e020      	b.n	8000df0 <HAL_ADC_Init+0x32c>
 8000dae:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000db2:	e01d      	b.n	8000df0 <HAL_ADC_Init+0x32c>
 8000db4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000db8:	e01a      	b.n	8000df0 <HAL_ADC_Init+0x32c>
 8000dba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dbe:	e017      	b.n	8000df0 <HAL_ADC_Init+0x32c>
 8000dc0:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000dc4:	e014      	b.n	8000df0 <HAL_ADC_Init+0x32c>
 8000dc6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000dca:	e011      	b.n	8000df0 <HAL_ADC_Init+0x32c>
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	431bde83 	.word	0x431bde83
 8000dd4:	50000100 	.word	0x50000100
 8000dd8:	50000300 	.word	0x50000300
 8000ddc:	50000700 	.word	0x50000700
 8000de0:	50000400 	.word	0x50000400
 8000de4:	50000500 	.word	0x50000500
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000df4:	4313      	orrs	r3, r2
 8000df6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d114      	bne.n	8000e34 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6812      	ldr	r2, [r2, #0]
 8000e14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e18:	f023 0302 	bic.w	r3, r3, #2
 8000e1c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7e1b      	ldrb	r3, [r3, #24]
 8000e22:	039a      	lsls	r2, r3, #14
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e30:	4313      	orrs	r3, r2
 8000e32:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <HAL_ADC_Init+0x3f0>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6812      	ldr	r2, [r2, #0]
 8000e42:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000e44:	430b      	orrs	r3, r1
 8000e46:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10c      	bne.n	8000e6a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f023 010f 	bic.w	r1, r3, #15
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	1e5a      	subs	r2, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e68:	e007      	b.n	8000e7a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 020f 	bic.w	r2, r2, #15
 8000e78:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	f023 0303 	bic.w	r3, r3, #3
 8000e88:	f043 0201 	orr.w	r2, r3, #1
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e90:	e00a      	b.n	8000ea8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f023 0312 	bic.w	r3, r3, #18
 8000e9a:	f043 0210 	orr.w	r2, r3, #16
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000ea8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3768      	adds	r7, #104	@ 0x68
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	fff0c007 	.word	0xfff0c007

08000eb8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 80f9 	bne.w	80010c6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d101      	bne.n	8000ee2 <HAL_ADC_Start+0x2a>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e0f4      	b.n	80010cc <HAL_ADC_Start+0x214>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 fde6 	bl	8001abc <ADC_Enable>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 80e0 	bne.w	80010bc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f18:	d004      	beq.n	8000f24 <HAL_ADC_Start+0x6c>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a6d      	ldr	r2, [pc, #436]	@ (80010d4 <HAL_ADC_Start+0x21c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d106      	bne.n	8000f32 <HAL_ADC_Start+0x7a>
 8000f24:	4b6c      	ldr	r3, [pc, #432]	@ (80010d8 <HAL_ADC_Start+0x220>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d010      	beq.n	8000f52 <HAL_ADC_Start+0x9a>
 8000f30:	e005      	b.n	8000f3e <HAL_ADC_Start+0x86>
 8000f32:	4b6a      	ldr	r3, [pc, #424]	@ (80010dc <HAL_ADC_Start+0x224>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d009      	beq.n	8000f52 <HAL_ADC_Start+0x9a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f46:	d004      	beq.n	8000f52 <HAL_ADC_Start+0x9a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a64      	ldr	r2, [pc, #400]	@ (80010e0 <HAL_ADC_Start+0x228>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d115      	bne.n	8000f7e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d036      	beq.n	8000fda <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f70:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f74:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f7c:	e02d      	b.n	8000fda <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f92:	d004      	beq.n	8000f9e <HAL_ADC_Start+0xe6>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a4e      	ldr	r2, [pc, #312]	@ (80010d4 <HAL_ADC_Start+0x21c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10a      	bne.n	8000fb4 <HAL_ADC_Start+0xfc>
 8000f9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf14      	ite	ne
 8000fac:	2301      	movne	r3, #1
 8000fae:	2300      	moveq	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	e008      	b.n	8000fc6 <HAL_ADC_Start+0x10e>
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80010e0 <HAL_ADC_Start+0x228>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d007      	beq.n	8000fda <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fd2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fe6:	d106      	bne.n	8000ff6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fec:	f023 0206 	bic.w	r2, r3, #6
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ff4:	e002      	b.n	8000ffc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	221c      	movs	r2, #28
 800100a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001014:	d004      	beq.n	8001020 <HAL_ADC_Start+0x168>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a2e      	ldr	r2, [pc, #184]	@ (80010d4 <HAL_ADC_Start+0x21c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d106      	bne.n	800102e <HAL_ADC_Start+0x176>
 8001020:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <HAL_ADC_Start+0x220>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	2b00      	cmp	r3, #0
 800102a:	d03e      	beq.n	80010aa <HAL_ADC_Start+0x1f2>
 800102c:	e005      	b.n	800103a <HAL_ADC_Start+0x182>
 800102e:	4b2b      	ldr	r3, [pc, #172]	@ (80010dc <HAL_ADC_Start+0x224>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2b00      	cmp	r3, #0
 8001038:	d037      	beq.n	80010aa <HAL_ADC_Start+0x1f2>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001042:	d004      	beq.n	800104e <HAL_ADC_Start+0x196>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <HAL_ADC_Start+0x21c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d106      	bne.n	800105c <HAL_ADC_Start+0x1a4>
 800104e:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <HAL_ADC_Start+0x220>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	2b05      	cmp	r3, #5
 8001058:	d027      	beq.n	80010aa <HAL_ADC_Start+0x1f2>
 800105a:	e005      	b.n	8001068 <HAL_ADC_Start+0x1b0>
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <HAL_ADC_Start+0x224>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	2b05      	cmp	r3, #5
 8001066:	d020      	beq.n	80010aa <HAL_ADC_Start+0x1f2>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001070:	d004      	beq.n	800107c <HAL_ADC_Start+0x1c4>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a17      	ldr	r2, [pc, #92]	@ (80010d4 <HAL_ADC_Start+0x21c>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d106      	bne.n	800108a <HAL_ADC_Start+0x1d2>
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_ADC_Start+0x220>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 031f 	and.w	r3, r3, #31
 8001084:	2b09      	cmp	r3, #9
 8001086:	d010      	beq.n	80010aa <HAL_ADC_Start+0x1f2>
 8001088:	e005      	b.n	8001096 <HAL_ADC_Start+0x1de>
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <HAL_ADC_Start+0x224>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	2b09      	cmp	r3, #9
 8001094:	d009      	beq.n	80010aa <HAL_ADC_Start+0x1f2>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800109e:	d004      	beq.n	80010aa <HAL_ADC_Start+0x1f2>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0e      	ldr	r2, [pc, #56]	@ (80010e0 <HAL_ADC_Start+0x228>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10f      	bne.n	80010ca <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f042 0204 	orr.w	r2, r2, #4
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	e006      	b.n	80010ca <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80010c4:	e001      	b.n	80010ca <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010c6:	2302      	movs	r3, #2
 80010c8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	50000100 	.word	0x50000100
 80010d8:	50000300 	.word	0x50000300
 80010dc:	50000700 	.word	0x50000700
 80010e0:	50000400 	.word	0x50000400

080010e4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d102      	bne.n	8001100 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80010fa:	2308      	movs	r3, #8
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e03a      	b.n	8001176 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001108:	d004      	beq.n	8001114 <HAL_ADC_PollForConversion+0x30>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a72      	ldr	r2, [pc, #456]	@ (80012d8 <HAL_ADC_PollForConversion+0x1f4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d101      	bne.n	8001118 <HAL_ADC_PollForConversion+0x34>
 8001114:	4b71      	ldr	r3, [pc, #452]	@ (80012dc <HAL_ADC_PollForConversion+0x1f8>)
 8001116:	e000      	b.n	800111a <HAL_ADC_PollForConversion+0x36>
 8001118:	4b71      	ldr	r3, [pc, #452]	@ (80012e0 <HAL_ADC_PollForConversion+0x1fc>)
 800111a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	2b00      	cmp	r3, #0
 8001126:	d112      	bne.n	800114e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b01      	cmp	r3, #1
 8001134:	d11d      	bne.n	8001172 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f043 0220 	orr.w	r2, r3, #32
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0bf      	b.n	80012ce <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f043 0220 	orr.w	r2, r3, #32
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e0ad      	b.n	80012ce <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001172:	230c      	movs	r3, #12
 8001174:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800117e:	d004      	beq.n	800118a <HAL_ADC_PollForConversion+0xa6>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a54      	ldr	r2, [pc, #336]	@ (80012d8 <HAL_ADC_PollForConversion+0x1f4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d106      	bne.n	8001198 <HAL_ADC_PollForConversion+0xb4>
 800118a:	4b54      	ldr	r3, [pc, #336]	@ (80012dc <HAL_ADC_PollForConversion+0x1f8>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	2b00      	cmp	r3, #0
 8001194:	d010      	beq.n	80011b8 <HAL_ADC_PollForConversion+0xd4>
 8001196:	e005      	b.n	80011a4 <HAL_ADC_PollForConversion+0xc0>
 8001198:	4b51      	ldr	r3, [pc, #324]	@ (80012e0 <HAL_ADC_PollForConversion+0x1fc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d009      	beq.n	80011b8 <HAL_ADC_PollForConversion+0xd4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ac:	d004      	beq.n	80011b8 <HAL_ADC_PollForConversion+0xd4>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <HAL_ADC_PollForConversion+0x200>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d104      	bne.n	80011c2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	e00f      	b.n	80011e2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ca:	d004      	beq.n	80011d6 <HAL_ADC_PollForConversion+0xf2>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a41      	ldr	r2, [pc, #260]	@ (80012d8 <HAL_ADC_PollForConversion+0x1f4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d102      	bne.n	80011dc <HAL_ADC_PollForConversion+0xf8>
 80011d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80011da:	e000      	b.n	80011de <HAL_ADC_PollForConversion+0xfa>
 80011dc:	4b41      	ldr	r3, [pc, #260]	@ (80012e4 <HAL_ADC_PollForConversion+0x200>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80011e2:	f7ff fc3f 	bl	8000a64 <HAL_GetTick>
 80011e6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011e8:	e021      	b.n	800122e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d01d      	beq.n	800122e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <HAL_ADC_PollForConversion+0x124>
 80011f8:	f7ff fc34 	bl	8000a64 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d212      	bcs.n	800122e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10b      	bne.n	800122e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f043 0204 	orr.w	r2, r3, #4
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e04f      	b.n	80012ce <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0d6      	beq.n	80011ea <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001252:	2b00      	cmp	r3, #0
 8001254:	d131      	bne.n	80012ba <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800125c:	2b00      	cmp	r3, #0
 800125e:	d12c      	bne.n	80012ba <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b08      	cmp	r3, #8
 800126c:	d125      	bne.n	80012ba <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d112      	bne.n	80012a2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d112      	bne.n	80012ba <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	@ 0x40
 80012a0:	e00b      	b.n	80012ba <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	50000100 	.word	0x50000100
 80012dc:	50000300 	.word	0x50000300
 80012e0:	50000700 	.word	0x50000700
 80012e4:	50000400 	.word	0x50000400

080012e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001304:	b480      	push	{r7}
 8001306:	b09b      	sub	sp, #108	@ 0x6c
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x22>
 8001322:	2302      	movs	r3, #2
 8001324:	e2c8      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x5b4>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	f040 82ac 	bne.w	8001896 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b04      	cmp	r3, #4
 8001344:	d81c      	bhi.n	8001380 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	461a      	mov	r2, r3
 800135a:	231f      	movs	r3, #31
 800135c:	4093      	lsls	r3, r2
 800135e:	43db      	mvns	r3, r3
 8001360:	4019      	ands	r1, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa00 f203 	lsl.w	r2, r0, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	631a      	str	r2, [r3, #48]	@ 0x30
 800137e:	e063      	b.n	8001448 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b09      	cmp	r3, #9
 8001386:	d81e      	bhi.n	80013c6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	3b1e      	subs	r3, #30
 800139c:	221f      	movs	r2, #31
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	4019      	ands	r1, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	3b1e      	subs	r3, #30
 80013b8:	fa00 f203 	lsl.w	r2, r0, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80013c4:	e040      	b.n	8001448 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b0e      	cmp	r3, #14
 80013cc:	d81e      	bhi.n	800140c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	3b3c      	subs	r3, #60	@ 0x3c
 80013e2:	221f      	movs	r2, #31
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4019      	ands	r1, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	3b3c      	subs	r3, #60	@ 0x3c
 80013fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	639a      	str	r2, [r3, #56]	@ 0x38
 800140a:	e01d      	b.n	8001448 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	3b5a      	subs	r3, #90	@ 0x5a
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	4019      	ands	r1, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	3b5a      	subs	r3, #90	@ 0x5a
 800143c:	fa00 f203 	lsl.w	r2, r0, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	f040 80e5 	bne.w	8001622 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b09      	cmp	r3, #9
 800145e:	d91c      	bls.n	800149a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6999      	ldr	r1, [r3, #24]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	3b1e      	subs	r3, #30
 8001472:	2207      	movs	r2, #7
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6898      	ldr	r0, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	3b1e      	subs	r3, #30
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	619a      	str	r2, [r3, #24]
 8001498:	e019      	b.n	80014ce <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6959      	ldr	r1, [r3, #20]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	2207      	movs	r2, #7
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4019      	ands	r1, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	6898      	ldr	r0, [r3, #8]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	fa00 f203 	lsl.w	r2, r0, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d84f      	bhi.n	8001590 <HAL_ADC_ConfigChannel+0x28c>
 80014f0:	a201      	add	r2, pc, #4	@ (adr r2, 80014f8 <HAL_ADC_ConfigChannel+0x1f4>)
 80014f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f6:	bf00      	nop
 80014f8:	08001509 	.word	0x08001509
 80014fc:	0800152b 	.word	0x0800152b
 8001500:	0800154d 	.word	0x0800154d
 8001504:	0800156f 	.word	0x0800156f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800150e:	4b99      	ldr	r3, [pc, #612]	@ (8001774 <HAL_ADC_ConfigChannel+0x470>)
 8001510:	4013      	ands	r3, r2
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	0691      	lsls	r1, r2, #26
 8001518:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800151a:	430a      	orrs	r2, r1
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001526:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001528:	e07b      	b.n	8001622 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001530:	4b90      	ldr	r3, [pc, #576]	@ (8001774 <HAL_ADC_ConfigChannel+0x470>)
 8001532:	4013      	ands	r3, r2
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	0691      	lsls	r1, r2, #26
 800153a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800153c:	430a      	orrs	r2, r1
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001548:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800154a:	e06a      	b.n	8001622 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001552:	4b88      	ldr	r3, [pc, #544]	@ (8001774 <HAL_ADC_ConfigChannel+0x470>)
 8001554:	4013      	ands	r3, r2
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	0691      	lsls	r1, r2, #26
 800155c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800155e:	430a      	orrs	r2, r1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800156a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800156c:	e059      	b.n	8001622 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001574:	4b7f      	ldr	r3, [pc, #508]	@ (8001774 <HAL_ADC_ConfigChannel+0x470>)
 8001576:	4013      	ands	r3, r2
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	0691      	lsls	r1, r2, #26
 800157e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001580:	430a      	orrs	r2, r1
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800158c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800158e:	e048      	b.n	8001622 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001596:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	069b      	lsls	r3, r3, #26
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d107      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80015b2:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	069b      	lsls	r3, r3, #26
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d107      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80015d6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80015de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	069b      	lsls	r3, r3, #26
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d107      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80015fa:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001602:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	069b      	lsls	r3, r3, #26
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800161e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001620:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x33e>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x33e>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_ADC_ConfigChannel+0x340>
 8001642:	2300      	movs	r3, #0
 8001644:	2b00      	cmp	r3, #0
 8001646:	f040 8131 	bne.w	80018ac <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d00f      	beq.n	8001672 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2201      	movs	r2, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43da      	mvns	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	400a      	ands	r2, r1
 800166c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001670:	e049      	b.n	8001706 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	409a      	lsls	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b09      	cmp	r3, #9
 8001692:	d91c      	bls.n	80016ce <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6999      	ldr	r1, [r3, #24]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	3b1b      	subs	r3, #27
 80016a6:	2207      	movs	r2, #7
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4019      	ands	r1, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6898      	ldr	r0, [r3, #8]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	3b1b      	subs	r3, #27
 80016c0:	fa00 f203 	lsl.w	r2, r0, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	619a      	str	r2, [r3, #24]
 80016cc:	e01b      	b.n	8001706 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6959      	ldr	r1, [r3, #20]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	2207      	movs	r2, #7
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4019      	ands	r1, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	6898      	ldr	r0, [r3, #8]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	fa00 f203 	lsl.w	r2, r0, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800170e:	d004      	beq.n	800171a <HAL_ADC_ConfigChannel+0x416>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <HAL_ADC_ConfigChannel+0x474>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_ADC_ConfigChannel+0x41a>
 800171a:	4b18      	ldr	r3, [pc, #96]	@ (800177c <HAL_ADC_ConfigChannel+0x478>)
 800171c:	e000      	b.n	8001720 <HAL_ADC_ConfigChannel+0x41c>
 800171e:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <HAL_ADC_ConfigChannel+0x47c>)
 8001720:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b10      	cmp	r3, #16
 8001728:	d105      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800172a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001732:	2b00      	cmp	r3, #0
 8001734:	d015      	beq.n	8001762 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800173a:	2b11      	cmp	r3, #17
 800173c:	d105      	bne.n	800174a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800173e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800174e:	2b12      	cmp	r3, #18
 8001750:	f040 80ac 	bne.w	80018ac <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001754:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800175c:	2b00      	cmp	r3, #0
 800175e:	f040 80a5 	bne.w	80018ac <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800176a:	d10b      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x480>
 800176c:	4b02      	ldr	r3, [pc, #8]	@ (8001778 <HAL_ADC_ConfigChannel+0x474>)
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e023      	b.n	80017ba <HAL_ADC_ConfigChannel+0x4b6>
 8001772:	bf00      	nop
 8001774:	83fff000 	.word	0x83fff000
 8001778:	50000100 	.word	0x50000100
 800177c:	50000300 	.word	0x50000300
 8001780:	50000700 	.word	0x50000700
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a4e      	ldr	r2, [pc, #312]	@ (80018c4 <HAL_ADC_ConfigChannel+0x5c0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d103      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x492>
 800178e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e011      	b.n	80017ba <HAL_ADC_ConfigChannel+0x4b6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a4b      	ldr	r2, [pc, #300]	@ (80018c8 <HAL_ADC_ConfigChannel+0x5c4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d102      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x4a2>
 80017a0:	4b4a      	ldr	r3, [pc, #296]	@ (80018cc <HAL_ADC_ConfigChannel+0x5c8>)
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e009      	b.n	80017ba <HAL_ADC_ConfigChannel+0x4b6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a48      	ldr	r2, [pc, #288]	@ (80018cc <HAL_ADC_ConfigChannel+0x5c8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d102      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x4b2>
 80017b0:	4b45      	ldr	r3, [pc, #276]	@ (80018c8 <HAL_ADC_ConfigChannel+0x5c4>)
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e001      	b.n	80017ba <HAL_ADC_ConfigChannel+0x4b6>
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d108      	bne.n	80017da <HAL_ADC_ConfigChannel+0x4d6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_ADC_ConfigChannel+0x4d6>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_ADC_ConfigChannel+0x4d8>
 80017da:	2300      	movs	r3, #0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d150      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017e0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d010      	beq.n	8001808 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x4fe>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x4fe>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_ADC_ConfigChannel+0x500>
 8001802:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001804:	2b00      	cmp	r3, #0
 8001806:	d13c      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b10      	cmp	r3, #16
 800180e:	d11d      	bne.n	800184c <HAL_ADC_ConfigChannel+0x548>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001818:	d118      	bne.n	800184c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800181a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001824:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001826:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a2a      	ldr	r2, [pc, #168]	@ (80018d4 <HAL_ADC_ConfigChannel+0x5d0>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9a      	lsrs	r2, r3, #18
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800183c:	e002      	b.n	8001844 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800184a:	e02e      	b.n	80018aa <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b11      	cmp	r3, #17
 8001852:	d10b      	bne.n	800186c <HAL_ADC_ConfigChannel+0x568>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800185c:	d106      	bne.n	800186c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800185e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001868:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800186a:	e01e      	b.n	80018aa <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b12      	cmp	r3, #18
 8001872:	d11a      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800187c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800187e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001880:	e013      	b.n	80018aa <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f043 0220 	orr.w	r2, r3, #32
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001894:	e00a      	b.n	80018ac <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f043 0220 	orr.w	r2, r3, #32
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80018a8:	e000      	b.n	80018ac <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018aa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	376c      	adds	r7, #108	@ 0x6c
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	50000100 	.word	0x50000100
 80018c8:	50000400 	.word	0x50000400
 80018cc:	50000500 	.word	0x50000500
 80018d0:	20000000 	.word	0x20000000
 80018d4:	431bde83 	.word	0x431bde83

080018d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80018d8:	b480      	push	{r7}
 80018da:	b099      	sub	sp, #100	@ 0x64
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018f0:	d102      	bne.n	80018f8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80018f2:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	e01a      	b.n	800192e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6a      	ldr	r2, [pc, #424]	@ (8001aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d103      	bne.n	800190a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001902:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	e011      	b.n	800192e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a67      	ldr	r2, [pc, #412]	@ (8001aac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d102      	bne.n	800191a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001914:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	e009      	b.n	800192e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a64      	ldr	r2, [pc, #400]	@ (8001ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d102      	bne.n	800192a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001924:	4b61      	ldr	r3, [pc, #388]	@ (8001aac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	e001      	b.n	800192e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b0      	b.n	8001a9a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001942:	2302      	movs	r3, #2
 8001944:	e0a9      	b.n	8001a9a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 808d 	bne.w	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 8086 	bne.w	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001974:	d004      	beq.n	8001980 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001980:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001982:	e000      	b.n	8001986 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001984:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001986:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d040      	beq.n	8001a12 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001990:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019a2:	035b      	lsls	r3, r3, #13
 80019a4:	430b      	orrs	r3, r1
 80019a6:	431a      	orrs	r2, r3
 80019a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019aa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80019cc:	2300      	movs	r3, #0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d15c      	bne.n	8001a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d107      	bne.n	80019ee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80019ee:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d14b      	bne.n	8001a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80019f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80019fc:	f023 030f 	bic.w	r3, r3, #15
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	6811      	ldr	r1, [r2, #0]
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	6892      	ldr	r2, [r2, #8]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a0e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a10:	e03c      	b.n	8001a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a1c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d108      	bne.n	8001a3e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d123      	bne.n	8001a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d107      	bne.n	8001a60 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001a60:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d112      	bne.n	8001a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001a66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001a6e:	f023 030f 	bic.w	r3, r3, #15
 8001a72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a74:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a76:	e009      	b.n	8001a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001a8a:	e000      	b.n	8001a8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a8c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3764      	adds	r7, #100	@ 0x64
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	50000100 	.word	0x50000100
 8001aac:	50000400 	.word	0x50000400
 8001ab0:	50000500 	.word	0x50000500
 8001ab4:	50000300 	.word	0x50000300
 8001ab8:	50000700 	.word	0x50000700

08001abc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d108      	bne.n	8001ae8 <ADC_Enable+0x2c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <ADC_Enable+0x2c>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <ADC_Enable+0x2e>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d143      	bne.n	8001b76 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <ADC_Enable+0xc4>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00d      	beq.n	8001b18 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	f043 0210 	orr.w	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0c:	f043 0201 	orr.w	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e02f      	b.n	8001b78 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001b28:	f7fe ff9c 	bl	8000a64 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b2e:	e01b      	b.n	8001b68 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b30:	f7fe ff98 	bl	8000a64 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d914      	bls.n	8001b68 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d00d      	beq.n	8001b68 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	f043 0210 	orr.w	r2, r3, #16
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e007      	b.n	8001b78 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d1dc      	bne.n	8001b30 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	8000003f 	.word	0x8000003f

08001b84 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d108      	bne.n	8001bb0 <ADC_Disable+0x2c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <ADC_Disable+0x2c>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <ADC_Disable+0x2e>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d047      	beq.n	8001c46 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 030d 	and.w	r3, r3, #13
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d10f      	bne.n	8001be4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0202 	orr.w	r2, r2, #2
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001bdc:	f7fe ff42 	bl	8000a64 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001be2:	e029      	b.n	8001c38 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	f043 0210 	orr.w	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e023      	b.n	8001c48 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c00:	f7fe ff30 	bl	8000a64 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d914      	bls.n	8001c38 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10d      	bne.n	8001c38 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f043 0210 	orr.w	r2, r3, #16
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e007      	b.n	8001c48 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d0dc      	beq.n	8001c00 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	@ (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	@ 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff47 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff5c 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff8e 	bl	8001d08 <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffb0 	bl	8001d70 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	e160      	b.n	80020ee <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8152 	beq.w	80020e8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d005      	beq.n	8001e5c <HAL_GPIO_Init+0x40>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d130      	bne.n	8001ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e92:	2201      	movs	r2, #1
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 0201 	and.w	r2, r3, #1
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d017      	beq.n	8001efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d123      	bne.n	8001f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	6939      	ldr	r1, [r7, #16]
 8001f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0203 	and.w	r2, r3, #3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80ac 	beq.w	80020e8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f90:	4b5e      	ldr	r3, [pc, #376]	@ (800210c <HAL_GPIO_Init+0x2f0>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a5d      	ldr	r2, [pc, #372]	@ (800210c <HAL_GPIO_Init+0x2f0>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b5b      	ldr	r3, [pc, #364]	@ (800210c <HAL_GPIO_Init+0x2f0>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa8:	4a59      	ldr	r2, [pc, #356]	@ (8002110 <HAL_GPIO_Init+0x2f4>)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fd2:	d025      	beq.n	8002020 <HAL_GPIO_Init+0x204>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a4f      	ldr	r2, [pc, #316]	@ (8002114 <HAL_GPIO_Init+0x2f8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d01f      	beq.n	800201c <HAL_GPIO_Init+0x200>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a4e      	ldr	r2, [pc, #312]	@ (8002118 <HAL_GPIO_Init+0x2fc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d019      	beq.n	8002018 <HAL_GPIO_Init+0x1fc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a4d      	ldr	r2, [pc, #308]	@ (800211c <HAL_GPIO_Init+0x300>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d013      	beq.n	8002014 <HAL_GPIO_Init+0x1f8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a4c      	ldr	r2, [pc, #304]	@ (8002120 <HAL_GPIO_Init+0x304>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00d      	beq.n	8002010 <HAL_GPIO_Init+0x1f4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a4b      	ldr	r2, [pc, #300]	@ (8002124 <HAL_GPIO_Init+0x308>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d007      	beq.n	800200c <HAL_GPIO_Init+0x1f0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8002128 <HAL_GPIO_Init+0x30c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_GPIO_Init+0x1ec>
 8002004:	2306      	movs	r3, #6
 8002006:	e00c      	b.n	8002022 <HAL_GPIO_Init+0x206>
 8002008:	2307      	movs	r3, #7
 800200a:	e00a      	b.n	8002022 <HAL_GPIO_Init+0x206>
 800200c:	2305      	movs	r3, #5
 800200e:	e008      	b.n	8002022 <HAL_GPIO_Init+0x206>
 8002010:	2304      	movs	r3, #4
 8002012:	e006      	b.n	8002022 <HAL_GPIO_Init+0x206>
 8002014:	2303      	movs	r3, #3
 8002016:	e004      	b.n	8002022 <HAL_GPIO_Init+0x206>
 8002018:	2302      	movs	r3, #2
 800201a:	e002      	b.n	8002022 <HAL_GPIO_Init+0x206>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_GPIO_Init+0x206>
 8002020:	2300      	movs	r3, #0
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	f002 0203 	and.w	r2, r2, #3
 8002028:	0092      	lsls	r2, r2, #2
 800202a:	4093      	lsls	r3, r2
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002032:	4937      	ldr	r1, [pc, #220]	@ (8002110 <HAL_GPIO_Init+0x2f4>)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002040:	4b3a      	ldr	r3, [pc, #232]	@ (800212c <HAL_GPIO_Init+0x310>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002064:	4a31      	ldr	r2, [pc, #196]	@ (800212c <HAL_GPIO_Init+0x310>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800206a:	4b30      	ldr	r3, [pc, #192]	@ (800212c <HAL_GPIO_Init+0x310>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800208e:	4a27      	ldr	r2, [pc, #156]	@ (800212c <HAL_GPIO_Init+0x310>)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002094:	4b25      	ldr	r3, [pc, #148]	@ (800212c <HAL_GPIO_Init+0x310>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020b8:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_GPIO_Init+0x310>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020be:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <HAL_GPIO_Init+0x310>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020e2:	4a12      	ldr	r2, [pc, #72]	@ (800212c <HAL_GPIO_Init+0x310>)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3301      	adds	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f47f ae97 	bne.w	8001e2c <HAL_GPIO_Init+0x10>
  }
}
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000
 8002114:	48000400 	.word	0x48000400
 8002118:	48000800 	.word	0x48000800
 800211c:	48000c00 	.word	0x48000c00
 8002120:	48001000 	.word	0x48001000
 8002124:	48001400 	.word	0x48001400
 8002128:	48001800 	.word	0x48001800
 800212c:	40010400 	.word	0x40010400

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800214c:	e002      	b.n	8002154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4013      	ands	r3, r2
 8002178:	041a      	lsls	r2, r3, #16
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43d9      	mvns	r1, r3
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	400b      	ands	r3, r1
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	619a      	str	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800219a:	af00      	add	r7, sp, #0
 800219c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f001 b80a 	b.w	80031ce <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8161 	beq.w	8002492 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021d0:	4bae      	ldr	r3, [pc, #696]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d00c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021dc:	4bab      	ldr	r3, [pc, #684]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d157      	bne.n	8002298 <HAL_RCC_OscConfig+0x104>
 80021e8:	4ba8      	ldr	r3, [pc, #672]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f4:	d150      	bne.n	8002298 <HAL_RCC_OscConfig+0x104>
 80021f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021fa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800220a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b3f      	cmp	r3, #63	@ 0x3f
 8002216:	d802      	bhi.n	800221e <HAL_RCC_OscConfig+0x8a>
 8002218:	4b9c      	ldr	r3, [pc, #624]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0xb6>
 800221e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002222:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002232:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002236:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800223a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002246:	4b91      	ldr	r3, [pc, #580]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800224e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002252:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002256:	fa92 f2a2 	rbit	r2, r2
 800225a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800225e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002262:	fab2 f282 	clz	r2, r2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f042 0220 	orr.w	r2, r2, #32
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f002 021f 	and.w	r2, r2, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8108 	beq.w	8002490 <HAL_RCC_OscConfig+0x2fc>
 8002280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002284:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 80ff 	bne.w	8002490 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	f000 bf9b 	b.w	80031ce <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002298:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a8:	d106      	bne.n	80022b8 <HAL_RCC_OscConfig+0x124>
 80022aa:	4b78      	ldr	r3, [pc, #480]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a77      	ldr	r2, [pc, #476]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e036      	b.n	8002326 <HAL_RCC_OscConfig+0x192>
 80022b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10c      	bne.n	80022e2 <HAL_RCC_OscConfig+0x14e>
 80022c8:	4b70      	ldr	r3, [pc, #448]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6f      	ldr	r2, [pc, #444]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b6d      	ldr	r3, [pc, #436]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6c      	ldr	r2, [pc, #432]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e021      	b.n	8002326 <HAL_RCC_OscConfig+0x192>
 80022e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f2:	d10c      	bne.n	800230e <HAL_RCC_OscConfig+0x17a>
 80022f4:	4b65      	ldr	r3, [pc, #404]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a64      	ldr	r2, [pc, #400]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80022fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b62      	ldr	r3, [pc, #392]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a61      	ldr	r2, [pc, #388]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e00b      	b.n	8002326 <HAL_RCC_OscConfig+0x192>
 800230e:	4b5f      	ldr	r3, [pc, #380]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a5e      	ldr	r2, [pc, #376]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 8002314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b5c      	ldr	r3, [pc, #368]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a5b      	ldr	r2, [pc, #364]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 8002320:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002324:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d054      	beq.n	80023e0 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe fb95 	bl	8000a64 <HAL_GetTick>
 800233a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe fb90 	bl	8000a64 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	@ 0x64
 800234e:	d902      	bls.n	8002356 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	f000 bf3c 	b.w	80031ce <HAL_RCC_OscConfig+0x103a>
 8002356:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800235a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800236a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b3f      	cmp	r3, #63	@ 0x3f
 8002376:	d802      	bhi.n	800237e <HAL_RCC_OscConfig+0x1ea>
 8002378:	4b44      	ldr	r3, [pc, #272]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	e015      	b.n	80023aa <HAL_RCC_OscConfig+0x216>
 800237e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002382:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002392:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002396:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800239a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80023a6:	4b39      	ldr	r3, [pc, #228]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 80023a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023ae:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80023b2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80023b6:	fa92 f2a2 	rbit	r2, r2
 80023ba:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80023be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80023c2:	fab2 f282 	clz	r2, r2
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f042 0220 	orr.w	r2, r2, #32
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f002 021f 	and.w	r2, r2, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0b0      	beq.n	8002340 <HAL_RCC_OscConfig+0x1ac>
 80023de:	e058      	b.n	8002492 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fb40 	bl	8000a64 <HAL_GetTick>
 80023e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ea:	f7fe fb3b 	bl	8000a64 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	@ 0x64
 80023f8:	d902      	bls.n	8002400 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	f000 bee7 	b.w	80031ce <HAL_RCC_OscConfig+0x103a>
 8002400:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002404:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002414:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002420:	d802      	bhi.n	8002428 <HAL_RCC_OscConfig+0x294>
 8002422:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	e015      	b.n	8002454 <HAL_RCC_OscConfig+0x2c0>
 8002428:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800242c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800243c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002440:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002444:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002450:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <HAL_RCC_OscConfig+0x2f8>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002458:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800245c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002460:	fa92 f2a2 	rbit	r2, r2
 8002464:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002468:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800246c:	fab2 f282 	clz	r2, r2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	f042 0220 	orr.w	r2, r2, #32
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f002 021f 	and.w	r2, r2, #31
 800247c:	2101      	movs	r1, #1
 800247e:	fa01 f202 	lsl.w	r2, r1, r2
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1b0      	bne.n	80023ea <HAL_RCC_OscConfig+0x256>
 8002488:	e003      	b.n	8002492 <HAL_RCC_OscConfig+0x2fe>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002496:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 816d 	beq.w	8002782 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024a8:	4bcd      	ldr	r3, [pc, #820]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00c      	beq.n	80024ce <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024b4:	4bca      	ldr	r3, [pc, #808]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d16e      	bne.n	800259e <HAL_RCC_OscConfig+0x40a>
 80024c0:	4bc7      	ldr	r3, [pc, #796]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80024c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024cc:	d167      	bne.n	800259e <HAL_RCC_OscConfig+0x40a>
 80024ce:	2302      	movs	r3, #2
 80024d0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80024e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80024ec:	d802      	bhi.n	80024f4 <HAL_RCC_OscConfig+0x360>
 80024ee:	4bbc      	ldr	r3, [pc, #752]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e013      	b.n	800251c <HAL_RCC_OscConfig+0x388>
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002506:	2302      	movs	r3, #2
 8002508:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800250c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002518:	4bb1      	ldr	r3, [pc, #708]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	2202      	movs	r2, #2
 800251e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002522:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002526:	fa92 f2a2 	rbit	r2, r2
 800252a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800252e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002532:	fab2 f282 	clz	r2, r2
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f042 0220 	orr.w	r2, r2, #32
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f002 021f 	and.w	r2, r2, #31
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f202 	lsl.w	r2, r1, r2
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCC_OscConfig+0x3d0>
 800254e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002552:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d002      	beq.n	8002564 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	f000 be35 	b.w	80031ce <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b9e      	ldr	r3, [pc, #632]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002570:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	21f8      	movs	r1, #248	@ 0xf8
 800257a:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002582:	fa91 f1a1 	rbit	r1, r1
 8002586:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800258a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800258e:	fab1 f181 	clz	r1, r1
 8002592:	b2c9      	uxtb	r1, r1
 8002594:	408b      	lsls	r3, r1
 8002596:	4992      	ldr	r1, [pc, #584]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259c:	e0f1      	b.n	8002782 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8083 	beq.w	80026b6 <HAL_RCC_OscConfig+0x522>
 80025b0:	2301      	movs	r3, #1
 80025b2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80025c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	461a      	mov	r2, r3
 80025d8:	2301      	movs	r3, #1
 80025da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fa42 	bl	8000a64 <HAL_GetTick>
 80025e0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e6:	f7fe fa3d 	bl	8000a64 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d902      	bls.n	80025fc <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	f000 bde9 	b.w	80031ce <HAL_RCC_OscConfig+0x103a>
 80025fc:	2302      	movs	r3, #2
 80025fe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800260e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b3f      	cmp	r3, #63	@ 0x3f
 800261a:	d802      	bhi.n	8002622 <HAL_RCC_OscConfig+0x48e>
 800261c:	4b70      	ldr	r3, [pc, #448]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	e013      	b.n	800264a <HAL_RCC_OscConfig+0x4b6>
 8002622:	2302      	movs	r3, #2
 8002624:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002634:	2302      	movs	r3, #2
 8002636:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800263a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002646:	4b66      	ldr	r3, [pc, #408]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	2202      	movs	r2, #2
 800264c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002650:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002654:	fa92 f2a2 	rbit	r2, r2
 8002658:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800265c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002660:	fab2 f282 	clz	r2, r2
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f042 0220 	orr.w	r2, r2, #32
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f002 021f 	and.w	r2, r2, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0b4      	beq.n	80025e6 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b58      	ldr	r3, [pc, #352]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002688:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	21f8      	movs	r1, #248	@ 0xf8
 8002692:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800269a:	fa91 f1a1 	rbit	r1, r1
 800269e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80026a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80026a6:	fab1 f181 	clz	r1, r1
 80026aa:	b2c9      	uxtb	r1, r1
 80026ac:	408b      	lsls	r3, r1
 80026ae:	494c      	ldr	r1, [pc, #304]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
 80026b4:	e065      	b.n	8002782 <HAL_RCC_OscConfig+0x5ee>
 80026b6:	2301      	movs	r3, #1
 80026b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80026c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	461a      	mov	r2, r3
 80026de:	2300      	movs	r3, #0
 80026e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe f9bf 	bl	8000a64 <HAL_GetTick>
 80026e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ec:	f7fe f9ba 	bl	8000a64 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d902      	bls.n	8002702 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	f000 bd66 	b.w	80031ce <HAL_RCC_OscConfig+0x103a>
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002714:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002720:	d802      	bhi.n	8002728 <HAL_RCC_OscConfig+0x594>
 8002722:	4b2f      	ldr	r3, [pc, #188]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0x5bc>
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002740:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800274c:	4b24      	ldr	r3, [pc, #144]	@ (80027e0 <HAL_RCC_OscConfig+0x64c>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	2202      	movs	r2, #2
 8002752:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002756:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002762:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1b4      	bne.n	80026ec <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002786:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8119 	beq.w	80029ca <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8082 	beq.w	80028ae <HAL_RCC_OscConfig+0x71a>
 80027aa:	2301      	movs	r3, #1
 80027ac:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80027bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_RCC_OscConfig+0x650>)
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	461a      	mov	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7fe f946 	bl	8000a64 <HAL_GetTick>
 80027d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027dc:	e00f      	b.n	80027fe <HAL_RCC_OscConfig+0x66a>
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe f93c 	bl	8000a64 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d902      	bls.n	80027fe <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	f000 bce8 	b.w	80031ce <HAL_RCC_OscConfig+0x103a>
 80027fe:	2302      	movs	r3, #2
 8002800:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002810:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800281e:	2202      	movs	r2, #2
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fa93 f2a3 	rbit	r2, r3
 8002830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800283e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002842:	2202      	movs	r2, #2
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002858:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800285c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	4bb0      	ldr	r3, [pc, #704]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002866:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800286a:	2102      	movs	r1, #2
 800286c:	6019      	str	r1, [r3, #0]
 800286e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002872:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	fa93 f1a3 	rbit	r1, r3
 800287c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002880:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002884:	6019      	str	r1, [r3, #0]
  return result;
 8002886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d09d      	beq.n	80027e8 <HAL_RCC_OscConfig+0x654>
 80028ac:	e08d      	b.n	80029ca <HAL_RCC_OscConfig+0x836>
 80028ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fa93 f2a3 	rbit	r2, r3
 80028c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028cc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028d0:	601a      	str	r2, [r3, #0]
  return result;
 80028d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002b24 <HAL_RCC_OscConfig+0x990>)
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	461a      	mov	r2, r3
 80028ec:	2300      	movs	r3, #0
 80028ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f0:	f7fe f8b8 	bl	8000a64 <HAL_GetTick>
 80028f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	e00a      	b.n	8002910 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe f8b3 	bl	8000a64 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	f000 bc5f 	b.w	80031ce <HAL_RCC_OscConfig+0x103a>
 8002910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002914:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002918:	2202      	movs	r2, #2
 800291a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002920:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002938:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800293c:	2202      	movs	r2, #2
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002944:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fa93 f2a3 	rbit	r2, r3
 800294e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002952:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800295c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002960:	2202      	movs	r2, #2
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002968:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	fa93 f2a3 	rbit	r2, r3
 8002972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002976:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800297a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b68      	ldr	r3, [pc, #416]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 800297e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002984:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002988:	2102      	movs	r1, #2
 800298a:	6019      	str	r1, [r3, #0]
 800298c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002990:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	fa93 f1a3 	rbit	r1, r3
 800299a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800299e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029a2:	6019      	str	r1, [r3, #0]
  return result;
 80029a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d197      	bne.n	80028fa <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 819c 	beq.w	8002d18 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029fc:	61d3      	str	r3, [r2, #28]
 80029fe:	4b48      	ldr	r3, [pc, #288]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a18:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	4b41      	ldr	r3, [pc, #260]	@ (8002b28 <HAL_RCC_OscConfig+0x994>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d11a      	bne.n	8002a62 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b28 <HAL_RCC_OscConfig+0x994>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a3d      	ldr	r2, [pc, #244]	@ (8002b28 <HAL_RCC_OscConfig+0x994>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a36:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a38:	f7fe f814 	bl	8000a64 <HAL_GetTick>
 8002a3c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	e009      	b.n	8002a56 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a42:	f7fe f80f 	bl	8000a64 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e3bb      	b.n	80031ce <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <HAL_RCC_OscConfig+0x994>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0ef      	beq.n	8002a42 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d106      	bne.n	8002a80 <HAL_RCC_OscConfig+0x8ec>
 8002a72:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a2a      	ldr	r2, [pc, #168]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6213      	str	r3, [r2, #32]
 8002a7e:	e035      	b.n	8002aec <HAL_RCC_OscConfig+0x958>
 8002a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10c      	bne.n	8002aaa <HAL_RCC_OscConfig+0x916>
 8002a90:	4b23      	ldr	r3, [pc, #140]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4a22      	ldr	r2, [pc, #136]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6213      	str	r3, [r2, #32]
 8002a9c:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	e020      	b.n	8002aec <HAL_RCC_OscConfig+0x958>
 8002aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x940>
 8002aba:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4a18      	ldr	r2, [pc, #96]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002ac0:	f043 0304 	orr.w	r3, r3, #4
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4a15      	ldr	r2, [pc, #84]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6213      	str	r3, [r2, #32]
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0x958>
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a11      	ldr	r2, [pc, #68]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b20 <HAL_RCC_OscConfig+0x98c>)
 8002ae6:	f023 0304 	bic.w	r3, r3, #4
 8002aea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8085 	beq.w	8002c08 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afe:	f7fd ffb1 	bl	8000a64 <HAL_GetTick>
 8002b02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	e011      	b.n	8002b2c <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fd ffac 	bl	8000a64 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d907      	bls.n	8002b2c <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e356      	b.n	80031ce <HAL_RCC_OscConfig+0x103a>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	10908120 	.word	0x10908120
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b30:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b34:	2202      	movs	r2, #2
 8002b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b54:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b58:	2202      	movs	r2, #2
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b60:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b72:	601a      	str	r2, [r3, #0]
  return result;
 8002b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_OscConfig+0xa00>
 8002b8e:	4b98      	ldr	r3, [pc, #608]	@ (8002df0 <HAL_RCC_OscConfig+0xc5c>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	e013      	b.n	8002bbc <HAL_RCC_OscConfig+0xa28>
 8002b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b98:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	fa93 f2a3 	rbit	r2, r3
 8002bae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	4b8d      	ldr	r3, [pc, #564]	@ (8002df0 <HAL_RCC_OscConfig+0xc5c>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bc0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	6011      	str	r1, [r2, #0]
 8002bc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bcc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	fa92 f1a2 	rbit	r1, r2
 8002bd6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bda:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002bde:	6011      	str	r1, [r2, #0]
  return result;
 8002be0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002be4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	fab2 f282 	clz	r2, r2
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f002 021f 	and.w	r2, r2, #31
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d080      	beq.n	8002b08 <HAL_RCC_OscConfig+0x974>
 8002c06:	e07d      	b.n	8002d04 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c08:	f7fd ff2c 	bl	8000a64 <HAL_GetTick>
 8002c0c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c10:	e00b      	b.n	8002c2a <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7fd ff27 	bl	8000a64 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e2d1      	b.n	80031ce <HAL_RCC_OscConfig+0x103a>
 8002c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c32:	2202      	movs	r2, #2
 8002c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	fa93 f2a3 	rbit	r2, r3
 8002c44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c48:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c52:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c56:	2202      	movs	r2, #2
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	fa93 f2a3 	rbit	r2, r3
 8002c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c70:	601a      	str	r2, [r3, #0]
  return result;
 8002c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c76:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCC_OscConfig+0xafe>
 8002c8c:	4b58      	ldr	r3, [pc, #352]	@ (8002df0 <HAL_RCC_OscConfig+0xc5c>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	e013      	b.n	8002cba <HAL_RCC_OscConfig+0xb26>
 8002c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c96:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	4b4e      	ldr	r3, [pc, #312]	@ (8002df0 <HAL_RCC_OscConfig+0xc5c>)
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cbe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	6011      	str	r1, [r2, #0]
 8002cc6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cca:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	fa92 f1a2 	rbit	r1, r2
 8002cd4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cd8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002cdc:	6011      	str	r1, [r2, #0]
  return result;
 8002cde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ce2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	fab2 f282 	clz	r2, r2
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f002 021f 	and.w	r2, r2, #31
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d186      	bne.n	8002c12 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d04:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0c:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <HAL_RCC_OscConfig+0xc5c>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	4a37      	ldr	r2, [pc, #220]	@ (8002df0 <HAL_RCC_OscConfig+0xc5c>)
 8002d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d1c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8251 	beq.w	80031cc <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d2a:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <HAL_RCC_OscConfig+0xc5c>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	f000 820f 	beq.w	8003156 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	f040 8165 	bne.w	8003014 <HAL_RCC_OscConfig+0xe80>
 8002d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d6a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d6e:	601a      	str	r2, [r3, #0]
  return result;
 8002d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d74:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d84:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fd fe68 	bl	8000a64 <HAL_GetTick>
 8002d94:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d98:	e009      	b.n	8002dae <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fd fe63 	bl	8000a64 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e20f      	b.n	80031ce <HAL_RCC_OscConfig+0x103a>
 8002dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002db6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002dd2:	601a      	str	r2, [r3, #0]
  return result;
 8002dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ddc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002de6:	d805      	bhi.n	8002df4 <HAL_RCC_OscConfig+0xc60>
 8002de8:	4b01      	ldr	r3, [pc, #4]	@ (8002df0 <HAL_RCC_OscConfig+0xc5c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	e02a      	b.n	8002e44 <HAL_RCC_OscConfig+0xcb0>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e06:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e14:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e1e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e3a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	4bca      	ldr	r3, [pc, #808]	@ (800316c <HAL_RCC_OscConfig+0xfd8>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e48:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e50:	6011      	str	r1, [r2, #0]
 8002e52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e56:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	fa92 f1a2 	rbit	r1, r2
 8002e60:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e64:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002e68:	6011      	str	r1, [r2, #0]
  return result;
 8002e6a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e6e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f002 021f 	and.w	r2, r2, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d184      	bne.n	8002d9a <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e90:	4bb6      	ldr	r3, [pc, #728]	@ (800316c <HAL_RCC_OscConfig+0xfd8>)
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	f023 020f 	bic.w	r2, r3, #15
 8002e98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	49b1      	ldr	r1, [pc, #708]	@ (800316c <HAL_RCC_OscConfig+0xfd8>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002eaa:	4bb0      	ldr	r3, [pc, #704]	@ (800316c <HAL_RCC_OscConfig+0xfd8>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002eb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a19      	ldr	r1, [r3, #32]
 8002ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	49a7      	ldr	r1, [pc, #668]	@ (800316c <HAL_RCC_OscConfig+0xfd8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]
 8002ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002eda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ef6:	601a      	str	r2, [r3, #0]
  return result;
 8002ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002efc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f00:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f0c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	461a      	mov	r2, r3
 8002f14:	2301      	movs	r3, #1
 8002f16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fd fda4 	bl	8000a64 <HAL_GetTick>
 8002f1c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f20:	e009      	b.n	8002f36 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fd fd9f 	bl	8000a64 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e14b      	b.n	80031ce <HAL_RCC_OscConfig+0x103a>
 8002f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f48:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	fa93 f2a3 	rbit	r2, r3
 8002f52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f56:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f5a:	601a      	str	r2, [r3, #0]
  return result;
 8002f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f60:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f6e:	d802      	bhi.n	8002f76 <HAL_RCC_OscConfig+0xde2>
 8002f70:	4b7e      	ldr	r3, [pc, #504]	@ (800316c <HAL_RCC_OscConfig+0xfd8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	e027      	b.n	8002fc6 <HAL_RCC_OscConfig+0xe32>
 8002f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f88:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f96:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002fa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fbc:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800316c <HAL_RCC_OscConfig+0xfd8>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fca:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002fce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fd2:	6011      	str	r1, [r2, #0]
 8002fd4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fd8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	fa92 f1a2 	rbit	r1, r2
 8002fe2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fe6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002fea:	6011      	str	r1, [r2, #0]
  return result;
 8002fec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ff0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	fab2 f282 	clz	r2, r2
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	f042 0220 	orr.w	r2, r2, #32
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f002 021f 	and.w	r2, r2, #31
 8003006:	2101      	movs	r1, #1
 8003008:	fa01 f202 	lsl.w	r2, r1, r2
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d087      	beq.n	8002f22 <HAL_RCC_OscConfig+0xd8e>
 8003012:	e0db      	b.n	80031cc <HAL_RCC_OscConfig+0x1038>
 8003014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003018:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800301c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003026:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	fa93 f2a3 	rbit	r2, r3
 8003030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003034:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003038:	601a      	str	r2, [r3, #0]
  return result;
 800303a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003042:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800304e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	2300      	movs	r3, #0
 8003058:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7fd fd03 	bl	8000a64 <HAL_GetTick>
 800305e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	e009      	b.n	8003078 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003064:	f7fd fcfe 	bl	8000a64 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0aa      	b.n	80031ce <HAL_RCC_OscConfig+0x103a>
 8003078:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800307c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003080:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800308a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003098:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800309c:	601a      	str	r2, [r3, #0]
  return result;
 800309e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80030a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80030b0:	d802      	bhi.n	80030b8 <HAL_RCC_OscConfig+0xf24>
 80030b2:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <HAL_RCC_OscConfig+0xfd8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e027      	b.n	8003108 <HAL_RCC_OscConfig+0xf74>
 80030b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030bc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80030c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ca:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	fa93 f2a3 	rbit	r2, r3
 80030d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80030e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030fe:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	4b19      	ldr	r3, [pc, #100]	@ (800316c <HAL_RCC_OscConfig+0xfd8>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800310c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003110:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003114:	6011      	str	r1, [r2, #0]
 8003116:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800311a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	fa92 f1a2 	rbit	r1, r2
 8003124:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003128:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800312c:	6011      	str	r1, [r2, #0]
  return result;
 800312e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003132:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	fab2 f282 	clz	r2, r2
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	f042 0220 	orr.w	r2, r2, #32
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f002 021f 	and.w	r2, r2, #31
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f202 	lsl.w	r2, r1, r2
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d187      	bne.n	8003064 <HAL_RCC_OscConfig+0xed0>
 8003154:	e03a      	b.n	80031cc <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003156:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800315a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d104      	bne.n	8003170 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e031      	b.n	80031ce <HAL_RCC_OscConfig+0x103a>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003170:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_RCC_OscConfig+0x1044>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003178:	4b17      	ldr	r3, [pc, #92]	@ (80031d8 <HAL_RCC_OscConfig+0x1044>)
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003180:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003184:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003188:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800318c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	429a      	cmp	r2, r3
 8003196:	d117      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003198:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800319c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d10b      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80031b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031b4:	f003 020f 	and.w	r2, r3, #15
 80031b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000

080031dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b09e      	sub	sp, #120	@ 0x78
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e154      	b.n	800349e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b89      	ldr	r3, [pc, #548]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d910      	bls.n	8003224 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b86      	ldr	r3, [pc, #536]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	4984      	ldr	r1, [pc, #528]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b82      	ldr	r3, [pc, #520]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e13c      	b.n	800349e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003230:	4b7b      	ldr	r3, [pc, #492]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4978      	ldr	r1, [pc, #480]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80cd 	beq.w	80033ea <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d137      	bne.n	80032c8 <HAL_RCC_ClockConfig+0xec>
 8003258:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800325c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003270:	d802      	bhi.n	8003278 <HAL_RCC_ClockConfig+0x9c>
 8003272:	4b6b      	ldr	r3, [pc, #428]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	e00f      	b.n	8003298 <HAL_RCC_ClockConfig+0xbc>
 8003278:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800327c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	667b      	str	r3, [r7, #100]	@ 0x64
 8003286:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800328a:	663b      	str	r3, [r7, #96]	@ 0x60
 800328c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003294:	4b62      	ldr	r3, [pc, #392]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800329c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800329e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032a0:	fa92 f2a2 	rbit	r2, r2
 80032a4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80032a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032a8:	fab2 f282 	clz	r2, r2
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f042 0220 	orr.w	r2, r2, #32
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f002 021f 	and.w	r2, r2, #31
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f202 	lsl.w	r2, r1, r2
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d171      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0ea      	b.n	800349e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d137      	bne.n	8003340 <HAL_RCC_ClockConfig+0x164>
 80032d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80032de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80032e8:	d802      	bhi.n	80032f0 <HAL_RCC_ClockConfig+0x114>
 80032ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e00f      	b.n	8003310 <HAL_RCC_ClockConfig+0x134>
 80032f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003302:	643b      	str	r3, [r7, #64]	@ 0x40
 8003304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800330c:	4b44      	ldr	r3, [pc, #272]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003314:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003316:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003318:	fa92 f2a2 	rbit	r2, r2
 800331c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800331e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003320:	fab2 f282 	clz	r2, r2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	f042 0220 	orr.w	r2, r2, #32
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f002 021f 	and.w	r2, r2, #31
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f202 	lsl.w	r2, r1, r2
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d135      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0ae      	b.n	800349e <HAL_RCC_ClockConfig+0x2c2>
 8003340:	2302      	movs	r3, #2
 8003342:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b3f      	cmp	r3, #63	@ 0x3f
 8003356:	d802      	bhi.n	800335e <HAL_RCC_ClockConfig+0x182>
 8003358:	4b31      	ldr	r3, [pc, #196]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	e00d      	b.n	800337a <HAL_RCC_ClockConfig+0x19e>
 800335e:	2302      	movs	r3, #2
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
 800336a:	2302      	movs	r3, #2
 800336c:	623b      	str	r3, [r7, #32]
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	4b2a      	ldr	r3, [pc, #168]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	2202      	movs	r2, #2
 800337c:	61ba      	str	r2, [r7, #24]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	fa92 f2a2 	rbit	r2, r2
 8003384:	617a      	str	r2, [r7, #20]
  return result;
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	fab2 f282 	clz	r2, r2
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	f042 0220 	orr.w	r2, r2, #32
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	f002 021f 	and.w	r2, r2, #31
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f202 	lsl.w	r2, r1, r2
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e07a      	b.n	800349e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 0203 	bic.w	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	491a      	ldr	r1, [pc, #104]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ba:	f7fd fb53 	bl	8000a64 <HAL_GetTick>
 80033be:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c2:	f7fd fb4f 	bl	8000a64 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e062      	b.n	800349e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <HAL_RCC_ClockConfig+0x244>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 020c 	and.w	r2, r3, #12
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d1eb      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ea:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d215      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f8:	4b08      	ldr	r3, [pc, #32]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 0207 	bic.w	r2, r3, #7
 8003400:	4906      	ldr	r1, [pc, #24]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <HAL_RCC_ClockConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d006      	beq.n	8003424 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e041      	b.n	800349e <HAL_RCC_ClockConfig+0x2c2>
 800341a:	bf00      	nop
 800341c:	40022000 	.word	0x40022000
 8003420:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	4b1d      	ldr	r3, [pc, #116]	@ (80034a8 <HAL_RCC_ClockConfig+0x2cc>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	491a      	ldr	r1, [pc, #104]	@ (80034a8 <HAL_RCC_ClockConfig+0x2cc>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344e:	4b16      	ldr	r3, [pc, #88]	@ (80034a8 <HAL_RCC_ClockConfig+0x2cc>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4912      	ldr	r1, [pc, #72]	@ (80034a8 <HAL_RCC_ClockConfig+0x2cc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003462:	f000 f829 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8003466:	4601      	mov	r1, r0
 8003468:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <HAL_RCC_ClockConfig+0x2cc>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003470:	22f0      	movs	r2, #240	@ 0xf0
 8003472:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	fa92 f2a2 	rbit	r2, r2
 800347a:	60fa      	str	r2, [r7, #12]
  return result;
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	fab2 f282 	clz	r2, r2
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	40d3      	lsrs	r3, r2
 8003486:	4a09      	ldr	r2, [pc, #36]	@ (80034ac <HAL_RCC_ClockConfig+0x2d0>)
 8003488:	5cd3      	ldrb	r3, [r2, r3]
 800348a:	fa21 f303 	lsr.w	r3, r1, r3
 800348e:	4a08      	ldr	r2, [pc, #32]	@ (80034b0 <HAL_RCC_ClockConfig+0x2d4>)
 8003490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003492:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <HAL_RCC_ClockConfig+0x2d8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd faa0 	bl	80009dc <HAL_InitTick>
  
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3778      	adds	r7, #120	@ 0x78
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	08004d5c 	.word	0x08004d5c
 80034b0:	20000000 	.word	0x20000000
 80034b4:	20000004 	.word	0x20000004

080034b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80034d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x98>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d002      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x30>
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d003      	beq.n	80034ee <HAL_RCC_GetSysClockFreq+0x36>
 80034e6:	e029      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034ea:	613b      	str	r3, [r7, #16]
      break;
 80034ec:	e029      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	0c9b      	lsrs	r3, r3, #18
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	4a18      	ldr	r2, [pc, #96]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034f8:	5cd3      	ldrb	r3, [r2, r3]
 80034fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80034fc:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x98>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	4a15      	ldr	r2, [pc, #84]	@ (800355c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003514:	4a0f      	ldr	r2, [pc, #60]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	fbb2 f2f3 	udiv	r2, r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e007      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003526:	4a0b      	ldr	r2, [pc, #44]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	fbb2 f2f3 	udiv	r2, r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	613b      	str	r3, [r7, #16]
      break;
 800353a:	e002      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x9c>)
 800353e:	613b      	str	r3, [r7, #16]
      break;
 8003540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003542:	693b      	ldr	r3, [r7, #16]
}
 8003544:	4618      	mov	r0, r3
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40021000 	.word	0x40021000
 8003554:	007a1200 	.word	0x007a1200
 8003558:	08004d74 	.word	0x08004d74
 800355c:	08004d84 	.word	0x08004d84

08003560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003564:	4b03      	ldr	r3, [pc, #12]	@ (8003574 <HAL_RCC_GetHCLKFreq+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000000 	.word	0x20000000

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800357e:	f7ff ffef 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8003582:	4601      	mov	r1, r0
 8003584:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800358c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003590:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	fa92 f2a2 	rbit	r2, r2
 8003598:	603a      	str	r2, [r7, #0]
  return result;
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	fab2 f282 	clz	r2, r2
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	40d3      	lsrs	r3, r2
 80035a4:	4a04      	ldr	r2, [pc, #16]	@ (80035b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80035a6:	5cd3      	ldrb	r3, [r2, r3]
 80035a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08004d6c 	.word	0x08004d6c

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035c2:	f7ff ffcd 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80035c6:	4601      	mov	r1, r0
 80035c8:	4b0b      	ldr	r3, [pc, #44]	@ (80035f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80035d0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80035d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	fa92 f2a2 	rbit	r2, r2
 80035dc:	603a      	str	r2, [r7, #0]
  return result;
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	fab2 f282 	clz	r2, r2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	40d3      	lsrs	r3, r2
 80035e8:	4a04      	ldr	r2, [pc, #16]	@ (80035fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	08004d6c 	.word	0x08004d6c

08003600 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b092      	sub	sp, #72	@ 0x48
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80d2 	beq.w	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003624:	4b4d      	ldr	r3, [pc, #308]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10e      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003630:	4b4a      	ldr	r3, [pc, #296]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	4a49      	ldr	r2, [pc, #292]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363a:	61d3      	str	r3, [r2, #28]
 800363c:	4b47      	ldr	r3, [pc, #284]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364e:	4b44      	ldr	r3, [pc, #272]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d118      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365a:	4b41      	ldr	r3, [pc, #260]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a40      	ldr	r2, [pc, #256]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003664:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003666:	f7fd f9fd 	bl	8000a64 <HAL_GetTick>
 800366a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	e008      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366e:	f7fd f9f9 	bl	8000a64 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b64      	cmp	r3, #100	@ 0x64
 800367a:	d901      	bls.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e1d4      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	4b37      	ldr	r3, [pc, #220]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800368c:	4b33      	ldr	r3, [pc, #204]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003694:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8082 	beq.w	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d07a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ac:	4b2b      	ldr	r3, [pc, #172]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	4b25      	ldr	r3, [pc, #148]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	461a      	mov	r2, r3
 80036d6:	2301      	movs	r3, #1
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	461a      	mov	r2, r3
 80036fa:	2300      	movs	r3, #0
 80036fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036fe:	4a17      	ldr	r2, [pc, #92]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003702:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d049      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7fd f9a9 	bl	8000a64 <HAL_GetTick>
 8003712:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003714:	e00a      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fd f9a5 	bl	8000a64 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e17e      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800372c:	2302      	movs	r3, #2
 800372e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
 8003738:	2302      	movs	r3, #2
 800373a:	623b      	str	r3, [r7, #32]
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	61fb      	str	r3, [r7, #28]
  return result;
 8003744:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d108      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003756:	4b01      	ldr	r3, [pc, #4]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	e00d      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800375c:	40021000 	.word	0x40021000
 8003760:	40007000 	.word	0x40007000
 8003764:	10908100 	.word	0x10908100
 8003768:	2302      	movs	r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	4b9a      	ldr	r3, [pc, #616]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	2202      	movs	r2, #2
 800377a:	613a      	str	r2, [r7, #16]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	fa92 f2a2 	rbit	r2, r2
 8003782:	60fa      	str	r2, [r7, #12]
  return result;
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	fab2 f282 	clz	r2, r2
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	f002 021f 	and.w	r2, r2, #31
 8003796:	2101      	movs	r1, #1
 8003798:	fa01 f202 	lsl.w	r2, r1, r2
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0b9      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037a2:	4b8f      	ldr	r3, [pc, #572]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	498c      	ldr	r1, [pc, #560]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d105      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037bc:	4b88      	ldr	r3, [pc, #544]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	4a87      	ldr	r2, [pc, #540]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d4:	4b82      	ldr	r3, [pc, #520]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d8:	f023 0203 	bic.w	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	497f      	ldr	r1, [pc, #508]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037f2:	4b7b      	ldr	r3, [pc, #492]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	4978      	ldr	r1, [pc, #480]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003810:	4b73      	ldr	r3, [pc, #460]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	4970      	ldr	r1, [pc, #448]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800381e:	4313      	orrs	r3, r2
 8003820:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382e:	4b6c      	ldr	r3, [pc, #432]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	f023 0210 	bic.w	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	4969      	ldr	r1, [pc, #420]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383c:	4313      	orrs	r3, r2
 800383e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800384c:	4b64      	ldr	r3, [pc, #400]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003858:	4961      	ldr	r1, [pc, #388]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800386a:	4b5d      	ldr	r3, [pc, #372]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	f023 0220 	bic.w	r2, r3, #32
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	495a      	ldr	r1, [pc, #360]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003878:	4313      	orrs	r3, r2
 800387a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003888:	4b55      	ldr	r3, [pc, #340]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	4952      	ldr	r1, [pc, #328]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003896:	4313      	orrs	r3, r2
 8003898:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038a6:	4b4e      	ldr	r3, [pc, #312]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	494b      	ldr	r1, [pc, #300]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038c4:	4b46      	ldr	r3, [pc, #280]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	4943      	ldr	r1, [pc, #268]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038e2:	4b3f      	ldr	r3, [pc, #252]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	493c      	ldr	r1, [pc, #240]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003900:	4b37      	ldr	r3, [pc, #220]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	4934      	ldr	r1, [pc, #208]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800391e:	4b30      	ldr	r3, [pc, #192]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392a:	492d      	ldr	r1, [pc, #180]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800393c:	4b28      	ldr	r3, [pc, #160]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003948:	4925      	ldr	r1, [pc, #148]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394a:	4313      	orrs	r3, r2
 800394c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800395a:	4b21      	ldr	r3, [pc, #132]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	491e      	ldr	r1, [pc, #120]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003978:	4b19      	ldr	r3, [pc, #100]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003984:	4916      	ldr	r1, [pc, #88]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003996:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a2:	490f      	ldr	r1, [pc, #60]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039b4:	4b0a      	ldr	r3, [pc, #40]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c0:	4907      	ldr	r1, [pc, #28]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00c      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039d2:	4b03      	ldr	r3, [pc, #12]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	e002      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e6:	4913      	ldr	r1, [pc, #76]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a04:	490b      	ldr	r1, [pc, #44]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003a16:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a22:	4904      	ldr	r1, [pc, #16]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3748      	adds	r7, #72	@ 0x48
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000

08003a38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e040      	b.n	8003acc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fc fec4 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2224      	movs	r2, #36	@ 0x24
 8003a64:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa86 	bl	8003f90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f8af 	bl	8003be8 <UART_SetConfig>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e01b      	b.n	8003acc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ab2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fb05 	bl	80040d4 <UART_CheckIdleState>
 8003aca:	4603      	mov	r3, r0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	@ 0x28
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d177      	bne.n	8003bdc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_UART_Transmit+0x24>
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e070      	b.n	8003bde <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2221      	movs	r2, #33	@ 0x21
 8003b08:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b0a:	f7fc ffab 	bl	8000a64 <HAL_GetTick>
 8003b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b28:	d108      	bne.n	8003b3c <HAL_UART_Transmit+0x68>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d104      	bne.n	8003b3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e003      	b.n	8003b44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b44:	e02f      	b.n	8003ba6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2180      	movs	r1, #128	@ 0x80
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fb67 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e03b      	b.n	8003bde <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	3302      	adds	r3, #2
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e007      	b.n	8003b94 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1c9      	bne.n	8003b46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	@ 0x40
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fb31 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e005      	b.n	8003bde <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4b92      	ldr	r3, [pc, #584]	@ (8003e5c <UART_SetConfig+0x274>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	6979      	ldr	r1, [r7, #20]
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a80      	ldr	r2, [pc, #512]	@ (8003e60 <UART_SetConfig+0x278>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d120      	bne.n	8003ca6 <UART_SetConfig+0xbe>
 8003c64:	4b7f      	ldr	r3, [pc, #508]	@ (8003e64 <UART_SetConfig+0x27c>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d817      	bhi.n	8003ca0 <UART_SetConfig+0xb8>
 8003c70:	a201      	add	r2, pc, #4	@ (adr r2, 8003c78 <UART_SetConfig+0x90>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003c95 	.word	0x08003c95
 8003c80:	08003c9b 	.word	0x08003c9b
 8003c84:	08003c8f 	.word	0x08003c8f
 8003c88:	2301      	movs	r3, #1
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e0b5      	b.n	8003dfa <UART_SetConfig+0x212>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e0b2      	b.n	8003dfa <UART_SetConfig+0x212>
 8003c94:	2304      	movs	r3, #4
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e0af      	b.n	8003dfa <UART_SetConfig+0x212>
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e0ac      	b.n	8003dfa <UART_SetConfig+0x212>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e0a9      	b.n	8003dfa <UART_SetConfig+0x212>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6f      	ldr	r2, [pc, #444]	@ (8003e68 <UART_SetConfig+0x280>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d124      	bne.n	8003cfa <UART_SetConfig+0x112>
 8003cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8003e64 <UART_SetConfig+0x27c>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cbc:	d011      	beq.n	8003ce2 <UART_SetConfig+0xfa>
 8003cbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cc2:	d817      	bhi.n	8003cf4 <UART_SetConfig+0x10c>
 8003cc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cc8:	d011      	beq.n	8003cee <UART_SetConfig+0x106>
 8003cca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cce:	d811      	bhi.n	8003cf4 <UART_SetConfig+0x10c>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <UART_SetConfig+0xf4>
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd8:	d006      	beq.n	8003ce8 <UART_SetConfig+0x100>
 8003cda:	e00b      	b.n	8003cf4 <UART_SetConfig+0x10c>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e08b      	b.n	8003dfa <UART_SetConfig+0x212>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e088      	b.n	8003dfa <UART_SetConfig+0x212>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e085      	b.n	8003dfa <UART_SetConfig+0x212>
 8003cee:	2308      	movs	r3, #8
 8003cf0:	77fb      	strb	r3, [r7, #31]
 8003cf2:	e082      	b.n	8003dfa <UART_SetConfig+0x212>
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e07f      	b.n	8003dfa <UART_SetConfig+0x212>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a5b      	ldr	r2, [pc, #364]	@ (8003e6c <UART_SetConfig+0x284>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d124      	bne.n	8003d4e <UART_SetConfig+0x166>
 8003d04:	4b57      	ldr	r3, [pc, #348]	@ (8003e64 <UART_SetConfig+0x27c>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003d0c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d10:	d011      	beq.n	8003d36 <UART_SetConfig+0x14e>
 8003d12:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d16:	d817      	bhi.n	8003d48 <UART_SetConfig+0x160>
 8003d18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d1c:	d011      	beq.n	8003d42 <UART_SetConfig+0x15a>
 8003d1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d22:	d811      	bhi.n	8003d48 <UART_SetConfig+0x160>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <UART_SetConfig+0x148>
 8003d28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d2c:	d006      	beq.n	8003d3c <UART_SetConfig+0x154>
 8003d2e:	e00b      	b.n	8003d48 <UART_SetConfig+0x160>
 8003d30:	2300      	movs	r3, #0
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e061      	b.n	8003dfa <UART_SetConfig+0x212>
 8003d36:	2302      	movs	r3, #2
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e05e      	b.n	8003dfa <UART_SetConfig+0x212>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e05b      	b.n	8003dfa <UART_SetConfig+0x212>
 8003d42:	2308      	movs	r3, #8
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e058      	b.n	8003dfa <UART_SetConfig+0x212>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e055      	b.n	8003dfa <UART_SetConfig+0x212>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a47      	ldr	r2, [pc, #284]	@ (8003e70 <UART_SetConfig+0x288>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d124      	bne.n	8003da2 <UART_SetConfig+0x1ba>
 8003d58:	4b42      	ldr	r3, [pc, #264]	@ (8003e64 <UART_SetConfig+0x27c>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d64:	d011      	beq.n	8003d8a <UART_SetConfig+0x1a2>
 8003d66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d6a:	d817      	bhi.n	8003d9c <UART_SetConfig+0x1b4>
 8003d6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d70:	d011      	beq.n	8003d96 <UART_SetConfig+0x1ae>
 8003d72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d76:	d811      	bhi.n	8003d9c <UART_SetConfig+0x1b4>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <UART_SetConfig+0x19c>
 8003d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d80:	d006      	beq.n	8003d90 <UART_SetConfig+0x1a8>
 8003d82:	e00b      	b.n	8003d9c <UART_SetConfig+0x1b4>
 8003d84:	2300      	movs	r3, #0
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e037      	b.n	8003dfa <UART_SetConfig+0x212>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e034      	b.n	8003dfa <UART_SetConfig+0x212>
 8003d90:	2304      	movs	r3, #4
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e031      	b.n	8003dfa <UART_SetConfig+0x212>
 8003d96:	2308      	movs	r3, #8
 8003d98:	77fb      	strb	r3, [r7, #31]
 8003d9a:	e02e      	b.n	8003dfa <UART_SetConfig+0x212>
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e02b      	b.n	8003dfa <UART_SetConfig+0x212>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a33      	ldr	r2, [pc, #204]	@ (8003e74 <UART_SetConfig+0x28c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d124      	bne.n	8003df6 <UART_SetConfig+0x20e>
 8003dac:	4b2d      	ldr	r3, [pc, #180]	@ (8003e64 <UART_SetConfig+0x27c>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003db4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003db8:	d011      	beq.n	8003dde <UART_SetConfig+0x1f6>
 8003dba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003dbe:	d817      	bhi.n	8003df0 <UART_SetConfig+0x208>
 8003dc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dc4:	d011      	beq.n	8003dea <UART_SetConfig+0x202>
 8003dc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dca:	d811      	bhi.n	8003df0 <UART_SetConfig+0x208>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <UART_SetConfig+0x1f0>
 8003dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd4:	d006      	beq.n	8003de4 <UART_SetConfig+0x1fc>
 8003dd6:	e00b      	b.n	8003df0 <UART_SetConfig+0x208>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e00d      	b.n	8003dfa <UART_SetConfig+0x212>
 8003dde:	2302      	movs	r3, #2
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e00a      	b.n	8003dfa <UART_SetConfig+0x212>
 8003de4:	2304      	movs	r3, #4
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e007      	b.n	8003dfa <UART_SetConfig+0x212>
 8003dea:	2308      	movs	r3, #8
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e004      	b.n	8003dfa <UART_SetConfig+0x212>
 8003df0:	2310      	movs	r3, #16
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e001      	b.n	8003dfa <UART_SetConfig+0x212>
 8003df6:	2310      	movs	r3, #16
 8003df8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e02:	d16b      	bne.n	8003edc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003e04:	7ffb      	ldrb	r3, [r7, #31]
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d838      	bhi.n	8003e7c <UART_SetConfig+0x294>
 8003e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <UART_SetConfig+0x228>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e35 	.word	0x08003e35
 8003e14:	08003e3d 	.word	0x08003e3d
 8003e18:	08003e45 	.word	0x08003e45
 8003e1c:	08003e7d 	.word	0x08003e7d
 8003e20:	08003e4b 	.word	0x08003e4b
 8003e24:	08003e7d 	.word	0x08003e7d
 8003e28:	08003e7d 	.word	0x08003e7d
 8003e2c:	08003e7d 	.word	0x08003e7d
 8003e30:	08003e53 	.word	0x08003e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e34:	f7ff fba0 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8003e38:	61b8      	str	r0, [r7, #24]
        break;
 8003e3a:	e024      	b.n	8003e86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e3c:	f7ff fbbe 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8003e40:	61b8      	str	r0, [r7, #24]
        break;
 8003e42:	e020      	b.n	8003e86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e44:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <UART_SetConfig+0x290>)
 8003e46:	61bb      	str	r3, [r7, #24]
        break;
 8003e48:	e01d      	b.n	8003e86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e4a:	f7ff fb35 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8003e4e:	61b8      	str	r0, [r7, #24]
        break;
 8003e50:	e019      	b.n	8003e86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e56:	61bb      	str	r3, [r7, #24]
        break;
 8003e58:	e015      	b.n	8003e86 <UART_SetConfig+0x29e>
 8003e5a:	bf00      	nop
 8003e5c:	efff69f3 	.word	0xefff69f3
 8003e60:	40013800 	.word	0x40013800
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40004400 	.word	0x40004400
 8003e6c:	40004800 	.word	0x40004800
 8003e70:	40004c00 	.word	0x40004c00
 8003e74:	40005000 	.word	0x40005000
 8003e78:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	77bb      	strb	r3, [r7, #30]
        break;
 8003e84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d073      	beq.n	8003f74 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	005a      	lsls	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	441a      	add	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b0f      	cmp	r3, #15
 8003ea6:	d916      	bls.n	8003ed6 <UART_SetConfig+0x2ee>
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eae:	d212      	bcs.n	8003ed6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f023 030f 	bic.w	r3, r3, #15
 8003eb8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	89fb      	ldrh	r3, [r7, #14]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	89fa      	ldrh	r2, [r7, #14]
 8003ed2:	60da      	str	r2, [r3, #12]
 8003ed4:	e04e      	b.n	8003f74 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	77bb      	strb	r3, [r7, #30]
 8003eda:	e04b      	b.n	8003f74 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003edc:	7ffb      	ldrb	r3, [r7, #31]
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d827      	bhi.n	8003f32 <UART_SetConfig+0x34a>
 8003ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <UART_SetConfig+0x300>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f15 	.word	0x08003f15
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f33 	.word	0x08003f33
 8003ef8:	08003f23 	.word	0x08003f23
 8003efc:	08003f33 	.word	0x08003f33
 8003f00:	08003f33 	.word	0x08003f33
 8003f04:	08003f33 	.word	0x08003f33
 8003f08:	08003f2b 	.word	0x08003f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7ff fb34 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8003f10:	61b8      	str	r0, [r7, #24]
        break;
 8003f12:	e013      	b.n	8003f3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7ff fb52 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8003f18:	61b8      	str	r0, [r7, #24]
        break;
 8003f1a:	e00f      	b.n	8003f3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f8c <UART_SetConfig+0x3a4>)
 8003f1e:	61bb      	str	r3, [r7, #24]
        break;
 8003f20:	e00c      	b.n	8003f3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f22:	f7ff fac9 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8003f26:	61b8      	str	r0, [r7, #24]
        break;
 8003f28:	e008      	b.n	8003f3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2e:	61bb      	str	r3, [r7, #24]
        break;
 8003f30:	e004      	b.n	8003f3c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	77bb      	strb	r3, [r7, #30]
        break;
 8003f3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d018      	beq.n	8003f74 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	085a      	lsrs	r2, r3, #1
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	441a      	add	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b0f      	cmp	r3, #15
 8003f5a:	d909      	bls.n	8003f70 <UART_SetConfig+0x388>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f62:	d205      	bcs.n	8003f70 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	e001      	b.n	8003f74 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f80:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	007a1200 	.word	0x007a1200

08003f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01a      	beq.n	80040a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800408e:	d10a      	bne.n	80040a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	605a      	str	r2, [r3, #4]
  }
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b098      	sub	sp, #96	@ 0x60
 80040d8:	af02      	add	r7, sp, #8
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040e4:	f7fc fcbe 	bl	8000a64 <HAL_GetTick>
 80040e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d12e      	bne.n	8004156 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004100:	2200      	movs	r2, #0
 8004102:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f88c 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d021      	beq.n	8004156 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004126:	653b      	str	r3, [r7, #80]	@ 0x50
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004130:	647b      	str	r3, [r7, #68]	@ 0x44
 8004132:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800413e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e6      	bne.n	8004112 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e062      	b.n	800421c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b04      	cmp	r3, #4
 8004162:	d149      	bne.n	80041f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004164:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416c:	2200      	movs	r2, #0
 800416e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f856 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d03c      	beq.n	80041f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	623b      	str	r3, [r7, #32]
   return(result);
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800419c:	633b      	str	r3, [r7, #48]	@ 0x30
 800419e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e6      	bne.n	800417e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3308      	adds	r3, #8
 80041b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041d0:	61fa      	str	r2, [r7, #28]
 80041d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	617b      	str	r3, [r7, #20]
   return(result);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e5      	bne.n	80041b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e011      	b.n	800421c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3758      	adds	r7, #88	@ 0x58
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004234:	e04f      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d04b      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7fc fc11 	bl	8000a64 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <UART_WaitOnFlagUntilTimeout+0x30>
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e04e      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	d037      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b80      	cmp	r3, #128	@ 0x80
 800426a:	d034      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b40      	cmp	r3, #64	@ 0x40
 8004270:	d031      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b08      	cmp	r3, #8
 800427e:	d110      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2208      	movs	r2, #8
 8004286:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f838 	bl	80042fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2208      	movs	r2, #8
 8004292:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e029      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b0:	d111      	bne.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f81e 	bl	80042fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e00f      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d0a0      	beq.n	8004236 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042fe:	b480      	push	{r7}
 8004300:	b095      	sub	sp, #84	@ 0x54
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004316:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800431a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004324:	643b      	str	r3, [r7, #64]	@ 0x40
 8004326:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800432a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e6      	bne.n	8004306 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	61fb      	str	r3, [r7, #28]
   return(result);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3308      	adds	r3, #8
 8004356:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004358:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800435a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800435e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004370:	2b01      	cmp	r3, #1
 8004372:	d118      	bne.n	80043a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	60bb      	str	r3, [r7, #8]
   return(result);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f023 0310 	bic.w	r3, r3, #16
 8004388:	647b      	str	r3, [r7, #68]	@ 0x44
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6979      	ldr	r1, [r7, #20]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	613b      	str	r3, [r7, #16]
   return(result);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e6      	bne.n	8004374 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043ba:	bf00      	nop
 80043bc:	3754      	adds	r7, #84	@ 0x54
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <sniprintf>:
 80043c8:	b40c      	push	{r2, r3}
 80043ca:	b530      	push	{r4, r5, lr}
 80043cc:	4b18      	ldr	r3, [pc, #96]	@ (8004430 <sniprintf+0x68>)
 80043ce:	1e0c      	subs	r4, r1, #0
 80043d0:	681d      	ldr	r5, [r3, #0]
 80043d2:	b09d      	sub	sp, #116	@ 0x74
 80043d4:	da08      	bge.n	80043e8 <sniprintf+0x20>
 80043d6:	238b      	movs	r3, #139	@ 0x8b
 80043d8:	602b      	str	r3, [r5, #0]
 80043da:	f04f 30ff 	mov.w	r0, #4294967295
 80043de:	b01d      	add	sp, #116	@ 0x74
 80043e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043e4:	b002      	add	sp, #8
 80043e6:	4770      	bx	lr
 80043e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80043ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80043f6:	bf14      	ite	ne
 80043f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80043fc:	4623      	moveq	r3, r4
 80043fe:	9304      	str	r3, [sp, #16]
 8004400:	9307      	str	r3, [sp, #28]
 8004402:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004406:	9002      	str	r0, [sp, #8]
 8004408:	9006      	str	r0, [sp, #24]
 800440a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800440e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004410:	ab21      	add	r3, sp, #132	@ 0x84
 8004412:	a902      	add	r1, sp, #8
 8004414:	4628      	mov	r0, r5
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	f000 f994 	bl	8004744 <_svfiprintf_r>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	bfbc      	itt	lt
 8004420:	238b      	movlt	r3, #139	@ 0x8b
 8004422:	602b      	strlt	r3, [r5, #0]
 8004424:	2c00      	cmp	r4, #0
 8004426:	d0da      	beq.n	80043de <sniprintf+0x16>
 8004428:	9b02      	ldr	r3, [sp, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e7d6      	b.n	80043de <sniprintf+0x16>
 8004430:	2000000c 	.word	0x2000000c

08004434 <memset>:
 8004434:	4402      	add	r2, r0
 8004436:	4603      	mov	r3, r0
 8004438:	4293      	cmp	r3, r2
 800443a:	d100      	bne.n	800443e <memset+0xa>
 800443c:	4770      	bx	lr
 800443e:	f803 1b01 	strb.w	r1, [r3], #1
 8004442:	e7f9      	b.n	8004438 <memset+0x4>

08004444 <__errno>:
 8004444:	4b01      	ldr	r3, [pc, #4]	@ (800444c <__errno+0x8>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	2000000c 	.word	0x2000000c

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	4d0d      	ldr	r5, [pc, #52]	@ (8004488 <__libc_init_array+0x38>)
 8004454:	4c0d      	ldr	r4, [pc, #52]	@ (800448c <__libc_init_array+0x3c>)
 8004456:	1b64      	subs	r4, r4, r5
 8004458:	10a4      	asrs	r4, r4, #2
 800445a:	2600      	movs	r6, #0
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	4d0b      	ldr	r5, [pc, #44]	@ (8004490 <__libc_init_array+0x40>)
 8004462:	4c0c      	ldr	r4, [pc, #48]	@ (8004494 <__libc_init_array+0x44>)
 8004464:	f000 fc64 	bl	8004d30 <_init>
 8004468:	1b64      	subs	r4, r4, r5
 800446a:	10a4      	asrs	r4, r4, #2
 800446c:	2600      	movs	r6, #0
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	f855 3b04 	ldr.w	r3, [r5], #4
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	08004dd0 	.word	0x08004dd0
 800448c:	08004dd0 	.word	0x08004dd0
 8004490:	08004dd0 	.word	0x08004dd0
 8004494:	08004dd4 	.word	0x08004dd4

08004498 <__retarget_lock_acquire_recursive>:
 8004498:	4770      	bx	lr

0800449a <__retarget_lock_release_recursive>:
 800449a:	4770      	bx	lr

0800449c <_free_r>:
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	4605      	mov	r5, r0
 80044a0:	2900      	cmp	r1, #0
 80044a2:	d041      	beq.n	8004528 <_free_r+0x8c>
 80044a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044a8:	1f0c      	subs	r4, r1, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bfb8      	it	lt
 80044ae:	18e4      	addlt	r4, r4, r3
 80044b0:	f000 f8e0 	bl	8004674 <__malloc_lock>
 80044b4:	4a1d      	ldr	r2, [pc, #116]	@ (800452c <_free_r+0x90>)
 80044b6:	6813      	ldr	r3, [r2, #0]
 80044b8:	b933      	cbnz	r3, 80044c8 <_free_r+0x2c>
 80044ba:	6063      	str	r3, [r4, #4]
 80044bc:	6014      	str	r4, [r2, #0]
 80044be:	4628      	mov	r0, r5
 80044c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044c4:	f000 b8dc 	b.w	8004680 <__malloc_unlock>
 80044c8:	42a3      	cmp	r3, r4
 80044ca:	d908      	bls.n	80044de <_free_r+0x42>
 80044cc:	6820      	ldr	r0, [r4, #0]
 80044ce:	1821      	adds	r1, r4, r0
 80044d0:	428b      	cmp	r3, r1
 80044d2:	bf01      	itttt	eq
 80044d4:	6819      	ldreq	r1, [r3, #0]
 80044d6:	685b      	ldreq	r3, [r3, #4]
 80044d8:	1809      	addeq	r1, r1, r0
 80044da:	6021      	streq	r1, [r4, #0]
 80044dc:	e7ed      	b.n	80044ba <_free_r+0x1e>
 80044de:	461a      	mov	r2, r3
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	b10b      	cbz	r3, 80044e8 <_free_r+0x4c>
 80044e4:	42a3      	cmp	r3, r4
 80044e6:	d9fa      	bls.n	80044de <_free_r+0x42>
 80044e8:	6811      	ldr	r1, [r2, #0]
 80044ea:	1850      	adds	r0, r2, r1
 80044ec:	42a0      	cmp	r0, r4
 80044ee:	d10b      	bne.n	8004508 <_free_r+0x6c>
 80044f0:	6820      	ldr	r0, [r4, #0]
 80044f2:	4401      	add	r1, r0
 80044f4:	1850      	adds	r0, r2, r1
 80044f6:	4283      	cmp	r3, r0
 80044f8:	6011      	str	r1, [r2, #0]
 80044fa:	d1e0      	bne.n	80044be <_free_r+0x22>
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	6053      	str	r3, [r2, #4]
 8004502:	4408      	add	r0, r1
 8004504:	6010      	str	r0, [r2, #0]
 8004506:	e7da      	b.n	80044be <_free_r+0x22>
 8004508:	d902      	bls.n	8004510 <_free_r+0x74>
 800450a:	230c      	movs	r3, #12
 800450c:	602b      	str	r3, [r5, #0]
 800450e:	e7d6      	b.n	80044be <_free_r+0x22>
 8004510:	6820      	ldr	r0, [r4, #0]
 8004512:	1821      	adds	r1, r4, r0
 8004514:	428b      	cmp	r3, r1
 8004516:	bf04      	itt	eq
 8004518:	6819      	ldreq	r1, [r3, #0]
 800451a:	685b      	ldreq	r3, [r3, #4]
 800451c:	6063      	str	r3, [r4, #4]
 800451e:	bf04      	itt	eq
 8004520:	1809      	addeq	r1, r1, r0
 8004522:	6021      	streq	r1, [r4, #0]
 8004524:	6054      	str	r4, [r2, #4]
 8004526:	e7ca      	b.n	80044be <_free_r+0x22>
 8004528:	bd38      	pop	{r3, r4, r5, pc}
 800452a:	bf00      	nop
 800452c:	200002c0 	.word	0x200002c0

08004530 <sbrk_aligned>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	4e0f      	ldr	r6, [pc, #60]	@ (8004570 <sbrk_aligned+0x40>)
 8004534:	460c      	mov	r4, r1
 8004536:	6831      	ldr	r1, [r6, #0]
 8004538:	4605      	mov	r5, r0
 800453a:	b911      	cbnz	r1, 8004542 <sbrk_aligned+0x12>
 800453c:	f000 fba4 	bl	8004c88 <_sbrk_r>
 8004540:	6030      	str	r0, [r6, #0]
 8004542:	4621      	mov	r1, r4
 8004544:	4628      	mov	r0, r5
 8004546:	f000 fb9f 	bl	8004c88 <_sbrk_r>
 800454a:	1c43      	adds	r3, r0, #1
 800454c:	d103      	bne.n	8004556 <sbrk_aligned+0x26>
 800454e:	f04f 34ff 	mov.w	r4, #4294967295
 8004552:	4620      	mov	r0, r4
 8004554:	bd70      	pop	{r4, r5, r6, pc}
 8004556:	1cc4      	adds	r4, r0, #3
 8004558:	f024 0403 	bic.w	r4, r4, #3
 800455c:	42a0      	cmp	r0, r4
 800455e:	d0f8      	beq.n	8004552 <sbrk_aligned+0x22>
 8004560:	1a21      	subs	r1, r4, r0
 8004562:	4628      	mov	r0, r5
 8004564:	f000 fb90 	bl	8004c88 <_sbrk_r>
 8004568:	3001      	adds	r0, #1
 800456a:	d1f2      	bne.n	8004552 <sbrk_aligned+0x22>
 800456c:	e7ef      	b.n	800454e <sbrk_aligned+0x1e>
 800456e:	bf00      	nop
 8004570:	200002bc 	.word	0x200002bc

08004574 <_malloc_r>:
 8004574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004578:	1ccd      	adds	r5, r1, #3
 800457a:	f025 0503 	bic.w	r5, r5, #3
 800457e:	3508      	adds	r5, #8
 8004580:	2d0c      	cmp	r5, #12
 8004582:	bf38      	it	cc
 8004584:	250c      	movcc	r5, #12
 8004586:	2d00      	cmp	r5, #0
 8004588:	4606      	mov	r6, r0
 800458a:	db01      	blt.n	8004590 <_malloc_r+0x1c>
 800458c:	42a9      	cmp	r1, r5
 800458e:	d904      	bls.n	800459a <_malloc_r+0x26>
 8004590:	230c      	movs	r3, #12
 8004592:	6033      	str	r3, [r6, #0]
 8004594:	2000      	movs	r0, #0
 8004596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800459a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004670 <_malloc_r+0xfc>
 800459e:	f000 f869 	bl	8004674 <__malloc_lock>
 80045a2:	f8d8 3000 	ldr.w	r3, [r8]
 80045a6:	461c      	mov	r4, r3
 80045a8:	bb44      	cbnz	r4, 80045fc <_malloc_r+0x88>
 80045aa:	4629      	mov	r1, r5
 80045ac:	4630      	mov	r0, r6
 80045ae:	f7ff ffbf 	bl	8004530 <sbrk_aligned>
 80045b2:	1c43      	adds	r3, r0, #1
 80045b4:	4604      	mov	r4, r0
 80045b6:	d158      	bne.n	800466a <_malloc_r+0xf6>
 80045b8:	f8d8 4000 	ldr.w	r4, [r8]
 80045bc:	4627      	mov	r7, r4
 80045be:	2f00      	cmp	r7, #0
 80045c0:	d143      	bne.n	800464a <_malloc_r+0xd6>
 80045c2:	2c00      	cmp	r4, #0
 80045c4:	d04b      	beq.n	800465e <_malloc_r+0xea>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	4639      	mov	r1, r7
 80045ca:	4630      	mov	r0, r6
 80045cc:	eb04 0903 	add.w	r9, r4, r3
 80045d0:	f000 fb5a 	bl	8004c88 <_sbrk_r>
 80045d4:	4581      	cmp	r9, r0
 80045d6:	d142      	bne.n	800465e <_malloc_r+0xea>
 80045d8:	6821      	ldr	r1, [r4, #0]
 80045da:	1a6d      	subs	r5, r5, r1
 80045dc:	4629      	mov	r1, r5
 80045de:	4630      	mov	r0, r6
 80045e0:	f7ff ffa6 	bl	8004530 <sbrk_aligned>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d03a      	beq.n	800465e <_malloc_r+0xea>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	442b      	add	r3, r5
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	f8d8 3000 	ldr.w	r3, [r8]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	bb62      	cbnz	r2, 8004650 <_malloc_r+0xdc>
 80045f6:	f8c8 7000 	str.w	r7, [r8]
 80045fa:	e00f      	b.n	800461c <_malloc_r+0xa8>
 80045fc:	6822      	ldr	r2, [r4, #0]
 80045fe:	1b52      	subs	r2, r2, r5
 8004600:	d420      	bmi.n	8004644 <_malloc_r+0xd0>
 8004602:	2a0b      	cmp	r2, #11
 8004604:	d917      	bls.n	8004636 <_malloc_r+0xc2>
 8004606:	1961      	adds	r1, r4, r5
 8004608:	42a3      	cmp	r3, r4
 800460a:	6025      	str	r5, [r4, #0]
 800460c:	bf18      	it	ne
 800460e:	6059      	strne	r1, [r3, #4]
 8004610:	6863      	ldr	r3, [r4, #4]
 8004612:	bf08      	it	eq
 8004614:	f8c8 1000 	streq.w	r1, [r8]
 8004618:	5162      	str	r2, [r4, r5]
 800461a:	604b      	str	r3, [r1, #4]
 800461c:	4630      	mov	r0, r6
 800461e:	f000 f82f 	bl	8004680 <__malloc_unlock>
 8004622:	f104 000b 	add.w	r0, r4, #11
 8004626:	1d23      	adds	r3, r4, #4
 8004628:	f020 0007 	bic.w	r0, r0, #7
 800462c:	1ac2      	subs	r2, r0, r3
 800462e:	bf1c      	itt	ne
 8004630:	1a1b      	subne	r3, r3, r0
 8004632:	50a3      	strne	r3, [r4, r2]
 8004634:	e7af      	b.n	8004596 <_malloc_r+0x22>
 8004636:	6862      	ldr	r2, [r4, #4]
 8004638:	42a3      	cmp	r3, r4
 800463a:	bf0c      	ite	eq
 800463c:	f8c8 2000 	streq.w	r2, [r8]
 8004640:	605a      	strne	r2, [r3, #4]
 8004642:	e7eb      	b.n	800461c <_malloc_r+0xa8>
 8004644:	4623      	mov	r3, r4
 8004646:	6864      	ldr	r4, [r4, #4]
 8004648:	e7ae      	b.n	80045a8 <_malloc_r+0x34>
 800464a:	463c      	mov	r4, r7
 800464c:	687f      	ldr	r7, [r7, #4]
 800464e:	e7b6      	b.n	80045be <_malloc_r+0x4a>
 8004650:	461a      	mov	r2, r3
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	42a3      	cmp	r3, r4
 8004656:	d1fb      	bne.n	8004650 <_malloc_r+0xdc>
 8004658:	2300      	movs	r3, #0
 800465a:	6053      	str	r3, [r2, #4]
 800465c:	e7de      	b.n	800461c <_malloc_r+0xa8>
 800465e:	230c      	movs	r3, #12
 8004660:	6033      	str	r3, [r6, #0]
 8004662:	4630      	mov	r0, r6
 8004664:	f000 f80c 	bl	8004680 <__malloc_unlock>
 8004668:	e794      	b.n	8004594 <_malloc_r+0x20>
 800466a:	6005      	str	r5, [r0, #0]
 800466c:	e7d6      	b.n	800461c <_malloc_r+0xa8>
 800466e:	bf00      	nop
 8004670:	200002c0 	.word	0x200002c0

08004674 <__malloc_lock>:
 8004674:	4801      	ldr	r0, [pc, #4]	@ (800467c <__malloc_lock+0x8>)
 8004676:	f7ff bf0f 	b.w	8004498 <__retarget_lock_acquire_recursive>
 800467a:	bf00      	nop
 800467c:	200002b8 	.word	0x200002b8

08004680 <__malloc_unlock>:
 8004680:	4801      	ldr	r0, [pc, #4]	@ (8004688 <__malloc_unlock+0x8>)
 8004682:	f7ff bf0a 	b.w	800449a <__retarget_lock_release_recursive>
 8004686:	bf00      	nop
 8004688:	200002b8 	.word	0x200002b8

0800468c <__ssputs_r>:
 800468c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004690:	688e      	ldr	r6, [r1, #8]
 8004692:	461f      	mov	r7, r3
 8004694:	42be      	cmp	r6, r7
 8004696:	680b      	ldr	r3, [r1, #0]
 8004698:	4682      	mov	sl, r0
 800469a:	460c      	mov	r4, r1
 800469c:	4690      	mov	r8, r2
 800469e:	d82d      	bhi.n	80046fc <__ssputs_r+0x70>
 80046a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046a8:	d026      	beq.n	80046f8 <__ssputs_r+0x6c>
 80046aa:	6965      	ldr	r5, [r4, #20]
 80046ac:	6909      	ldr	r1, [r1, #16]
 80046ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046b2:	eba3 0901 	sub.w	r9, r3, r1
 80046b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046ba:	1c7b      	adds	r3, r7, #1
 80046bc:	444b      	add	r3, r9
 80046be:	106d      	asrs	r5, r5, #1
 80046c0:	429d      	cmp	r5, r3
 80046c2:	bf38      	it	cc
 80046c4:	461d      	movcc	r5, r3
 80046c6:	0553      	lsls	r3, r2, #21
 80046c8:	d527      	bpl.n	800471a <__ssputs_r+0x8e>
 80046ca:	4629      	mov	r1, r5
 80046cc:	f7ff ff52 	bl	8004574 <_malloc_r>
 80046d0:	4606      	mov	r6, r0
 80046d2:	b360      	cbz	r0, 800472e <__ssputs_r+0xa2>
 80046d4:	6921      	ldr	r1, [r4, #16]
 80046d6:	464a      	mov	r2, r9
 80046d8:	f000 fae6 	bl	8004ca8 <memcpy>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e6:	81a3      	strh	r3, [r4, #12]
 80046e8:	6126      	str	r6, [r4, #16]
 80046ea:	6165      	str	r5, [r4, #20]
 80046ec:	444e      	add	r6, r9
 80046ee:	eba5 0509 	sub.w	r5, r5, r9
 80046f2:	6026      	str	r6, [r4, #0]
 80046f4:	60a5      	str	r5, [r4, #8]
 80046f6:	463e      	mov	r6, r7
 80046f8:	42be      	cmp	r6, r7
 80046fa:	d900      	bls.n	80046fe <__ssputs_r+0x72>
 80046fc:	463e      	mov	r6, r7
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	4632      	mov	r2, r6
 8004702:	4641      	mov	r1, r8
 8004704:	f000 faa6 	bl	8004c54 <memmove>
 8004708:	68a3      	ldr	r3, [r4, #8]
 800470a:	1b9b      	subs	r3, r3, r6
 800470c:	60a3      	str	r3, [r4, #8]
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	4433      	add	r3, r6
 8004712:	6023      	str	r3, [r4, #0]
 8004714:	2000      	movs	r0, #0
 8004716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471a:	462a      	mov	r2, r5
 800471c:	f000 fad2 	bl	8004cc4 <_realloc_r>
 8004720:	4606      	mov	r6, r0
 8004722:	2800      	cmp	r0, #0
 8004724:	d1e0      	bne.n	80046e8 <__ssputs_r+0x5c>
 8004726:	6921      	ldr	r1, [r4, #16]
 8004728:	4650      	mov	r0, sl
 800472a:	f7ff feb7 	bl	800449c <_free_r>
 800472e:	230c      	movs	r3, #12
 8004730:	f8ca 3000 	str.w	r3, [sl]
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800473a:	81a3      	strh	r3, [r4, #12]
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	e7e9      	b.n	8004716 <__ssputs_r+0x8a>
	...

08004744 <_svfiprintf_r>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	4698      	mov	r8, r3
 800474a:	898b      	ldrh	r3, [r1, #12]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	b09d      	sub	sp, #116	@ 0x74
 8004750:	4607      	mov	r7, r0
 8004752:	460d      	mov	r5, r1
 8004754:	4614      	mov	r4, r2
 8004756:	d510      	bpl.n	800477a <_svfiprintf_r+0x36>
 8004758:	690b      	ldr	r3, [r1, #16]
 800475a:	b973      	cbnz	r3, 800477a <_svfiprintf_r+0x36>
 800475c:	2140      	movs	r1, #64	@ 0x40
 800475e:	f7ff ff09 	bl	8004574 <_malloc_r>
 8004762:	6028      	str	r0, [r5, #0]
 8004764:	6128      	str	r0, [r5, #16]
 8004766:	b930      	cbnz	r0, 8004776 <_svfiprintf_r+0x32>
 8004768:	230c      	movs	r3, #12
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	b01d      	add	sp, #116	@ 0x74
 8004772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004776:	2340      	movs	r3, #64	@ 0x40
 8004778:	616b      	str	r3, [r5, #20]
 800477a:	2300      	movs	r3, #0
 800477c:	9309      	str	r3, [sp, #36]	@ 0x24
 800477e:	2320      	movs	r3, #32
 8004780:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004784:	f8cd 800c 	str.w	r8, [sp, #12]
 8004788:	2330      	movs	r3, #48	@ 0x30
 800478a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004928 <_svfiprintf_r+0x1e4>
 800478e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004792:	f04f 0901 	mov.w	r9, #1
 8004796:	4623      	mov	r3, r4
 8004798:	469a      	mov	sl, r3
 800479a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800479e:	b10a      	cbz	r2, 80047a4 <_svfiprintf_r+0x60>
 80047a0:	2a25      	cmp	r2, #37	@ 0x25
 80047a2:	d1f9      	bne.n	8004798 <_svfiprintf_r+0x54>
 80047a4:	ebba 0b04 	subs.w	fp, sl, r4
 80047a8:	d00b      	beq.n	80047c2 <_svfiprintf_r+0x7e>
 80047aa:	465b      	mov	r3, fp
 80047ac:	4622      	mov	r2, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	4638      	mov	r0, r7
 80047b2:	f7ff ff6b 	bl	800468c <__ssputs_r>
 80047b6:	3001      	adds	r0, #1
 80047b8:	f000 80a7 	beq.w	800490a <_svfiprintf_r+0x1c6>
 80047bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047be:	445a      	add	r2, fp
 80047c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80047c2:	f89a 3000 	ldrb.w	r3, [sl]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 809f 	beq.w	800490a <_svfiprintf_r+0x1c6>
 80047cc:	2300      	movs	r3, #0
 80047ce:	f04f 32ff 	mov.w	r2, #4294967295
 80047d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047d6:	f10a 0a01 	add.w	sl, sl, #1
 80047da:	9304      	str	r3, [sp, #16]
 80047dc:	9307      	str	r3, [sp, #28]
 80047de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80047e4:	4654      	mov	r4, sl
 80047e6:	2205      	movs	r2, #5
 80047e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ec:	484e      	ldr	r0, [pc, #312]	@ (8004928 <_svfiprintf_r+0x1e4>)
 80047ee:	f7fb fcff 	bl	80001f0 <memchr>
 80047f2:	9a04      	ldr	r2, [sp, #16]
 80047f4:	b9d8      	cbnz	r0, 800482e <_svfiprintf_r+0xea>
 80047f6:	06d0      	lsls	r0, r2, #27
 80047f8:	bf44      	itt	mi
 80047fa:	2320      	movmi	r3, #32
 80047fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004800:	0711      	lsls	r1, r2, #28
 8004802:	bf44      	itt	mi
 8004804:	232b      	movmi	r3, #43	@ 0x2b
 8004806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800480a:	f89a 3000 	ldrb.w	r3, [sl]
 800480e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004810:	d015      	beq.n	800483e <_svfiprintf_r+0xfa>
 8004812:	9a07      	ldr	r2, [sp, #28]
 8004814:	4654      	mov	r4, sl
 8004816:	2000      	movs	r0, #0
 8004818:	f04f 0c0a 	mov.w	ip, #10
 800481c:	4621      	mov	r1, r4
 800481e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004822:	3b30      	subs	r3, #48	@ 0x30
 8004824:	2b09      	cmp	r3, #9
 8004826:	d94b      	bls.n	80048c0 <_svfiprintf_r+0x17c>
 8004828:	b1b0      	cbz	r0, 8004858 <_svfiprintf_r+0x114>
 800482a:	9207      	str	r2, [sp, #28]
 800482c:	e014      	b.n	8004858 <_svfiprintf_r+0x114>
 800482e:	eba0 0308 	sub.w	r3, r0, r8
 8004832:	fa09 f303 	lsl.w	r3, r9, r3
 8004836:	4313      	orrs	r3, r2
 8004838:	9304      	str	r3, [sp, #16]
 800483a:	46a2      	mov	sl, r4
 800483c:	e7d2      	b.n	80047e4 <_svfiprintf_r+0xa0>
 800483e:	9b03      	ldr	r3, [sp, #12]
 8004840:	1d19      	adds	r1, r3, #4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	9103      	str	r1, [sp, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	bfbb      	ittet	lt
 800484a:	425b      	neglt	r3, r3
 800484c:	f042 0202 	orrlt.w	r2, r2, #2
 8004850:	9307      	strge	r3, [sp, #28]
 8004852:	9307      	strlt	r3, [sp, #28]
 8004854:	bfb8      	it	lt
 8004856:	9204      	strlt	r2, [sp, #16]
 8004858:	7823      	ldrb	r3, [r4, #0]
 800485a:	2b2e      	cmp	r3, #46	@ 0x2e
 800485c:	d10a      	bne.n	8004874 <_svfiprintf_r+0x130>
 800485e:	7863      	ldrb	r3, [r4, #1]
 8004860:	2b2a      	cmp	r3, #42	@ 0x2a
 8004862:	d132      	bne.n	80048ca <_svfiprintf_r+0x186>
 8004864:	9b03      	ldr	r3, [sp, #12]
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	9203      	str	r2, [sp, #12]
 800486c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004870:	3402      	adds	r4, #2
 8004872:	9305      	str	r3, [sp, #20]
 8004874:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004938 <_svfiprintf_r+0x1f4>
 8004878:	7821      	ldrb	r1, [r4, #0]
 800487a:	2203      	movs	r2, #3
 800487c:	4650      	mov	r0, sl
 800487e:	f7fb fcb7 	bl	80001f0 <memchr>
 8004882:	b138      	cbz	r0, 8004894 <_svfiprintf_r+0x150>
 8004884:	9b04      	ldr	r3, [sp, #16]
 8004886:	eba0 000a 	sub.w	r0, r0, sl
 800488a:	2240      	movs	r2, #64	@ 0x40
 800488c:	4082      	lsls	r2, r0
 800488e:	4313      	orrs	r3, r2
 8004890:	3401      	adds	r4, #1
 8004892:	9304      	str	r3, [sp, #16]
 8004894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004898:	4824      	ldr	r0, [pc, #144]	@ (800492c <_svfiprintf_r+0x1e8>)
 800489a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800489e:	2206      	movs	r2, #6
 80048a0:	f7fb fca6 	bl	80001f0 <memchr>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d036      	beq.n	8004916 <_svfiprintf_r+0x1d2>
 80048a8:	4b21      	ldr	r3, [pc, #132]	@ (8004930 <_svfiprintf_r+0x1ec>)
 80048aa:	bb1b      	cbnz	r3, 80048f4 <_svfiprintf_r+0x1b0>
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	3307      	adds	r3, #7
 80048b0:	f023 0307 	bic.w	r3, r3, #7
 80048b4:	3308      	adds	r3, #8
 80048b6:	9303      	str	r3, [sp, #12]
 80048b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ba:	4433      	add	r3, r6
 80048bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80048be:	e76a      	b.n	8004796 <_svfiprintf_r+0x52>
 80048c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80048c4:	460c      	mov	r4, r1
 80048c6:	2001      	movs	r0, #1
 80048c8:	e7a8      	b.n	800481c <_svfiprintf_r+0xd8>
 80048ca:	2300      	movs	r3, #0
 80048cc:	3401      	adds	r4, #1
 80048ce:	9305      	str	r3, [sp, #20]
 80048d0:	4619      	mov	r1, r3
 80048d2:	f04f 0c0a 	mov.w	ip, #10
 80048d6:	4620      	mov	r0, r4
 80048d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048dc:	3a30      	subs	r2, #48	@ 0x30
 80048de:	2a09      	cmp	r2, #9
 80048e0:	d903      	bls.n	80048ea <_svfiprintf_r+0x1a6>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0c6      	beq.n	8004874 <_svfiprintf_r+0x130>
 80048e6:	9105      	str	r1, [sp, #20]
 80048e8:	e7c4      	b.n	8004874 <_svfiprintf_r+0x130>
 80048ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ee:	4604      	mov	r4, r0
 80048f0:	2301      	movs	r3, #1
 80048f2:	e7f0      	b.n	80048d6 <_svfiprintf_r+0x192>
 80048f4:	ab03      	add	r3, sp, #12
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	462a      	mov	r2, r5
 80048fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004934 <_svfiprintf_r+0x1f0>)
 80048fc:	a904      	add	r1, sp, #16
 80048fe:	4638      	mov	r0, r7
 8004900:	f3af 8000 	nop.w
 8004904:	1c42      	adds	r2, r0, #1
 8004906:	4606      	mov	r6, r0
 8004908:	d1d6      	bne.n	80048b8 <_svfiprintf_r+0x174>
 800490a:	89ab      	ldrh	r3, [r5, #12]
 800490c:	065b      	lsls	r3, r3, #25
 800490e:	f53f af2d 	bmi.w	800476c <_svfiprintf_r+0x28>
 8004912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004914:	e72c      	b.n	8004770 <_svfiprintf_r+0x2c>
 8004916:	ab03      	add	r3, sp, #12
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	462a      	mov	r2, r5
 800491c:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <_svfiprintf_r+0x1f0>)
 800491e:	a904      	add	r1, sp, #16
 8004920:	4638      	mov	r0, r7
 8004922:	f000 f879 	bl	8004a18 <_printf_i>
 8004926:	e7ed      	b.n	8004904 <_svfiprintf_r+0x1c0>
 8004928:	08004d94 	.word	0x08004d94
 800492c:	08004d9e 	.word	0x08004d9e
 8004930:	00000000 	.word	0x00000000
 8004934:	0800468d 	.word	0x0800468d
 8004938:	08004d9a 	.word	0x08004d9a

0800493c <_printf_common>:
 800493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	4616      	mov	r6, r2
 8004942:	4698      	mov	r8, r3
 8004944:	688a      	ldr	r2, [r1, #8]
 8004946:	690b      	ldr	r3, [r1, #16]
 8004948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800494c:	4293      	cmp	r3, r2
 800494e:	bfb8      	it	lt
 8004950:	4613      	movlt	r3, r2
 8004952:	6033      	str	r3, [r6, #0]
 8004954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004958:	4607      	mov	r7, r0
 800495a:	460c      	mov	r4, r1
 800495c:	b10a      	cbz	r2, 8004962 <_printf_common+0x26>
 800495e:	3301      	adds	r3, #1
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	0699      	lsls	r1, r3, #26
 8004966:	bf42      	ittt	mi
 8004968:	6833      	ldrmi	r3, [r6, #0]
 800496a:	3302      	addmi	r3, #2
 800496c:	6033      	strmi	r3, [r6, #0]
 800496e:	6825      	ldr	r5, [r4, #0]
 8004970:	f015 0506 	ands.w	r5, r5, #6
 8004974:	d106      	bne.n	8004984 <_printf_common+0x48>
 8004976:	f104 0a19 	add.w	sl, r4, #25
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	6832      	ldr	r2, [r6, #0]
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	42ab      	cmp	r3, r5
 8004982:	dc26      	bgt.n	80049d2 <_printf_common+0x96>
 8004984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004988:	6822      	ldr	r2, [r4, #0]
 800498a:	3b00      	subs	r3, #0
 800498c:	bf18      	it	ne
 800498e:	2301      	movne	r3, #1
 8004990:	0692      	lsls	r2, r2, #26
 8004992:	d42b      	bmi.n	80049ec <_printf_common+0xb0>
 8004994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004998:	4641      	mov	r1, r8
 800499a:	4638      	mov	r0, r7
 800499c:	47c8      	blx	r9
 800499e:	3001      	adds	r0, #1
 80049a0:	d01e      	beq.n	80049e0 <_printf_common+0xa4>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	6922      	ldr	r2, [r4, #16]
 80049a6:	f003 0306 	and.w	r3, r3, #6
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	bf02      	ittt	eq
 80049ae:	68e5      	ldreq	r5, [r4, #12]
 80049b0:	6833      	ldreq	r3, [r6, #0]
 80049b2:	1aed      	subeq	r5, r5, r3
 80049b4:	68a3      	ldr	r3, [r4, #8]
 80049b6:	bf0c      	ite	eq
 80049b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049bc:	2500      	movne	r5, #0
 80049be:	4293      	cmp	r3, r2
 80049c0:	bfc4      	itt	gt
 80049c2:	1a9b      	subgt	r3, r3, r2
 80049c4:	18ed      	addgt	r5, r5, r3
 80049c6:	2600      	movs	r6, #0
 80049c8:	341a      	adds	r4, #26
 80049ca:	42b5      	cmp	r5, r6
 80049cc:	d11a      	bne.n	8004a04 <_printf_common+0xc8>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e008      	b.n	80049e4 <_printf_common+0xa8>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4652      	mov	r2, sl
 80049d6:	4641      	mov	r1, r8
 80049d8:	4638      	mov	r0, r7
 80049da:	47c8      	blx	r9
 80049dc:	3001      	adds	r0, #1
 80049de:	d103      	bne.n	80049e8 <_printf_common+0xac>
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e8:	3501      	adds	r5, #1
 80049ea:	e7c6      	b.n	800497a <_printf_common+0x3e>
 80049ec:	18e1      	adds	r1, r4, r3
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	2030      	movs	r0, #48	@ 0x30
 80049f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049f6:	4422      	add	r2, r4
 80049f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a00:	3302      	adds	r3, #2
 8004a02:	e7c7      	b.n	8004994 <_printf_common+0x58>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4622      	mov	r2, r4
 8004a08:	4641      	mov	r1, r8
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c8      	blx	r9
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d0e6      	beq.n	80049e0 <_printf_common+0xa4>
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7d9      	b.n	80049ca <_printf_common+0x8e>
	...

08004a18 <_printf_i>:
 8004a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	7e0f      	ldrb	r7, [r1, #24]
 8004a1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a20:	2f78      	cmp	r7, #120	@ 0x78
 8004a22:	4691      	mov	r9, r2
 8004a24:	4680      	mov	r8, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	469a      	mov	sl, r3
 8004a2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a2e:	d807      	bhi.n	8004a40 <_printf_i+0x28>
 8004a30:	2f62      	cmp	r7, #98	@ 0x62
 8004a32:	d80a      	bhi.n	8004a4a <_printf_i+0x32>
 8004a34:	2f00      	cmp	r7, #0
 8004a36:	f000 80d1 	beq.w	8004bdc <_printf_i+0x1c4>
 8004a3a:	2f58      	cmp	r7, #88	@ 0x58
 8004a3c:	f000 80b8 	beq.w	8004bb0 <_printf_i+0x198>
 8004a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a48:	e03a      	b.n	8004ac0 <_printf_i+0xa8>
 8004a4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a4e:	2b15      	cmp	r3, #21
 8004a50:	d8f6      	bhi.n	8004a40 <_printf_i+0x28>
 8004a52:	a101      	add	r1, pc, #4	@ (adr r1, 8004a58 <_printf_i+0x40>)
 8004a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a58:	08004ab1 	.word	0x08004ab1
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004a41 	.word	0x08004a41
 8004a64:	08004a41 	.word	0x08004a41
 8004a68:	08004a41 	.word	0x08004a41
 8004a6c:	08004a41 	.word	0x08004a41
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a41 	.word	0x08004a41
 8004a78:	08004a41 	.word	0x08004a41
 8004a7c:	08004a41 	.word	0x08004a41
 8004a80:	08004a41 	.word	0x08004a41
 8004a84:	08004bc3 	.word	0x08004bc3
 8004a88:	08004aef 	.word	0x08004aef
 8004a8c:	08004b7d 	.word	0x08004b7d
 8004a90:	08004a41 	.word	0x08004a41
 8004a94:	08004a41 	.word	0x08004a41
 8004a98:	08004be5 	.word	0x08004be5
 8004a9c:	08004a41 	.word	0x08004a41
 8004aa0:	08004aef 	.word	0x08004aef
 8004aa4:	08004a41 	.word	0x08004a41
 8004aa8:	08004a41 	.word	0x08004a41
 8004aac:	08004b85 	.word	0x08004b85
 8004ab0:	6833      	ldr	r3, [r6, #0]
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6032      	str	r2, [r6, #0]
 8004ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004abc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e09c      	b.n	8004bfe <_printf_i+0x1e6>
 8004ac4:	6833      	ldr	r3, [r6, #0]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	1d19      	adds	r1, r3, #4
 8004aca:	6031      	str	r1, [r6, #0]
 8004acc:	0606      	lsls	r6, r0, #24
 8004ace:	d501      	bpl.n	8004ad4 <_printf_i+0xbc>
 8004ad0:	681d      	ldr	r5, [r3, #0]
 8004ad2:	e003      	b.n	8004adc <_printf_i+0xc4>
 8004ad4:	0645      	lsls	r5, r0, #25
 8004ad6:	d5fb      	bpl.n	8004ad0 <_printf_i+0xb8>
 8004ad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	da03      	bge.n	8004ae8 <_printf_i+0xd0>
 8004ae0:	232d      	movs	r3, #45	@ 0x2d
 8004ae2:	426d      	negs	r5, r5
 8004ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ae8:	4858      	ldr	r0, [pc, #352]	@ (8004c4c <_printf_i+0x234>)
 8004aea:	230a      	movs	r3, #10
 8004aec:	e011      	b.n	8004b12 <_printf_i+0xfa>
 8004aee:	6821      	ldr	r1, [r4, #0]
 8004af0:	6833      	ldr	r3, [r6, #0]
 8004af2:	0608      	lsls	r0, r1, #24
 8004af4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004af8:	d402      	bmi.n	8004b00 <_printf_i+0xe8>
 8004afa:	0649      	lsls	r1, r1, #25
 8004afc:	bf48      	it	mi
 8004afe:	b2ad      	uxthmi	r5, r5
 8004b00:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b02:	4852      	ldr	r0, [pc, #328]	@ (8004c4c <_printf_i+0x234>)
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	bf14      	ite	ne
 8004b08:	230a      	movne	r3, #10
 8004b0a:	2308      	moveq	r3, #8
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b12:	6866      	ldr	r6, [r4, #4]
 8004b14:	60a6      	str	r6, [r4, #8]
 8004b16:	2e00      	cmp	r6, #0
 8004b18:	db05      	blt.n	8004b26 <_printf_i+0x10e>
 8004b1a:	6821      	ldr	r1, [r4, #0]
 8004b1c:	432e      	orrs	r6, r5
 8004b1e:	f021 0104 	bic.w	r1, r1, #4
 8004b22:	6021      	str	r1, [r4, #0]
 8004b24:	d04b      	beq.n	8004bbe <_printf_i+0x1a6>
 8004b26:	4616      	mov	r6, r2
 8004b28:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b2c:	fb03 5711 	mls	r7, r3, r1, r5
 8004b30:	5dc7      	ldrb	r7, [r0, r7]
 8004b32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b36:	462f      	mov	r7, r5
 8004b38:	42bb      	cmp	r3, r7
 8004b3a:	460d      	mov	r5, r1
 8004b3c:	d9f4      	bls.n	8004b28 <_printf_i+0x110>
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d10b      	bne.n	8004b5a <_printf_i+0x142>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	07df      	lsls	r7, r3, #31
 8004b46:	d508      	bpl.n	8004b5a <_printf_i+0x142>
 8004b48:	6923      	ldr	r3, [r4, #16]
 8004b4a:	6861      	ldr	r1, [r4, #4]
 8004b4c:	4299      	cmp	r1, r3
 8004b4e:	bfde      	ittt	le
 8004b50:	2330      	movle	r3, #48	@ 0x30
 8004b52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b5a:	1b92      	subs	r2, r2, r6
 8004b5c:	6122      	str	r2, [r4, #16]
 8004b5e:	f8cd a000 	str.w	sl, [sp]
 8004b62:	464b      	mov	r3, r9
 8004b64:	aa03      	add	r2, sp, #12
 8004b66:	4621      	mov	r1, r4
 8004b68:	4640      	mov	r0, r8
 8004b6a:	f7ff fee7 	bl	800493c <_printf_common>
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d14a      	bne.n	8004c08 <_printf_i+0x1f0>
 8004b72:	f04f 30ff 	mov.w	r0, #4294967295
 8004b76:	b004      	add	sp, #16
 8004b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	f043 0320 	orr.w	r3, r3, #32
 8004b82:	6023      	str	r3, [r4, #0]
 8004b84:	4832      	ldr	r0, [pc, #200]	@ (8004c50 <_printf_i+0x238>)
 8004b86:	2778      	movs	r7, #120	@ 0x78
 8004b88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	6831      	ldr	r1, [r6, #0]
 8004b90:	061f      	lsls	r7, r3, #24
 8004b92:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b96:	d402      	bmi.n	8004b9e <_printf_i+0x186>
 8004b98:	065f      	lsls	r7, r3, #25
 8004b9a:	bf48      	it	mi
 8004b9c:	b2ad      	uxthmi	r5, r5
 8004b9e:	6031      	str	r1, [r6, #0]
 8004ba0:	07d9      	lsls	r1, r3, #31
 8004ba2:	bf44      	itt	mi
 8004ba4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ba8:	6023      	strmi	r3, [r4, #0]
 8004baa:	b11d      	cbz	r5, 8004bb4 <_printf_i+0x19c>
 8004bac:	2310      	movs	r3, #16
 8004bae:	e7ad      	b.n	8004b0c <_printf_i+0xf4>
 8004bb0:	4826      	ldr	r0, [pc, #152]	@ (8004c4c <_printf_i+0x234>)
 8004bb2:	e7e9      	b.n	8004b88 <_printf_i+0x170>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f023 0320 	bic.w	r3, r3, #32
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	e7f6      	b.n	8004bac <_printf_i+0x194>
 8004bbe:	4616      	mov	r6, r2
 8004bc0:	e7bd      	b.n	8004b3e <_printf_i+0x126>
 8004bc2:	6833      	ldr	r3, [r6, #0]
 8004bc4:	6825      	ldr	r5, [r4, #0]
 8004bc6:	6961      	ldr	r1, [r4, #20]
 8004bc8:	1d18      	adds	r0, r3, #4
 8004bca:	6030      	str	r0, [r6, #0]
 8004bcc:	062e      	lsls	r6, r5, #24
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	d501      	bpl.n	8004bd6 <_printf_i+0x1be>
 8004bd2:	6019      	str	r1, [r3, #0]
 8004bd4:	e002      	b.n	8004bdc <_printf_i+0x1c4>
 8004bd6:	0668      	lsls	r0, r5, #25
 8004bd8:	d5fb      	bpl.n	8004bd2 <_printf_i+0x1ba>
 8004bda:	8019      	strh	r1, [r3, #0]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	6123      	str	r3, [r4, #16]
 8004be0:	4616      	mov	r6, r2
 8004be2:	e7bc      	b.n	8004b5e <_printf_i+0x146>
 8004be4:	6833      	ldr	r3, [r6, #0]
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	6032      	str	r2, [r6, #0]
 8004bea:	681e      	ldr	r6, [r3, #0]
 8004bec:	6862      	ldr	r2, [r4, #4]
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f7fb fafd 	bl	80001f0 <memchr>
 8004bf6:	b108      	cbz	r0, 8004bfc <_printf_i+0x1e4>
 8004bf8:	1b80      	subs	r0, r0, r6
 8004bfa:	6060      	str	r0, [r4, #4]
 8004bfc:	6863      	ldr	r3, [r4, #4]
 8004bfe:	6123      	str	r3, [r4, #16]
 8004c00:	2300      	movs	r3, #0
 8004c02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c06:	e7aa      	b.n	8004b5e <_printf_i+0x146>
 8004c08:	6923      	ldr	r3, [r4, #16]
 8004c0a:	4632      	mov	r2, r6
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4640      	mov	r0, r8
 8004c10:	47d0      	blx	sl
 8004c12:	3001      	adds	r0, #1
 8004c14:	d0ad      	beq.n	8004b72 <_printf_i+0x15a>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	079b      	lsls	r3, r3, #30
 8004c1a:	d413      	bmi.n	8004c44 <_printf_i+0x22c>
 8004c1c:	68e0      	ldr	r0, [r4, #12]
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	4298      	cmp	r0, r3
 8004c22:	bfb8      	it	lt
 8004c24:	4618      	movlt	r0, r3
 8004c26:	e7a6      	b.n	8004b76 <_printf_i+0x15e>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	4632      	mov	r2, r6
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	4640      	mov	r0, r8
 8004c30:	47d0      	blx	sl
 8004c32:	3001      	adds	r0, #1
 8004c34:	d09d      	beq.n	8004b72 <_printf_i+0x15a>
 8004c36:	3501      	adds	r5, #1
 8004c38:	68e3      	ldr	r3, [r4, #12]
 8004c3a:	9903      	ldr	r1, [sp, #12]
 8004c3c:	1a5b      	subs	r3, r3, r1
 8004c3e:	42ab      	cmp	r3, r5
 8004c40:	dcf2      	bgt.n	8004c28 <_printf_i+0x210>
 8004c42:	e7eb      	b.n	8004c1c <_printf_i+0x204>
 8004c44:	2500      	movs	r5, #0
 8004c46:	f104 0619 	add.w	r6, r4, #25
 8004c4a:	e7f5      	b.n	8004c38 <_printf_i+0x220>
 8004c4c:	08004da5 	.word	0x08004da5
 8004c50:	08004db6 	.word	0x08004db6

08004c54 <memmove>:
 8004c54:	4288      	cmp	r0, r1
 8004c56:	b510      	push	{r4, lr}
 8004c58:	eb01 0402 	add.w	r4, r1, r2
 8004c5c:	d902      	bls.n	8004c64 <memmove+0x10>
 8004c5e:	4284      	cmp	r4, r0
 8004c60:	4623      	mov	r3, r4
 8004c62:	d807      	bhi.n	8004c74 <memmove+0x20>
 8004c64:	1e43      	subs	r3, r0, #1
 8004c66:	42a1      	cmp	r1, r4
 8004c68:	d008      	beq.n	8004c7c <memmove+0x28>
 8004c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c72:	e7f8      	b.n	8004c66 <memmove+0x12>
 8004c74:	4402      	add	r2, r0
 8004c76:	4601      	mov	r1, r0
 8004c78:	428a      	cmp	r2, r1
 8004c7a:	d100      	bne.n	8004c7e <memmove+0x2a>
 8004c7c:	bd10      	pop	{r4, pc}
 8004c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c86:	e7f7      	b.n	8004c78 <memmove+0x24>

08004c88 <_sbrk_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4d06      	ldr	r5, [pc, #24]	@ (8004ca4 <_sbrk_r+0x1c>)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	f7fb fe1a 	bl	80008cc <_sbrk>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_sbrk_r+0x1a>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_sbrk_r+0x1a>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	200002b4 	.word	0x200002b4

08004ca8 <memcpy>:
 8004ca8:	440a      	add	r2, r1
 8004caa:	4291      	cmp	r1, r2
 8004cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cb0:	d100      	bne.n	8004cb4 <memcpy+0xc>
 8004cb2:	4770      	bx	lr
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cbe:	4291      	cmp	r1, r2
 8004cc0:	d1f9      	bne.n	8004cb6 <memcpy+0xe>
 8004cc2:	bd10      	pop	{r4, pc}

08004cc4 <_realloc_r>:
 8004cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc8:	4607      	mov	r7, r0
 8004cca:	4614      	mov	r4, r2
 8004ccc:	460d      	mov	r5, r1
 8004cce:	b921      	cbnz	r1, 8004cda <_realloc_r+0x16>
 8004cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	f7ff bc4d 	b.w	8004574 <_malloc_r>
 8004cda:	b92a      	cbnz	r2, 8004ce8 <_realloc_r+0x24>
 8004cdc:	f7ff fbde 	bl	800449c <_free_r>
 8004ce0:	4625      	mov	r5, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce8:	f000 f81a 	bl	8004d20 <_malloc_usable_size_r>
 8004cec:	4284      	cmp	r4, r0
 8004cee:	4606      	mov	r6, r0
 8004cf0:	d802      	bhi.n	8004cf8 <_realloc_r+0x34>
 8004cf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cf6:	d8f4      	bhi.n	8004ce2 <_realloc_r+0x1e>
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	f7ff fc3a 	bl	8004574 <_malloc_r>
 8004d00:	4680      	mov	r8, r0
 8004d02:	b908      	cbnz	r0, 8004d08 <_realloc_r+0x44>
 8004d04:	4645      	mov	r5, r8
 8004d06:	e7ec      	b.n	8004ce2 <_realloc_r+0x1e>
 8004d08:	42b4      	cmp	r4, r6
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	bf28      	it	cs
 8004d10:	4632      	movcs	r2, r6
 8004d12:	f7ff ffc9 	bl	8004ca8 <memcpy>
 8004d16:	4629      	mov	r1, r5
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f7ff fbbf 	bl	800449c <_free_r>
 8004d1e:	e7f1      	b.n	8004d04 <_realloc_r+0x40>

08004d20 <_malloc_usable_size_r>:
 8004d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d24:	1f18      	subs	r0, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bfbc      	itt	lt
 8004d2a:	580b      	ldrlt	r3, [r1, r0]
 8004d2c:	18c0      	addlt	r0, r0, r3
 8004d2e:	4770      	bx	lr

08004d30 <_init>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr

08004d3c <_fini>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr
