
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004d3c  08004d3c  00005d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dbc  08004dbc  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004dbc  08004dbc  00005dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dc4  08004dc4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dc4  08004dc4  00005dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dc8  08004dc8  00005dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004dcc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000268  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad15  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000183a  00000000  00000000  00010da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  000125e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000635  00000000  00000000  00012de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020954  00000000  00000000  0001341d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c42e  00000000  00000000  00033d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c95a7  00000000  00000000  0004019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109746  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002514  00000000  00000000  0010978c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0010bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d24 	.word	0x08004d24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004d24 	.word	0x08004d24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fb87 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f87f 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f97f 	bl	80005a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a2:	f000 f94d 	bl	8000540 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002a6:	f000 f8db 	bl	8000460 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	2102      	movs	r1, #2
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002b2:	f001 ff51 	bl	8002158 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80002b6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80002ba:	f000 fbdb 	bl	8000a74 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc1);
 80002be:	4830      	ldr	r0, [pc, #192]	@ (8000380 <main+0xf0>)
 80002c0:	f000 fdf6 	bl	8000eb0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002c4:	f04f 31ff 	mov.w	r1, #4294967295
 80002c8:	482d      	ldr	r0, [pc, #180]	@ (8000380 <main+0xf0>)
 80002ca:	f000 ff07 	bl	80010dc <HAL_ADC_PollForConversion>
	  adc_values[0] = HAL_ADC_GetValue(&hadc1);
 80002ce:	482c      	ldr	r0, [pc, #176]	@ (8000380 <main+0xf0>)
 80002d0:	f001 f806 	bl	80012e0 <HAL_ADC_GetValue>
 80002d4:	4603      	mov	r3, r0
 80002d6:	b29a      	uxth	r2, r3
 80002d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000384 <main+0xf4>)
 80002da:	801a      	strh	r2, [r3, #0]

	  bool pgood = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80002dc:	2101      	movs	r1, #1
 80002de:	482a      	ldr	r0, [pc, #168]	@ (8000388 <main+0xf8>)
 80002e0:	f001 ff22 	bl	8002128 <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	bf14      	ite	ne
 80002ea:	2301      	movne	r3, #1
 80002ec:	2300      	moveq	r3, #0
 80002ee:	71fb      	strb	r3, [r7, #7]
	  bool ovp = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 80002f0:	2102      	movs	r1, #2
 80002f2:	4825      	ldr	r0, [pc, #148]	@ (8000388 <main+0xf8>)
 80002f4:	f001 ff18 	bl	8002128 <HAL_GPIO_ReadPin>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	bf14      	ite	ne
 80002fe:	2301      	movne	r3, #1
 8000300:	2300      	moveq	r3, #0
 8000302:	71bb      	strb	r3, [r7, #6]

	  if ((pgood && ovp) == 0){
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d004      	beq.n	8000314 <main+0x84>
 800030a:	79bb      	ldrb	r3, [r7, #6]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <main+0x84>
 8000310:	2301      	movs	r3, #1
 8000312:	e000      	b.n	8000316 <main+0x86>
 8000314:	2300      	movs	r3, #0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d109      	bne.n	800032e <main+0x9e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 , GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2102      	movs	r1, #2
 800031e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000322:	f001 ff19 	bl	8002158 <HAL_GPIO_WritePin>
		  data_1 = 0;
 8000326:	4b19      	ldr	r3, [pc, #100]	@ (800038c <main+0xfc>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
 800032c:	e008      	b.n	8000340 <main+0xb0>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 , GPIO_PIN_SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2102      	movs	r1, #2
 8000332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000336:	f001 ff0f 	bl	8002158 <HAL_GPIO_WritePin>
	  data_1 = 1;
 800033a:	4b14      	ldr	r3, [pc, #80]	@ (800038c <main+0xfc>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(1000);
 8000340:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000344:	f000 fb96 	bl	8000a74 <HAL_Delay>
//	  HAL_ADC_Start(&hadc2);
//	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
//	  adc_values[1] = HAL_ADC_GetValue(&hadc2);
//

	  snprintf(msg, sizeof(msg), "/*%d; %d; %d*/\r\n", pgood, ovp, adc_values[1]);
 8000348:	79fa      	ldrb	r2, [r7, #7]
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	490d      	ldr	r1, [pc, #52]	@ (8000384 <main+0xf4>)
 800034e:	8849      	ldrh	r1, [r1, #2]
 8000350:	9101      	str	r1, [sp, #4]
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	4613      	mov	r3, r2
 8000356:	4a0e      	ldr	r2, [pc, #56]	@ (8000390 <main+0x100>)
 8000358:	211e      	movs	r1, #30
 800035a:	480e      	ldr	r0, [pc, #56]	@ (8000394 <main+0x104>)
 800035c:	f004 f82e 	bl	80043bc <sniprintf>

	  // Transmit the message over UART
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000360:	480c      	ldr	r0, [pc, #48]	@ (8000394 <main+0x104>)
 8000362:	f7ff ff3d 	bl	80001e0 <strlen>
 8000366:	4603      	mov	r3, r0
 8000368:	b29a      	uxth	r2, r3
 800036a:	f04f 33ff 	mov.w	r3, #4294967295
 800036e:	4909      	ldr	r1, [pc, #36]	@ (8000394 <main+0x104>)
 8000370:	4809      	ldr	r0, [pc, #36]	@ (8000398 <main+0x108>)
 8000372:	f003 fba9 	bl	8003ac8 <HAL_UART_Transmit>

	  HAL_Delay(100);
 8000376:	2064      	movs	r0, #100	@ 0x64
 8000378:	f000 fb7c 	bl	8000a74 <HAL_Delay>
  {
 800037c:	e79f      	b.n	80002be <main+0x2e>
 800037e:	bf00      	nop
 8000380:	20000078 	.word	0x20000078
 8000384:	20000150 	.word	0x20000150
 8000388:	48000800 	.word	0x48000800
 800038c:	20000172 	.word	0x20000172
 8000390:	08004d3c 	.word	0x08004d3c
 8000394:	20000154 	.word	0x20000154
 8000398:	200000c8 	.word	0x200000c8

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b0a6      	sub	sp, #152	@ 0x98
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003a6:	2228      	movs	r2, #40	@ 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f004 f83c 	bl	8004428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2258      	movs	r2, #88	@ 0x58
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f004 f82e 	bl	8004428 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003cc:	2302      	movs	r3, #2
 80003ce:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d0:	2301      	movs	r3, #1
 80003d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d4:	2310      	movs	r3, #16
 80003d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003da:	2302      	movs	r3, #2
 80003dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fec4 	bl	8002188 <HAL_RCC_OscConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000406:	f000 f985 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	230f      	movs	r3, #15
 800040c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040e:	2302      	movs	r3, #2
 8000410:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800041a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000420:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000424:	2102      	movs	r1, #2
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fed2 	bl	80031d0 <HAL_RCC_ClockConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000432:	f000 f96f 	bl	8000714 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000436:	2382      	movs	r3, #130	@ 0x82
 8000438:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800043e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4618      	mov	r0, r3
 8000448:	f003 f8d4 	bl	80035f4 <HAL_RCCEx_PeriphCLKConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000452:	f000 f95f 	bl	8000714 <Error_Handler>
  }
}
 8000456:	bf00      	nop
 8000458:	3798      	adds	r7, #152	@ 0x98
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	@ 0x28
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000466:	f107 031c 	add.w	r3, r7, #28
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
 8000480:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000482:	4b2e      	ldr	r3, [pc, #184]	@ (800053c <MX_ADC1_Init+0xdc>)
 8000484:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000488:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800048a:	4b2c      	ldr	r3, [pc, #176]	@ (800053c <MX_ADC1_Init+0xdc>)
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000490:	4b2a      	ldr	r3, [pc, #168]	@ (800053c <MX_ADC1_Init+0xdc>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000496:	4b29      	ldr	r3, [pc, #164]	@ (800053c <MX_ADC1_Init+0xdc>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800049c:	4b27      	ldr	r3, [pc, #156]	@ (800053c <MX_ADC1_Init+0xdc>)
 800049e:	2201      	movs	r2, #1
 80004a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004a2:	4b26      	ldr	r3, [pc, #152]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004aa:	4b24      	ldr	r3, [pc, #144]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b0:	4b22      	ldr	r3, [pc, #136]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b6:	4b21      	ldr	r3, [pc, #132]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004bc:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004be:	2201      	movs	r2, #1
 80004c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004c2:	4b1e      	ldr	r3, [pc, #120]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ca:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004cc:	2204      	movs	r2, #4
 80004ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d0:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004d6:	4b19      	ldr	r3, [pc, #100]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004d8:	2200      	movs	r2, #0
 80004da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004dc:	4817      	ldr	r0, [pc, #92]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004de:	f000 faed 	bl	8000abc <HAL_ADC_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80004e8:	f000 f914 	bl	8000714 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004f0:	f107 031c 	add.w	r3, r7, #28
 80004f4:	4619      	mov	r1, r3
 80004f6:	4811      	ldr	r0, [pc, #68]	@ (800053c <MX_ADC1_Init+0xdc>)
 80004f8:	f001 f9ea 	bl	80018d0 <HAL_ADCEx_MultiModeConfigChannel>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000502:	f000 f907 	bl	8000714 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000506:	2301      	movs	r3, #1
 8000508:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800050a:	2301      	movs	r3, #1
 800050c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4619      	mov	r1, r3
 8000522:	4806      	ldr	r0, [pc, #24]	@ (800053c <MX_ADC1_Init+0xdc>)
 8000524:	f000 feea 	bl	80012fc <HAL_ADC_ConfigChannel>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800052e:	f000 f8f1 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	3728      	adds	r7, #40	@ 0x28
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000078 	.word	0x20000078

08000540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000544:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 8000546:	4a15      	ldr	r2, [pc, #84]	@ (800059c <MX_USART2_UART_Init+0x5c>)
 8000548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800054a:	4b13      	ldr	r3, [pc, #76]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 800054c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000558:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000564:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 8000566:	220c      	movs	r2, #12
 8000568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000570:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 8000578:	2200      	movs	r2, #0
 800057a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 800057e:	2200      	movs	r2, #0
 8000580:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	@ (8000598 <MX_USART2_UART_Init+0x58>)
 8000584:	f003 fa52 	bl	8003a2c <HAL_UART_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800058e:	f000 f8c1 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000c8 	.word	0x200000c8
 800059c:	40004400 	.word	0x40004400

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b55      	ldr	r3, [pc, #340]	@ (800070c <MX_GPIO_Init+0x16c>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a54      	ldr	r2, [pc, #336]	@ (800070c <MX_GPIO_Init+0x16c>)
 80005bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b52      	ldr	r3, [pc, #328]	@ (800070c <MX_GPIO_Init+0x16c>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ce:	4b4f      	ldr	r3, [pc, #316]	@ (800070c <MX_GPIO_Init+0x16c>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a4e      	ldr	r2, [pc, #312]	@ (800070c <MX_GPIO_Init+0x16c>)
 80005d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b4c      	ldr	r3, [pc, #304]	@ (800070c <MX_GPIO_Init+0x16c>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b49      	ldr	r3, [pc, #292]	@ (800070c <MX_GPIO_Init+0x16c>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a48      	ldr	r2, [pc, #288]	@ (800070c <MX_GPIO_Init+0x16c>)
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b46      	ldr	r3, [pc, #280]	@ (800070c <MX_GPIO_Init+0x16c>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b43      	ldr	r3, [pc, #268]	@ (800070c <MX_GPIO_Init+0x16c>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a42      	ldr	r2, [pc, #264]	@ (800070c <MX_GPIO_Init+0x16c>)
 8000604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b40      	ldr	r3, [pc, #256]	@ (800070c <MX_GPIO_Init+0x16c>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2122      	movs	r1, #34	@ 0x22
 800061a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061e:	f001 fd9b 	bl	8002158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, efuse_EN_Pin|Buck_Boost_EN_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000628:	4839      	ldr	r0, [pc, #228]	@ (8000710 <MX_GPIO_Init+0x170>)
 800062a:	f001 fd95 	bl	8002158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LATCH_1_Pin|LATCH_2_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000638:	f001 fd8e 	bl	8002158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000642:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	482f      	ldr	r0, [pc, #188]	@ (8000710 <MX_GPIO_Init+0x170>)
 8000654:	f001 fbde 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000658:	2303      	movs	r3, #3
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4829      	ldr	r0, [pc, #164]	@ (8000710 <MX_GPIO_Init+0x170>)
 800066c:	f001 fbd2 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8000670:	2322      	movs	r3, #34	@ 0x22
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068a:	f001 fbc3 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : efuse_EN_Pin Buck_Boost_EN_Pin */
  GPIO_InitStruct.Pin = efuse_EN_Pin|Buck_Boost_EN_Pin;
 800068e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	481a      	ldr	r0, [pc, #104]	@ (8000710 <MX_GPIO_Init+0x170>)
 80006a8:	f001 fbb4 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PGOOD_Pin */
  GPIO_InitStruct.Pin = PGOOD_Pin;
 80006ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PGOOD_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c4:	f001 fba6 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OVP_Pin */
  GPIO_InitStruct.Pin = OVP_Pin;
 80006c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OVP_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e0:	f001 fb98 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LATCH_1_Pin LATCH_2_Pin */
  GPIO_InitStruct.Pin = LATCH_1_Pin|LATCH_2_Pin;
 80006e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000700:	f001 fb88 	bl	8001e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	@ 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	48000800 	.word	0x48000800

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <HAL_MspInit+0x44>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	4a0e      	ldr	r2, [pc, #56]	@ (8000764 <HAL_MspInit+0x44>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6193      	str	r3, [r2, #24]
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <HAL_MspInit+0x44>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <HAL_MspInit+0x44>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <HAL_MspInit+0x44>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <HAL_MspInit+0x44>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000756:	2007      	movs	r0, #7
 8000758:	f001 fb28 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000788:	d124      	bne.n	80007d4 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800078a:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ba:	2301      	movs	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007be:	2303      	movs	r3, #3
 80007c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d0:	f001 fb20 	bl	8001e14 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a17      	ldr	r2, [pc, #92]	@ (800085c <HAL_UART_MspInit+0x7c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d128      	bne.n	8000854 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <HAL_UART_MspInit+0x80>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a16      	ldr	r2, [pc, #88]	@ (8000860 <HAL_UART_MspInit+0x80>)
 8000808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <HAL_UART_MspInit+0x80>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <HAL_UART_MspInit+0x80>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a10      	ldr	r2, [pc, #64]	@ (8000860 <HAL_UART_MspInit+0x80>)
 8000820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000824:	6153      	str	r3, [r2, #20]
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <HAL_UART_MspInit+0x80>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000832:	230c      	movs	r3, #12
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000842:	2307      	movs	r3, #7
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000850:	f001 fae0 	bl	8001e14 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	@ 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40004400 	.word	0x40004400
 8000860:	40021000 	.word	0x40021000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <UsageFault_Handler+0x4>

0800088c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ba:	f000 f8bb 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	@ (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f003 fda0 	bl	8004438 <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	@ (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20010000 	.word	0x20010000
 8000924:	00000400 	.word	0x00000400
 8000928:	20000174 	.word	0x20000174
 800092c:	200002c8 	.word	0x200002c8

08000930 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	@ (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800098c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000958:	f7ff ffea 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490d      	ldr	r1, [pc, #52]	@ (8000994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0d      	ldr	r2, [pc, #52]	@ (8000998 <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0a      	ldr	r4, [pc, #40]	@ (80009a0 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000982:	f003 fd5f 	bl	8004444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000986:	f7ff fc83 	bl	8000290 <main>

0800098a <LoopForever>:

LoopForever:
    b LoopForever
 800098a:	e7fe      	b.n	800098a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800098c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000998:	08004dcc 	.word	0x08004dcc
  ldr r2, =_sbss
 800099c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009a0:	200002c4 	.word	0x200002c4

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <HAL_Init+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <HAL_Init+0x28>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f001 f9f7 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff feac 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fa01 	bl	8001dfa <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f001 f9d7 	bl	8001dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000178 	.word	0x20000178

08000a5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000178 	.word	0x20000178

08000a74 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff ffee 	bl	8000a5c <HAL_GetTick>
 8000a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_Delay+0x44>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a9a:	bf00      	nop
 8000a9c:	f7ff ffde 	bl	8000a5c <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008

08000abc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09a      	sub	sp, #104	@ 0x68
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e1e3      	b.n	8000ea4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d176      	bne.n	8000bdc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d152      	bne.n	8000b9c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fe29 	bl	8000768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d13b      	bne.n	8000b9c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f001 f829 	bl	8001b7c <ADC_Disable>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	f003 0310 	and.w	r3, r3, #16
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d12f      	bne.n	8000b9c <HAL_ADC_Init+0xe0>
 8000b3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d12b      	bne.n	8000b9c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b4c:	f023 0302 	bic.w	r3, r3, #2
 8000b50:	f043 0202 	orr.w	r2, r3, #2
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000b66:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b76:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b78:	4b92      	ldr	r3, [pc, #584]	@ (8000dc4 <HAL_ADC_Init+0x308>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a92      	ldr	r2, [pc, #584]	@ (8000dc8 <HAL_ADC_Init+0x30c>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9a      	lsrs	r2, r3, #18
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b8e:	e002      	b.n	8000b96 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1f9      	bne.n	8000b90 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d007      	beq.n	8000bba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bb8:	d110      	bne.n	8000bdc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f023 0312 	bic.w	r3, r3, #18
 8000bc2:	f043 0210 	orr.w	r2, r3, #16
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f043 0201 	orr.w	r2, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f040 8150 	bne.w	8000e8a <HAL_ADC_Init+0x3ce>
 8000bea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 814b 	bne.w	8000e8a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 8143 	bne.w	8000e8a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c0c:	f043 0202 	orr.w	r2, r3, #2
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c1c:	d004      	beq.n	8000c28 <HAL_ADC_Init+0x16c>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a6a      	ldr	r2, [pc, #424]	@ (8000dcc <HAL_ADC_Init+0x310>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d101      	bne.n	8000c2c <HAL_ADC_Init+0x170>
 8000c28:	4b69      	ldr	r3, [pc, #420]	@ (8000dd0 <HAL_ADC_Init+0x314>)
 8000c2a:	e000      	b.n	8000c2e <HAL_ADC_Init+0x172>
 8000c2c:	4b69      	ldr	r3, [pc, #420]	@ (8000dd4 <HAL_ADC_Init+0x318>)
 8000c2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c38:	d102      	bne.n	8000c40 <HAL_ADC_Init+0x184>
 8000c3a:	4b64      	ldr	r3, [pc, #400]	@ (8000dcc <HAL_ADC_Init+0x310>)
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	e01a      	b.n	8000c76 <HAL_ADC_Init+0x1ba>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a61      	ldr	r2, [pc, #388]	@ (8000dcc <HAL_ADC_Init+0x310>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d103      	bne.n	8000c52 <HAL_ADC_Init+0x196>
 8000c4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e011      	b.n	8000c76 <HAL_ADC_Init+0x1ba>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a60      	ldr	r2, [pc, #384]	@ (8000dd8 <HAL_ADC_Init+0x31c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d102      	bne.n	8000c62 <HAL_ADC_Init+0x1a6>
 8000c5c:	4b5f      	ldr	r3, [pc, #380]	@ (8000ddc <HAL_ADC_Init+0x320>)
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	e009      	b.n	8000c76 <HAL_ADC_Init+0x1ba>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a5d      	ldr	r2, [pc, #372]	@ (8000ddc <HAL_ADC_Init+0x320>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d102      	bne.n	8000c72 <HAL_ADC_Init+0x1b6>
 8000c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd8 <HAL_ADC_Init+0x31c>)
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	e001      	b.n	8000c76 <HAL_ADC_Init+0x1ba>
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d108      	bne.n	8000c96 <HAL_ADC_Init+0x1da>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d101      	bne.n	8000c96 <HAL_ADC_Init+0x1da>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <HAL_ADC_Init+0x1dc>
 8000c96:	2300      	movs	r3, #0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d11c      	bne.n	8000cd6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d010      	beq.n	8000cc4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d107      	bne.n	8000cbe <HAL_ADC_Init+0x202>
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d101      	bne.n	8000cbe <HAL_ADC_Init+0x202>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e000      	b.n	8000cc0 <HAL_ADC_Init+0x204>
 8000cbe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d108      	bne.n	8000cd6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cd4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7e5b      	ldrb	r3, [r3, #25]
 8000cda:	035b      	lsls	r3, r3, #13
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ce0:	2a01      	cmp	r2, #1
 8000ce2:	d002      	beq.n	8000cea <HAL_ADC_Init+0x22e>
 8000ce4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ce8:	e000      	b.n	8000cec <HAL_ADC_Init+0x230>
 8000cea:	2200      	movs	r2, #0
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d11b      	bne.n	8000d42 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7e5b      	ldrb	r3, [r3, #25]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d109      	bne.n	8000d26 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d16:	3b01      	subs	r3, #1
 8000d18:	045a      	lsls	r2, r3, #17
 8000d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d22:	663b      	str	r3, [r7, #96]	@ 0x60
 8000d24:	e00d      	b.n	8000d42 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000d2e:	f043 0220 	orr.w	r2, r3, #32
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f043 0201 	orr.w	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d054      	beq.n	8000df4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a22      	ldr	r2, [pc, #136]	@ (8000dd8 <HAL_ADC_Init+0x31c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d004      	beq.n	8000d5e <HAL_ADC_Init+0x2a2>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a20      	ldr	r2, [pc, #128]	@ (8000ddc <HAL_ADC_Init+0x320>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d140      	bne.n	8000de0 <HAL_ADC_Init+0x324>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d62:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000d66:	d02a      	beq.n	8000dbe <HAL_ADC_Init+0x302>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d70:	d022      	beq.n	8000db8 <HAL_ADC_Init+0x2fc>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d76:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000d7a:	d01a      	beq.n	8000db2 <HAL_ADC_Init+0x2f6>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d80:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000d84:	d012      	beq.n	8000dac <HAL_ADC_Init+0x2f0>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d8a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000d8e:	d00a      	beq.n	8000da6 <HAL_ADC_Init+0x2ea>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d94:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000d98:	d002      	beq.n	8000da0 <HAL_ADC_Init+0x2e4>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9e:	e023      	b.n	8000de8 <HAL_ADC_Init+0x32c>
 8000da0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000da4:	e020      	b.n	8000de8 <HAL_ADC_Init+0x32c>
 8000da6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000daa:	e01d      	b.n	8000de8 <HAL_ADC_Init+0x32c>
 8000dac:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000db0:	e01a      	b.n	8000de8 <HAL_ADC_Init+0x32c>
 8000db2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000db6:	e017      	b.n	8000de8 <HAL_ADC_Init+0x32c>
 8000db8:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000dbc:	e014      	b.n	8000de8 <HAL_ADC_Init+0x32c>
 8000dbe:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000dc2:	e011      	b.n	8000de8 <HAL_ADC_Init+0x32c>
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	431bde83 	.word	0x431bde83
 8000dcc:	50000100 	.word	0x50000100
 8000dd0:	50000300 	.word	0x50000300
 8000dd4:	50000700 	.word	0x50000700
 8000dd8:	50000400 	.word	0x50000400
 8000ddc:	50000500 	.word	0x50000500
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000dec:	4313      	orrs	r3, r2
 8000dee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000df0:	4313      	orrs	r3, r2
 8000df2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d114      	bne.n	8000e2c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e10:	f023 0302 	bic.w	r3, r3, #2
 8000e14:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7e1b      	ldrb	r3, [r3, #24]
 8000e1a:	039a      	lsls	r2, r3, #14
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4313      	orrs	r3, r2
 8000e26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <HAL_ADC_Init+0x3f0>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d10c      	bne.n	8000e62 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f023 010f 	bic.w	r1, r3, #15
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e60:	e007      	b.n	8000e72 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 020f 	bic.w	r2, r2, #15
 8000e70:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	f023 0303 	bic.w	r3, r3, #3
 8000e80:	f043 0201 	orr.w	r2, r3, #1
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e88:	e00a      	b.n	8000ea0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f023 0312 	bic.w	r3, r3, #18
 8000e92:	f043 0210 	orr.w	r2, r3, #16
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3768      	adds	r7, #104	@ 0x68
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	fff0c007 	.word	0xfff0c007

08000eb0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f040 80f9 	bne.w	80010be <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Start+0x2a>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e0f4      	b.n	80010c4 <HAL_ADC_Start+0x214>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 fde6 	bl	8001ab4 <ADC_Enable>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 80e0 	bne.w	80010b4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f10:	d004      	beq.n	8000f1c <HAL_ADC_Start+0x6c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a6d      	ldr	r2, [pc, #436]	@ (80010cc <HAL_ADC_Start+0x21c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d106      	bne.n	8000f2a <HAL_ADC_Start+0x7a>
 8000f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80010d0 <HAL_ADC_Start+0x220>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d010      	beq.n	8000f4a <HAL_ADC_Start+0x9a>
 8000f28:	e005      	b.n	8000f36 <HAL_ADC_Start+0x86>
 8000f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80010d4 <HAL_ADC_Start+0x224>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d009      	beq.n	8000f4a <HAL_ADC_Start+0x9a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f3e:	d004      	beq.n	8000f4a <HAL_ADC_Start+0x9a>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a64      	ldr	r2, [pc, #400]	@ (80010d8 <HAL_ADC_Start+0x228>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d115      	bne.n	8000f76 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d036      	beq.n	8000fd2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f74:	e02d      	b.n	8000fd2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f8a:	d004      	beq.n	8000f96 <HAL_ADC_Start+0xe6>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a4e      	ldr	r2, [pc, #312]	@ (80010cc <HAL_ADC_Start+0x21c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10a      	bne.n	8000fac <HAL_ADC_Start+0xfc>
 8000f96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf14      	ite	ne
 8000fa4:	2301      	movne	r3, #1
 8000fa6:	2300      	moveq	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	e008      	b.n	8000fbe <HAL_ADC_Start+0x10e>
 8000fac:	4b4a      	ldr	r3, [pc, #296]	@ (80010d8 <HAL_ADC_Start+0x228>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d007      	beq.n	8000fd2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fde:	d106      	bne.n	8000fee <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe4:	f023 0206 	bic.w	r2, r3, #6
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fec:	e002      	b.n	8000ff4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	221c      	movs	r2, #28
 8001002:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800100c:	d004      	beq.n	8001018 <HAL_ADC_Start+0x168>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a2e      	ldr	r2, [pc, #184]	@ (80010cc <HAL_ADC_Start+0x21c>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d106      	bne.n	8001026 <HAL_ADC_Start+0x176>
 8001018:	4b2d      	ldr	r3, [pc, #180]	@ (80010d0 <HAL_ADC_Start+0x220>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 031f 	and.w	r3, r3, #31
 8001020:	2b00      	cmp	r3, #0
 8001022:	d03e      	beq.n	80010a2 <HAL_ADC_Start+0x1f2>
 8001024:	e005      	b.n	8001032 <HAL_ADC_Start+0x182>
 8001026:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <HAL_ADC_Start+0x224>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	2b00      	cmp	r3, #0
 8001030:	d037      	beq.n	80010a2 <HAL_ADC_Start+0x1f2>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800103a:	d004      	beq.n	8001046 <HAL_ADC_Start+0x196>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a22      	ldr	r2, [pc, #136]	@ (80010cc <HAL_ADC_Start+0x21c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d106      	bne.n	8001054 <HAL_ADC_Start+0x1a4>
 8001046:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <HAL_ADC_Start+0x220>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	2b05      	cmp	r3, #5
 8001050:	d027      	beq.n	80010a2 <HAL_ADC_Start+0x1f2>
 8001052:	e005      	b.n	8001060 <HAL_ADC_Start+0x1b0>
 8001054:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <HAL_ADC_Start+0x224>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	2b05      	cmp	r3, #5
 800105e:	d020      	beq.n	80010a2 <HAL_ADC_Start+0x1f2>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001068:	d004      	beq.n	8001074 <HAL_ADC_Start+0x1c4>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <HAL_ADC_Start+0x21c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d106      	bne.n	8001082 <HAL_ADC_Start+0x1d2>
 8001074:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <HAL_ADC_Start+0x220>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	2b09      	cmp	r3, #9
 800107e:	d010      	beq.n	80010a2 <HAL_ADC_Start+0x1f2>
 8001080:	e005      	b.n	800108e <HAL_ADC_Start+0x1de>
 8001082:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <HAL_ADC_Start+0x224>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	2b09      	cmp	r3, #9
 800108c:	d009      	beq.n	80010a2 <HAL_ADC_Start+0x1f2>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001096:	d004      	beq.n	80010a2 <HAL_ADC_Start+0x1f2>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_ADC_Start+0x228>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10f      	bne.n	80010c2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 0204 	orr.w	r2, r2, #4
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	e006      	b.n	80010c2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80010bc:	e001      	b.n	80010c2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010be:	2302      	movs	r3, #2
 80010c0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	50000100 	.word	0x50000100
 80010d0:	50000300 	.word	0x50000300
 80010d4:	50000700 	.word	0x50000700
 80010d8:	50000400 	.word	0x50000400

080010dc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d102      	bne.n	80010f8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80010f2:	2308      	movs	r3, #8
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e03a      	b.n	800116e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001100:	d004      	beq.n	800110c <HAL_ADC_PollForConversion+0x30>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a72      	ldr	r2, [pc, #456]	@ (80012d0 <HAL_ADC_PollForConversion+0x1f4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d101      	bne.n	8001110 <HAL_ADC_PollForConversion+0x34>
 800110c:	4b71      	ldr	r3, [pc, #452]	@ (80012d4 <HAL_ADC_PollForConversion+0x1f8>)
 800110e:	e000      	b.n	8001112 <HAL_ADC_PollForConversion+0x36>
 8001110:	4b71      	ldr	r3, [pc, #452]	@ (80012d8 <HAL_ADC_PollForConversion+0x1fc>)
 8001112:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	2b00      	cmp	r3, #0
 800111e:	d112      	bne.n	8001146 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b01      	cmp	r3, #1
 800112c:	d11d      	bne.n	800116a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f043 0220 	orr.w	r2, r3, #32
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e0bf      	b.n	80012c6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f043 0220 	orr.w	r2, r3, #32
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e0ad      	b.n	80012c6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800116a:	230c      	movs	r3, #12
 800116c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001176:	d004      	beq.n	8001182 <HAL_ADC_PollForConversion+0xa6>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a54      	ldr	r2, [pc, #336]	@ (80012d0 <HAL_ADC_PollForConversion+0x1f4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d106      	bne.n	8001190 <HAL_ADC_PollForConversion+0xb4>
 8001182:	4b54      	ldr	r3, [pc, #336]	@ (80012d4 <HAL_ADC_PollForConversion+0x1f8>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	2b00      	cmp	r3, #0
 800118c:	d010      	beq.n	80011b0 <HAL_ADC_PollForConversion+0xd4>
 800118e:	e005      	b.n	800119c <HAL_ADC_PollForConversion+0xc0>
 8001190:	4b51      	ldr	r3, [pc, #324]	@ (80012d8 <HAL_ADC_PollForConversion+0x1fc>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	2b00      	cmp	r3, #0
 800119a:	d009      	beq.n	80011b0 <HAL_ADC_PollForConversion+0xd4>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011a4:	d004      	beq.n	80011b0 <HAL_ADC_PollForConversion+0xd4>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a4c      	ldr	r2, [pc, #304]	@ (80012dc <HAL_ADC_PollForConversion+0x200>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d104      	bne.n	80011ba <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	e00f      	b.n	80011da <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011c2:	d004      	beq.n	80011ce <HAL_ADC_PollForConversion+0xf2>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a41      	ldr	r2, [pc, #260]	@ (80012d0 <HAL_ADC_PollForConversion+0x1f4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d102      	bne.n	80011d4 <HAL_ADC_PollForConversion+0xf8>
 80011ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80011d2:	e000      	b.n	80011d6 <HAL_ADC_PollForConversion+0xfa>
 80011d4:	4b41      	ldr	r3, [pc, #260]	@ (80012dc <HAL_ADC_PollForConversion+0x200>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80011da:	f7ff fc3f 	bl	8000a5c <HAL_GetTick>
 80011de:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011e0:	e021      	b.n	8001226 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d01d      	beq.n	8001226 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <HAL_ADC_PollForConversion+0x124>
 80011f0:	f7ff fc34 	bl	8000a5c <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d212      	bcs.n	8001226 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10b      	bne.n	8001226 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f043 0204 	orr.w	r2, r3, #4
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e04f      	b.n	80012c6 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0d6      	beq.n	80011e2 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800124a:	2b00      	cmp	r3, #0
 800124c:	d131      	bne.n	80012b2 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001254:	2b00      	cmp	r3, #0
 8001256:	d12c      	bne.n	80012b2 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b08      	cmp	r3, #8
 8001264:	d125      	bne.n	80012b2 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d112      	bne.n	800129a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d112      	bne.n	80012b2 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	f043 0201 	orr.w	r2, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	641a      	str	r2, [r3, #64]	@ 0x40
 8001298:	e00b      	b.n	80012b2 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f043 0220 	orr.w	r2, r3, #32
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	50000100 	.word	0x50000100
 80012d4:	50000300 	.word	0x50000300
 80012d8:	50000700 	.word	0x50000700
 80012dc:	50000400 	.word	0x50000400

080012e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b09b      	sub	sp, #108	@ 0x6c
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_ADC_ConfigChannel+0x22>
 800131a:	2302      	movs	r3, #2
 800131c:	e2c8      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x5b4>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	f040 82ac 	bne.w	800188e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b04      	cmp	r3, #4
 800133c:	d81c      	bhi.n	8001378 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	461a      	mov	r2, r3
 8001352:	231f      	movs	r3, #31
 8001354:	4093      	lsls	r3, r2
 8001356:	43db      	mvns	r3, r3
 8001358:	4019      	ands	r1, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa00 f203 	lsl.w	r2, r0, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	631a      	str	r2, [r3, #48]	@ 0x30
 8001376:	e063      	b.n	8001440 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b09      	cmp	r3, #9
 800137e:	d81e      	bhi.n	80013be <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	3b1e      	subs	r3, #30
 8001394:	221f      	movs	r2, #31
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	4019      	ands	r1, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	3b1e      	subs	r3, #30
 80013b0:	fa00 f203 	lsl.w	r2, r0, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80013bc:	e040      	b.n	8001440 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b0e      	cmp	r3, #14
 80013c4:	d81e      	bhi.n	8001404 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	3b3c      	subs	r3, #60	@ 0x3c
 80013da:	221f      	movs	r2, #31
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4019      	ands	r1, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	3b3c      	subs	r3, #60	@ 0x3c
 80013f6:	fa00 f203 	lsl.w	r2, r0, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	639a      	str	r2, [r3, #56]	@ 0x38
 8001402:	e01d      	b.n	8001440 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	3b5a      	subs	r3, #90	@ 0x5a
 8001418:	221f      	movs	r2, #31
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	4019      	ands	r1, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	3b5a      	subs	r3, #90	@ 0x5a
 8001434:	fa00 f203 	lsl.w	r2, r0, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 80e5 	bne.w	800161a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b09      	cmp	r3, #9
 8001456:	d91c      	bls.n	8001492 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6999      	ldr	r1, [r3, #24]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	3b1e      	subs	r3, #30
 800146a:	2207      	movs	r2, #7
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	4019      	ands	r1, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6898      	ldr	r0, [r3, #8]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	3b1e      	subs	r3, #30
 8001484:	fa00 f203 	lsl.w	r2, r0, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	619a      	str	r2, [r3, #24]
 8001490:	e019      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6959      	ldr	r1, [r3, #20]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	2207      	movs	r2, #7
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4019      	ands	r1, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	6898      	ldr	r0, [r3, #8]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d84f      	bhi.n	8001588 <HAL_ADC_ConfigChannel+0x28c>
 80014e8:	a201      	add	r2, pc, #4	@ (adr r2, 80014f0 <HAL_ADC_ConfigChannel+0x1f4>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001501 	.word	0x08001501
 80014f4:	08001523 	.word	0x08001523
 80014f8:	08001545 	.word	0x08001545
 80014fc:	08001567 	.word	0x08001567
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001506:	4b99      	ldr	r3, [pc, #612]	@ (800176c <HAL_ADC_ConfigChannel+0x470>)
 8001508:	4013      	ands	r3, r2
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	0691      	lsls	r1, r2, #26
 8001510:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001512:	430a      	orrs	r2, r1
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800151e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001520:	e07b      	b.n	800161a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001528:	4b90      	ldr	r3, [pc, #576]	@ (800176c <HAL_ADC_ConfigChannel+0x470>)
 800152a:	4013      	ands	r3, r2
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	0691      	lsls	r1, r2, #26
 8001532:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001534:	430a      	orrs	r2, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001540:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001542:	e06a      	b.n	800161a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800154a:	4b88      	ldr	r3, [pc, #544]	@ (800176c <HAL_ADC_ConfigChannel+0x470>)
 800154c:	4013      	ands	r3, r2
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	0691      	lsls	r1, r2, #26
 8001554:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001556:	430a      	orrs	r2, r1
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001562:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001564:	e059      	b.n	800161a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800156c:	4b7f      	ldr	r3, [pc, #508]	@ (800176c <HAL_ADC_ConfigChannel+0x470>)
 800156e:	4013      	ands	r3, r2
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	0691      	lsls	r1, r2, #26
 8001576:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001578:	430a      	orrs	r2, r1
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001584:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001586:	e048      	b.n	800161a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	069b      	lsls	r3, r3, #26
 8001598:	429a      	cmp	r2, r3
 800159a:	d107      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80015aa:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	069b      	lsls	r3, r3, #26
 80015bc:	429a      	cmp	r2, r3
 80015be:	d107      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80015ce:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80015d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	069b      	lsls	r3, r3, #26
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d107      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80015f2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	069b      	lsls	r3, r3, #26
 8001604:	429a      	cmp	r2, r3
 8001606:	d107      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001616:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001618:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_ADC_ConfigChannel+0x33e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_ADC_ConfigChannel+0x33e>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_ADC_ConfigChannel+0x340>
 800163a:	2300      	movs	r3, #0
 800163c:	2b00      	cmp	r3, #0
 800163e:	f040 8131 	bne.w	80018a4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d00f      	beq.n	800166a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2201      	movs	r2, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43da      	mvns	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	400a      	ands	r2, r1
 8001664:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001668:	e049      	b.n	80016fe <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2201      	movs	r2, #1
 8001678:	409a      	lsls	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d91c      	bls.n	80016c6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6999      	ldr	r1, [r3, #24]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	3b1b      	subs	r3, #27
 800169e:	2207      	movs	r2, #7
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4019      	ands	r1, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	6898      	ldr	r0, [r3, #8]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	3b1b      	subs	r3, #27
 80016b8:	fa00 f203 	lsl.w	r2, r0, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	619a      	str	r2, [r3, #24]
 80016c4:	e01b      	b.n	80016fe <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6959      	ldr	r1, [r3, #20]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	2207      	movs	r2, #7
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	4019      	ands	r1, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6898      	ldr	r0, [r3, #8]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	fa00 f203 	lsl.w	r2, r0, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001706:	d004      	beq.n	8001712 <HAL_ADC_ConfigChannel+0x416>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a18      	ldr	r2, [pc, #96]	@ (8001770 <HAL_ADC_ConfigChannel+0x474>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x41a>
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_ADC_ConfigChannel+0x478>)
 8001714:	e000      	b.n	8001718 <HAL_ADC_ConfigChannel+0x41c>
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <HAL_ADC_ConfigChannel+0x47c>)
 8001718:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b10      	cmp	r3, #16
 8001720:	d105      	bne.n	800172e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800172a:	2b00      	cmp	r3, #0
 800172c:	d015      	beq.n	800175a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001732:	2b11      	cmp	r3, #17
 8001734:	d105      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001746:	2b12      	cmp	r3, #18
 8001748:	f040 80ac 	bne.w	80018a4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800174c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 80a5 	bne.w	80018a4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001762:	d10b      	bne.n	800177c <HAL_ADC_ConfigChannel+0x480>
 8001764:	4b02      	ldr	r3, [pc, #8]	@ (8001770 <HAL_ADC_ConfigChannel+0x474>)
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e023      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x4b6>
 800176a:	bf00      	nop
 800176c:	83fff000 	.word	0x83fff000
 8001770:	50000100 	.word	0x50000100
 8001774:	50000300 	.word	0x50000300
 8001778:	50000700 	.word	0x50000700
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a4e      	ldr	r2, [pc, #312]	@ (80018bc <HAL_ADC_ConfigChannel+0x5c0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d103      	bne.n	800178e <HAL_ADC_ConfigChannel+0x492>
 8001786:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e011      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x4b6>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a4b      	ldr	r2, [pc, #300]	@ (80018c0 <HAL_ADC_ConfigChannel+0x5c4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d102      	bne.n	800179e <HAL_ADC_ConfigChannel+0x4a2>
 8001798:	4b4a      	ldr	r3, [pc, #296]	@ (80018c4 <HAL_ADC_ConfigChannel+0x5c8>)
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e009      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x4b6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a48      	ldr	r2, [pc, #288]	@ (80018c4 <HAL_ADC_ConfigChannel+0x5c8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d102      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x4b2>
 80017a8:	4b45      	ldr	r3, [pc, #276]	@ (80018c0 <HAL_ADC_ConfigChannel+0x5c4>)
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e001      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x4b6>
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d108      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x4d6>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x4d6>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x4d8>
 80017d2:	2300      	movs	r3, #0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d150      	bne.n	800187a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017d8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d010      	beq.n	8001800 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x4fe>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x4fe>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_ADC_ConfigChannel+0x500>
 80017fa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d13c      	bne.n	800187a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b10      	cmp	r3, #16
 8001806:	d11d      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x548>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001810:	d118      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800181a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800181c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a2a      	ldr	r2, [pc, #168]	@ (80018cc <HAL_ADC_ConfigChannel+0x5d0>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	0c9a      	lsrs	r2, r3, #18
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001834:	e002      	b.n	800183c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3b01      	subs	r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f9      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001842:	e02e      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b11      	cmp	r3, #17
 800184a:	d10b      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x568>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001854:	d106      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800185e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001860:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001862:	e01e      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b12      	cmp	r3, #18
 800186a:	d11a      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800186c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001876:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001878:	e013      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f043 0220 	orr.w	r2, r3, #32
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800188c:	e00a      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f043 0220 	orr.w	r2, r3, #32
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80018a0:	e000      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018a2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	376c      	adds	r7, #108	@ 0x6c
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	50000100 	.word	0x50000100
 80018c0:	50000400 	.word	0x50000400
 80018c4:	50000500 	.word	0x50000500
 80018c8:	20000000 	.word	0x20000000
 80018cc:	431bde83 	.word	0x431bde83

080018d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b099      	sub	sp, #100	@ 0x64
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018e8:	d102      	bne.n	80018f0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80018ea:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	e01a      	b.n	8001926 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a6a      	ldr	r2, [pc, #424]	@ (8001aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d103      	bne.n	8001902 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80018fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	e011      	b.n	8001926 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a67      	ldr	r2, [pc, #412]	@ (8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800190c:	4b66      	ldr	r3, [pc, #408]	@ (8001aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	e009      	b.n	8001926 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a64      	ldr	r2, [pc, #400]	@ (8001aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d102      	bne.n	8001922 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800191c:	4b61      	ldr	r3, [pc, #388]	@ (8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	e001      	b.n	8001926 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b0      	b.n	8001a92 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800193a:	2302      	movs	r3, #2
 800193c:	e0a9      	b.n	8001a92 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 808d 	bne.w	8001a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	f040 8086 	bne.w	8001a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800196c:	d004      	beq.n	8001978 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001978:	4b4c      	ldr	r3, [pc, #304]	@ (8001aac <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800197a:	e000      	b.n	800197e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800197c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800197e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d040      	beq.n	8001a0a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800199a:	035b      	lsls	r3, r3, #13
 800199c:	430b      	orrs	r3, r1
 800199e:	431a      	orrs	r2, r3
 80019a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019a2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80019c4:	2300      	movs	r3, #0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d15c      	bne.n	8001a84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80019e6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d14b      	bne.n	8001a84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80019ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80019f4:	f023 030f 	bic.w	r3, r3, #15
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	6811      	ldr	r1, [r2, #0]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	6892      	ldr	r2, [r2, #8]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a06:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a08:	e03c      	b.n	8001a84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a14:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001a36:	2300      	movs	r3, #0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d123      	bne.n	8001a84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d107      	bne.n	8001a58 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001a58:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d112      	bne.n	8001a84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001a5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001a66:	f023 030f 	bic.w	r3, r3, #15
 8001a6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a6c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a6e:	e009      	b.n	8001a84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	f043 0220 	orr.w	r2, r3, #32
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001a82:	e000      	b.n	8001a86 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a84:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001a92:	4618      	mov	r0, r3
 8001a94:	3764      	adds	r7, #100	@ 0x64
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	50000100 	.word	0x50000100
 8001aa4:	50000400 	.word	0x50000400
 8001aa8:	50000500 	.word	0x50000500
 8001aac:	50000300 	.word	0x50000300
 8001ab0:	50000700 	.word	0x50000700

08001ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <ADC_Enable+0x2c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <ADC_Enable+0x2c>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <ADC_Enable+0x2e>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d143      	bne.n	8001b6e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <ADC_Enable+0xc4>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00d      	beq.n	8001b10 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f043 0210 	orr.w	r2, r3, #16
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e02f      	b.n	8001b70 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001b20:	f7fe ff9c 	bl	8000a5c <HAL_GetTick>
 8001b24:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b26:	e01b      	b.n	8001b60 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b28:	f7fe ff98 	bl	8000a5c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d914      	bls.n	8001b60 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d00d      	beq.n	8001b60 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	f043 0210 	orr.w	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b54:	f043 0201 	orr.w	r2, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e007      	b.n	8001b70 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d1dc      	bne.n	8001b28 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	8000003f 	.word	0x8000003f

08001b7c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <ADC_Disable+0x2c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <ADC_Disable+0x2c>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <ADC_Disable+0x2e>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d047      	beq.n	8001c3e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030d 	and.w	r3, r3, #13
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10f      	bne.n	8001bdc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0202 	orr.w	r2, r2, #2
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001bd4:	f7fe ff42 	bl	8000a5c <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bda:	e029      	b.n	8001c30 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	f043 0210 	orr.w	r2, r3, #16
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e023      	b.n	8001c40 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bf8:	f7fe ff30 	bl	8000a5c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d914      	bls.n	8001c30 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d10d      	bne.n	8001c30 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	f043 0210 	orr.w	r2, r3, #16
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e007      	b.n	8001c40 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d0dc      	beq.n	8001bf8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	@ (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	@ (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff47 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff5c 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff8e 	bl	8001d00 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5d 	bl	8001cac <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffb0 	bl	8001d68 <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e22:	e160      	b.n	80020e6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8152 	beq.w	80020e0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d005      	beq.n	8001e54 <HAL_GPIO_Init+0x40>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d130      	bne.n	8001eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0201 	and.w	r2, r3, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d017      	beq.n	8001ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d123      	bne.n	8001f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	6939      	ldr	r1, [r7, #16]
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80ac 	beq.w	80020e0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f88:	4b5e      	ldr	r3, [pc, #376]	@ (8002104 <HAL_GPIO_Init+0x2f0>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002104 <HAL_GPIO_Init+0x2f0>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b5b      	ldr	r3, [pc, #364]	@ (8002104 <HAL_GPIO_Init+0x2f0>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa0:	4a59      	ldr	r2, [pc, #356]	@ (8002108 <HAL_GPIO_Init+0x2f4>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fca:	d025      	beq.n	8002018 <HAL_GPIO_Init+0x204>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a4f      	ldr	r2, [pc, #316]	@ (800210c <HAL_GPIO_Init+0x2f8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d01f      	beq.n	8002014 <HAL_GPIO_Init+0x200>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8002110 <HAL_GPIO_Init+0x2fc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d019      	beq.n	8002010 <HAL_GPIO_Init+0x1fc>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a4d      	ldr	r2, [pc, #308]	@ (8002114 <HAL_GPIO_Init+0x300>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d013      	beq.n	800200c <HAL_GPIO_Init+0x1f8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a4c      	ldr	r2, [pc, #304]	@ (8002118 <HAL_GPIO_Init+0x304>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00d      	beq.n	8002008 <HAL_GPIO_Init+0x1f4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a4b      	ldr	r2, [pc, #300]	@ (800211c <HAL_GPIO_Init+0x308>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <HAL_GPIO_Init+0x1f0>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8002120 <HAL_GPIO_Init+0x30c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d101      	bne.n	8002000 <HAL_GPIO_Init+0x1ec>
 8001ffc:	2306      	movs	r3, #6
 8001ffe:	e00c      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002000:	2307      	movs	r3, #7
 8002002:	e00a      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002004:	2305      	movs	r3, #5
 8002006:	e008      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002008:	2304      	movs	r3, #4
 800200a:	e006      	b.n	800201a <HAL_GPIO_Init+0x206>
 800200c:	2303      	movs	r3, #3
 800200e:	e004      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002010:	2302      	movs	r3, #2
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002018:	2300      	movs	r3, #0
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	f002 0203 	and.w	r2, r2, #3
 8002020:	0092      	lsls	r2, r2, #2
 8002022:	4093      	lsls	r3, r2
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800202a:	4937      	ldr	r1, [pc, #220]	@ (8002108 <HAL_GPIO_Init+0x2f4>)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3302      	adds	r3, #2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002038:	4b3a      	ldr	r3, [pc, #232]	@ (8002124 <HAL_GPIO_Init+0x310>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800205c:	4a31      	ldr	r2, [pc, #196]	@ (8002124 <HAL_GPIO_Init+0x310>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002062:	4b30      	ldr	r3, [pc, #192]	@ (8002124 <HAL_GPIO_Init+0x310>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002086:	4a27      	ldr	r2, [pc, #156]	@ (8002124 <HAL_GPIO_Init+0x310>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208c:	4b25      	ldr	r3, [pc, #148]	@ (8002124 <HAL_GPIO_Init+0x310>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002124 <HAL_GPIO_Init+0x310>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <HAL_GPIO_Init+0x310>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <HAL_GPIO_Init+0x310>)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3301      	adds	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f47f ae97 	bne.w	8001e24 <HAL_GPIO_Init+0x10>
  }
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000
 8002108:	40010000 	.word	0x40010000
 800210c:	48000400 	.word	0x48000400
 8002110:	48000800 	.word	0x48000800
 8002114:	48000c00 	.word	0x48000c00
 8002118:	48001000 	.word	0x48001000
 800211c:	48001400 	.word	0x48001400
 8002120:	48001800 	.word	0x48001800
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e001      	b.n	800214a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
 8002164:	4613      	mov	r3, r2
 8002166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002174:	e002      	b.n	800217c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800218e:	af00      	add	r7, sp, #0
 8002190:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002194:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002198:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800219a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f001 b80a 	b.w	80031c2 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8161 	beq.w	8002486 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021c4:	4bae      	ldr	r3, [pc, #696]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d00c      	beq.n	80021ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d0:	4bab      	ldr	r3, [pc, #684]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d157      	bne.n	800228c <HAL_RCC_OscConfig+0x104>
 80021dc:	4ba8      	ldr	r3, [pc, #672]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e8:	d150      	bne.n	800228c <HAL_RCC_OscConfig+0x104>
 80021ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ee:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b3f      	cmp	r3, #63	@ 0x3f
 800220a:	d802      	bhi.n	8002212 <HAL_RCC_OscConfig+0x8a>
 800220c:	4b9c      	ldr	r3, [pc, #624]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e015      	b.n	800223e <HAL_RCC_OscConfig+0xb6>
 8002212:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002216:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002226:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800222a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800222e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800223a:	4b91      	ldr	r3, [pc, #580]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002242:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002246:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002252:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8108 	beq.w	8002484 <HAL_RCC_OscConfig+0x2fc>
 8002274:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002278:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 80ff 	bne.w	8002484 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f000 bf9b 	b.w	80031c2 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002290:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x124>
 800229e:	4b78      	ldr	r3, [pc, #480]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a77      	ldr	r2, [pc, #476]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e036      	b.n	800231a <HAL_RCC_OscConfig+0x192>
 80022ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x14e>
 80022bc:	4b70      	ldr	r3, [pc, #448]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6f      	ldr	r2, [pc, #444]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6c      	ldr	r2, [pc, #432]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	e021      	b.n	800231a <HAL_RCC_OscConfig+0x192>
 80022d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x17a>
 80022e8:	4b65      	ldr	r3, [pc, #404]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a64      	ldr	r2, [pc, #400]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80022ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b62      	ldr	r3, [pc, #392]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a61      	ldr	r2, [pc, #388]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e00b      	b.n	800231a <HAL_RCC_OscConfig+0x192>
 8002302:	4b5f      	ldr	r3, [pc, #380]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a5e      	ldr	r2, [pc, #376]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 8002308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	4b5c      	ldr	r3, [pc, #368]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a5b      	ldr	r2, [pc, #364]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 8002314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002318:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d054      	beq.n	80023d4 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fb97 	bl	8000a5c <HAL_GetTick>
 800232e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe fb92 	bl	8000a5c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	@ 0x64
 8002342:	d902      	bls.n	800234a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	f000 bf3c 	b.w	80031c2 <HAL_RCC_OscConfig+0x103a>
 800234a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800234e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800235e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b3f      	cmp	r3, #63	@ 0x3f
 800236a:	d802      	bhi.n	8002372 <HAL_RCC_OscConfig+0x1ea>
 800236c:	4b44      	ldr	r3, [pc, #272]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x216>
 8002372:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002376:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002386:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800238a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800238e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800239a:	4b39      	ldr	r3, [pc, #228]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023a2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80023a6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80023aa:	fa92 f2a2 	rbit	r2, r2
 80023ae:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80023b2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80023b6:	fab2 f282 	clz	r2, r2
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f042 0220 	orr.w	r2, r2, #32
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f002 021f 	and.w	r2, r2, #31
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f202 	lsl.w	r2, r1, r2
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0b0      	beq.n	8002334 <HAL_RCC_OscConfig+0x1ac>
 80023d2:	e058      	b.n	8002486 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fb42 	bl	8000a5c <HAL_GetTick>
 80023d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023de:	f7fe fb3d 	bl	8000a5c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	@ 0x64
 80023ec:	d902      	bls.n	80023f4 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f000 bee7 	b.w	80031c2 <HAL_RCC_OscConfig+0x103a>
 80023f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023f8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002408:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b3f      	cmp	r3, #63	@ 0x3f
 8002414:	d802      	bhi.n	800241c <HAL_RCC_OscConfig+0x294>
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e015      	b.n	8002448 <HAL_RCC_OscConfig+0x2c0>
 800241c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002420:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002430:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002434:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002438:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002444:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <HAL_RCC_OscConfig+0x2f8>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800244c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002450:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002454:	fa92 f2a2 	rbit	r2, r2
 8002458:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800245c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f042 0220 	orr.w	r2, r2, #32
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f002 021f 	and.w	r2, r2, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1b0      	bne.n	80023de <HAL_RCC_OscConfig+0x256>
 800247c:	e003      	b.n	8002486 <HAL_RCC_OscConfig+0x2fe>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 816d 	beq.w	8002776 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800249c:	4bcd      	ldr	r3, [pc, #820]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024a8:	4bca      	ldr	r3, [pc, #808]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d16e      	bne.n	8002592 <HAL_RCC_OscConfig+0x40a>
 80024b4:	4bc7      	ldr	r3, [pc, #796]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80024bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024c0:	d167      	bne.n	8002592 <HAL_RCC_OscConfig+0x40a>
 80024c2:	2302      	movs	r3, #2
 80024c4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80024d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b3f      	cmp	r3, #63	@ 0x3f
 80024e0:	d802      	bhi.n	80024e8 <HAL_RCC_OscConfig+0x360>
 80024e2:	4bbc      	ldr	r3, [pc, #752]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	e013      	b.n	8002510 <HAL_RCC_OscConfig+0x388>
 80024e8:	2302      	movs	r3, #2
 80024ea:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80024fa:	2302      	movs	r3, #2
 80024fc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002500:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800250c:	4bb1      	ldr	r3, [pc, #708]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	2202      	movs	r2, #2
 8002512:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002516:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002522:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCC_OscConfig+0x3d0>
 8002542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002546:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d002      	beq.n	8002558 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	f000 be35 	b.w	80031c2 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002558:	4b9e      	ldr	r3, [pc, #632]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002564:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	21f8      	movs	r1, #248	@ 0xf8
 800256e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002576:	fa91 f1a1 	rbit	r1, r1
 800257a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800257e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002582:	fab1 f181 	clz	r1, r1
 8002586:	b2c9      	uxtb	r1, r1
 8002588:	408b      	lsls	r3, r1
 800258a:	4992      	ldr	r1, [pc, #584]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002590:	e0f1      	b.n	8002776 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002596:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8083 	beq.w	80026aa <HAL_RCC_OscConfig+0x522>
 80025a4:	2301      	movs	r3, #1
 80025a6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80025b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	461a      	mov	r2, r3
 80025cc:	2301      	movs	r3, #1
 80025ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe fa44 	bl	8000a5c <HAL_GetTick>
 80025d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025da:	f7fe fa3f 	bl	8000a5c <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d902      	bls.n	80025f0 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	f000 bde9 	b.w	80031c2 <HAL_RCC_OscConfig+0x103a>
 80025f0:	2302      	movs	r3, #2
 80025f2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002602:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b3f      	cmp	r3, #63	@ 0x3f
 800260e:	d802      	bhi.n	8002616 <HAL_RCC_OscConfig+0x48e>
 8002610:	4b70      	ldr	r3, [pc, #448]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	e013      	b.n	800263e <HAL_RCC_OscConfig+0x4b6>
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002628:	2302      	movs	r3, #2
 800262a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800262e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800263a:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	2202      	movs	r2, #2
 8002640:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002644:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002648:	fa92 f2a2 	rbit	r2, r2
 800264c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002650:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f002 021f 	and.w	r2, r2, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f202 	lsl.w	r2, r1, r2
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0b4      	beq.n	80025da <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b58      	ldr	r3, [pc, #352]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	21f8      	movs	r1, #248	@ 0xf8
 8002686:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800268e:	fa91 f1a1 	rbit	r1, r1
 8002692:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002696:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800269a:	fab1 f181 	clz	r1, r1
 800269e:	b2c9      	uxtb	r1, r1
 80026a0:	408b      	lsls	r3, r1
 80026a2:	494c      	ldr	r1, [pc, #304]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
 80026a8:	e065      	b.n	8002776 <HAL_RCC_OscConfig+0x5ee>
 80026aa:	2301      	movs	r3, #1
 80026ac:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80026bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026ca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	461a      	mov	r2, r3
 80026d2:	2300      	movs	r3, #0
 80026d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7fe f9c1 	bl	8000a5c <HAL_GetTick>
 80026da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e0:	f7fe f9bc 	bl	8000a5c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d902      	bls.n	80026f6 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	f000 bd66 	b.w	80031c2 <HAL_RCC_OscConfig+0x103a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002708:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b3f      	cmp	r3, #63	@ 0x3f
 8002714:	d802      	bhi.n	800271c <HAL_RCC_OscConfig+0x594>
 8002716:	4b2f      	ldr	r3, [pc, #188]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	e013      	b.n	8002744 <HAL_RCC_OscConfig+0x5bc>
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800272e:	2302      	movs	r3, #2
 8002730:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002734:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002740:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <HAL_RCC_OscConfig+0x64c>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	2202      	movs	r2, #2
 8002746:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800274a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800274e:	fa92 f2a2 	rbit	r2, r2
 8002752:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002756:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800275a:	fab2 f282 	clz	r2, r2
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f042 0220 	orr.w	r2, r2, #32
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f002 021f 	and.w	r2, r2, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1b4      	bne.n	80026e0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8119 	beq.w	80029be <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002790:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8082 	beq.w	80028a2 <HAL_RCC_OscConfig+0x71a>
 800279e:	2301      	movs	r3, #1
 80027a0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80027b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_RCC_OscConfig+0x650>)
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	2301      	movs	r3, #1
 80027c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe f948 	bl	8000a5c <HAL_GetTick>
 80027cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d0:	e00f      	b.n	80027f2 <HAL_RCC_OscConfig+0x66a>
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027dc:	f7fe f93e 	bl	8000a5c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d902      	bls.n	80027f2 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	f000 bce8 	b.w	80031c2 <HAL_RCC_OscConfig+0x103a>
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027fc:	fa93 f2a3 	rbit	r2, r3
 8002800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002804:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800280e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002812:	2202      	movs	r2, #2
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	fa93 f2a3 	rbit	r2, r3
 8002824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002832:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002836:	2202      	movs	r2, #2
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800283e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	fa93 f2a3 	rbit	r2, r3
 8002848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002850:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	4bb0      	ldr	r3, [pc, #704]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800285e:	2102      	movs	r1, #2
 8002860:	6019      	str	r1, [r3, #0]
 8002862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002866:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fa93 f1a3 	rbit	r1, r3
 8002870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002874:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002878:	6019      	str	r1, [r3, #0]
  return result;
 800287a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800287e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d09d      	beq.n	80027dc <HAL_RCC_OscConfig+0x654>
 80028a0:	e08d      	b.n	80029be <HAL_RCC_OscConfig+0x836>
 80028a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	fa93 f2a3 	rbit	r2, r3
 80028bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028c4:	601a      	str	r2, [r3, #0]
  return result;
 80028c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028ce:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002b18 <HAL_RCC_OscConfig+0x990>)
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	461a      	mov	r2, r3
 80028e0:	2300      	movs	r3, #0
 80028e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e4:	f7fe f8ba 	bl	8000a5c <HAL_GetTick>
 80028e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ee:	f7fe f8b5 	bl	8000a5c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d902      	bls.n	8002904 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	f000 bc5f 	b.w	80031c2 <HAL_RCC_OscConfig+0x103a>
 8002904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002908:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800290c:	2202      	movs	r2, #2
 800290e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002914:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	fa93 f2a3 	rbit	r2, r3
 800291e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002922:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002930:	2202      	movs	r2, #2
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002938:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002946:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002950:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002954:	2202      	movs	r2, #2
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800295c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800296a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800296e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	4b68      	ldr	r3, [pc, #416]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002972:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002978:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800297c:	2102      	movs	r1, #2
 800297e:	6019      	str	r1, [r3, #0]
 8002980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002984:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f1a3 	rbit	r1, r3
 800298e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002992:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002996:	6019      	str	r1, [r3, #0]
  return result;
 8002998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800299c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d197      	bne.n	80028ee <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 819c 	beq.w	8002d0c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029da:	4b4e      	ldr	r3, [pc, #312]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d116      	bne.n	8002a14 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	61d3      	str	r3, [r2, #28]
 80029f2:	4b48      	ldr	r3, [pc, #288]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80029fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a0c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <HAL_RCC_OscConfig+0x994>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d11a      	bne.n	8002a56 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a20:	4b3e      	ldr	r3, [pc, #248]	@ (8002b1c <HAL_RCC_OscConfig+0x994>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3d      	ldr	r2, [pc, #244]	@ (8002b1c <HAL_RCC_OscConfig+0x994>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a2a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2c:	f7fe f816 	bl	8000a5c <HAL_GetTick>
 8002a30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	e009      	b.n	8002a4a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a36:	f7fe f811 	bl	8000a5c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	@ 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e3bb      	b.n	80031c2 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <HAL_RCC_OscConfig+0x994>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ef      	beq.n	8002a36 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d106      	bne.n	8002a74 <HAL_RCC_OscConfig+0x8ec>
 8002a66:	4b2b      	ldr	r3, [pc, #172]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6213      	str	r3, [r2, #32]
 8002a72:	e035      	b.n	8002ae0 <HAL_RCC_OscConfig+0x958>
 8002a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x916>
 8002a84:	4b23      	ldr	r3, [pc, #140]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a22      	ldr	r2, [pc, #136]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	4b20      	ldr	r3, [pc, #128]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002a96:	f023 0304 	bic.w	r3, r3, #4
 8002a9a:	6213      	str	r3, [r2, #32]
 8002a9c:	e020      	b.n	8002ae0 <HAL_RCC_OscConfig+0x958>
 8002a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x940>
 8002aae:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4a18      	ldr	r2, [pc, #96]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6213      	str	r3, [r2, #32]
 8002aba:	4b16      	ldr	r3, [pc, #88]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4a15      	ldr	r2, [pc, #84]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x958>
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4a11      	ldr	r2, [pc, #68]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6213      	str	r3, [r2, #32]
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b14 <HAL_RCC_OscConfig+0x98c>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8085 	beq.w	8002bfc <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7fd ffb3 	bl	8000a5c <HAL_GetTick>
 8002af6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afa:	e011      	b.n	8002b20 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7fd ffae 	bl	8000a5c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d907      	bls.n	8002b20 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e356      	b.n	80031c2 <HAL_RCC_OscConfig+0x103a>
 8002b14:	40021000 	.word	0x40021000
 8002b18:	10908120 	.word	0x10908120
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b24:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b28:	2202      	movs	r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b30:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	fa93 f2a3 	rbit	r2, r3
 8002b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b48:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b54:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b62:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b66:	601a      	str	r2, [r3, #0]
  return result;
 8002b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_RCC_OscConfig+0xa00>
 8002b82:	4b98      	ldr	r3, [pc, #608]	@ (8002de4 <HAL_RCC_OscConfig+0xc5c>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	e013      	b.n	8002bb0 <HAL_RCC_OscConfig+0xa28>
 8002b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b90:	2202      	movs	r2, #2
 8002b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b98:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	4b8d      	ldr	r3, [pc, #564]	@ (8002de4 <HAL_RCC_OscConfig+0xc5c>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bb4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bb8:	2102      	movs	r1, #2
 8002bba:	6011      	str	r1, [r2, #0]
 8002bbc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bc0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	fa92 f1a2 	rbit	r1, r2
 8002bca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bce:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002bd2:	6011      	str	r1, [r2, #0]
  return result;
 8002bd4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bd8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d080      	beq.n	8002afc <HAL_RCC_OscConfig+0x974>
 8002bfa:	e07d      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfc:	f7fd ff2e 	bl	8000a5c <HAL_GetTick>
 8002c00:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	e00b      	b.n	8002c1e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fd ff29 	bl	8000a5c <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e2d1      	b.n	80031c2 <HAL_RCC_OscConfig+0x103a>
 8002c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c22:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c26:	2202      	movs	r2, #2
 8002c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c52:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c60:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c64:	601a      	str	r2, [r3, #0]
  return result;
 8002c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_OscConfig+0xafe>
 8002c80:	4b58      	ldr	r3, [pc, #352]	@ (8002de4 <HAL_RCC_OscConfig+0xc5c>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	e013      	b.n	8002cae <HAL_RCC_OscConfig+0xb26>
 8002c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002c8e:	2202      	movs	r2, #2
 8002c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c96:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	fa93 f2a3 	rbit	r2, r3
 8002ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	4b4e      	ldr	r3, [pc, #312]	@ (8002de4 <HAL_RCC_OscConfig+0xc5c>)
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cb2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	6011      	str	r1, [r2, #0]
 8002cba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cbe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	fa92 f1a2 	rbit	r1, r2
 8002cc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ccc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002cd0:	6011      	str	r1, [r2, #0]
  return result;
 8002cd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cd6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	fab2 f282 	clz	r2, r2
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f002 021f 	and.w	r2, r2, #31
 8002cec:	2101      	movs	r1, #1
 8002cee:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d186      	bne.n	8002c06 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cf8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b38      	ldr	r3, [pc, #224]	@ (8002de4 <HAL_RCC_OscConfig+0xc5c>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	4a37      	ldr	r2, [pc, #220]	@ (8002de4 <HAL_RCC_OscConfig+0xc5c>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8251 	beq.w	80031c0 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d1e:	4b31      	ldr	r3, [pc, #196]	@ (8002de4 <HAL_RCC_OscConfig+0xc5c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	f000 820f 	beq.w	800314a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	f040 8165 	bne.w	8003008 <HAL_RCC_OscConfig+0xe80>
 8002d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d42:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d50:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d62:	601a      	str	r2, [r3, #0]
  return result;
 8002d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d68:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d6c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2300      	movs	r3, #0
 8002d82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fd fe6a 	bl	8000a5c <HAL_GetTick>
 8002d88:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8c:	e009      	b.n	8002da2 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7fd fe65 	bl	8000a5c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e20f      	b.n	80031c2 <HAL_RCC_OscConfig+0x103a>
 8002da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002daa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	fa93 f2a3 	rbit	r2, r3
 8002dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002dc6:	601a      	str	r2, [r3, #0]
  return result;
 8002dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dcc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002dd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dda:	d805      	bhi.n	8002de8 <HAL_RCC_OscConfig+0xc60>
 8002ddc:	4b01      	ldr	r3, [pc, #4]	@ (8002de4 <HAL_RCC_OscConfig+0xc5c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	e02a      	b.n	8002e38 <HAL_RCC_OscConfig+0xcb0>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dec:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002df0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f2a3 	rbit	r2, r3
 8002e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e08:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e12:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e20:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fa93 f2a3 	rbit	r2, r3
 8002e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	4bca      	ldr	r3, [pc, #808]	@ (8003160 <HAL_RCC_OscConfig+0xfd8>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e3c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e44:	6011      	str	r1, [r2, #0]
 8002e46:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e4a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	fa92 f1a2 	rbit	r1, r2
 8002e54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e58:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002e5c:	6011      	str	r1, [r2, #0]
  return result;
 8002e5e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e62:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f042 0220 	orr.w	r2, r2, #32
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f002 021f 	and.w	r2, r2, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d184      	bne.n	8002d8e <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e84:	4bb6      	ldr	r3, [pc, #728]	@ (8003160 <HAL_RCC_OscConfig+0xfd8>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	f023 020f 	bic.w	r2, r3, #15
 8002e8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	49b1      	ldr	r1, [pc, #708]	@ (8003160 <HAL_RCC_OscConfig+0xfd8>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002e9e:	4bb0      	ldr	r3, [pc, #704]	@ (8003160 <HAL_RCC_OscConfig+0xfd8>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eaa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6a19      	ldr	r1, [r3, #32]
 8002eb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	49a7      	ldr	r1, [pc, #668]	@ (8003160 <HAL_RCC_OscConfig+0xfd8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
 8002ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002ece:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002eea:	601a      	str	r2, [r3, #0]
  return result;
 8002eec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ef4:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	461a      	mov	r2, r3
 8002f08:	2301      	movs	r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd fda6 	bl	8000a5c <HAL_GetTick>
 8002f10:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f14:	e009      	b.n	8002f2a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fd fda1 	bl	8000a5c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e14b      	b.n	80031c2 <HAL_RCC_OscConfig+0x103a>
 8002f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f2e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fa93 f2a3 	rbit	r2, r3
 8002f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f4a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f4e:	601a      	str	r2, [r3, #0]
  return result;
 8002f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f54:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f62:	d802      	bhi.n	8002f6a <HAL_RCC_OscConfig+0xde2>
 8002f64:	4b7e      	ldr	r3, [pc, #504]	@ (8003160 <HAL_RCC_OscConfig+0xfd8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	e027      	b.n	8002fba <HAL_RCC_OscConfig+0xe32>
 8002f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f94:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002f98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8003160 <HAL_RCC_OscConfig+0xfd8>)
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fbe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002fc2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fc6:	6011      	str	r1, [r2, #0]
 8002fc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fcc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	fa92 f1a2 	rbit	r1, r2
 8002fd6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fda:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002fde:	6011      	str	r1, [r2, #0]
  return result;
 8002fe0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fe4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	fab2 f282 	clz	r2, r2
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f042 0220 	orr.w	r2, r2, #32
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f002 021f 	and.w	r2, r2, #31
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d087      	beq.n	8002f16 <HAL_RCC_OscConfig+0xd8e>
 8003006:	e0db      	b.n	80031c0 <HAL_RCC_OscConfig+0x1038>
 8003008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800300c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003010:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800301a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f2a3 	rbit	r2, r3
 8003024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003028:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800302c:	601a      	str	r2, [r3, #0]
  return result;
 800302e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003032:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003036:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003042:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	461a      	mov	r2, r3
 800304a:	2300      	movs	r3, #0
 800304c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fd fd05 	bl	8000a5c <HAL_GetTick>
 8003052:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003056:	e009      	b.n	800306c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fd fd00 	bl	8000a5c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e0aa      	b.n	80031c2 <HAL_RCC_OscConfig+0x103a>
 800306c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003070:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003074:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800307e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800308c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003090:	601a      	str	r2, [r3, #0]
  return result;
 8003092:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003096:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800309a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80030a4:	d802      	bhi.n	80030ac <HAL_RCC_OscConfig+0xf24>
 80030a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003160 <HAL_RCC_OscConfig+0xfd8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	e027      	b.n	80030fc <HAL_RCC_OscConfig+0xf74>
 80030ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030b0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80030b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030be:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	fa93 f2a3 	rbit	r2, r3
 80030c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030cc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80030da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f2:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <HAL_RCC_OscConfig+0xfd8>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003100:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003104:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003108:	6011      	str	r1, [r2, #0]
 800310a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800310e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	fa92 f1a2 	rbit	r1, r2
 8003118:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800311c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003120:	6011      	str	r1, [r2, #0]
  return result;
 8003122:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003126:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	fab2 f282 	clz	r2, r2
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	f042 0220 	orr.w	r2, r2, #32
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	f002 021f 	and.w	r2, r2, #31
 800313c:	2101      	movs	r1, #1
 800313e:	fa01 f202 	lsl.w	r2, r1, r2
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d187      	bne.n	8003058 <HAL_RCC_OscConfig+0xed0>
 8003148:	e03a      	b.n	80031c0 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800314a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800314e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d104      	bne.n	8003164 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e031      	b.n	80031c2 <HAL_RCC_OscConfig+0x103a>
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_RCC_OscConfig+0x1044>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800316c:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <HAL_RCC_OscConfig+0x1044>)
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003174:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003178:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800317c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003180:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	429a      	cmp	r2, r3
 800318a:	d117      	bne.n	80031bc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800318c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003190:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003198:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d10b      	bne.n	80031bc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80031a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031a8:	f003 020f 	and.w	r2, r3, #15
 80031ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b09e      	sub	sp, #120	@ 0x78
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e154      	b.n	8003492 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b89      	ldr	r3, [pc, #548]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b86      	ldr	r3, [pc, #536]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4984      	ldr	r1, [pc, #528]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b82      	ldr	r3, [pc, #520]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e13c      	b.n	8003492 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b7b      	ldr	r3, [pc, #492]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4978      	ldr	r1, [pc, #480]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80cd 	beq.w	80033de <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d137      	bne.n	80032bc <HAL_RCC_ClockConfig+0xec>
 800324c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003250:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800325a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b3f      	cmp	r3, #63	@ 0x3f
 8003264:	d802      	bhi.n	800326c <HAL_RCC_ClockConfig+0x9c>
 8003266:	4b6b      	ldr	r3, [pc, #428]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	e00f      	b.n	800328c <HAL_RCC_ClockConfig+0xbc>
 800326c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003270:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	667b      	str	r3, [r7, #100]	@ 0x64
 800327a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800327e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003280:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003288:	4b62      	ldr	r3, [pc, #392]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003290:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003292:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003294:	fa92 f2a2 	rbit	r2, r2
 8003298:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800329a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800329c:	fab2 f282 	clz	r2, r2
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f042 0220 	orr.w	r2, r2, #32
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f002 021f 	and.w	r2, r2, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d171      	bne.n	800339c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0ea      	b.n	8003492 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d137      	bne.n	8003334 <HAL_RCC_ClockConfig+0x164>
 80032c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80032d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b3f      	cmp	r3, #63	@ 0x3f
 80032dc:	d802      	bhi.n	80032e4 <HAL_RCC_ClockConfig+0x114>
 80032de:	4b4d      	ldr	r3, [pc, #308]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	e00f      	b.n	8003304 <HAL_RCC_ClockConfig+0x134>
 80032e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003300:	4b44      	ldr	r3, [pc, #272]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003308:	63ba      	str	r2, [r7, #56]	@ 0x38
 800330a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800330c:	fa92 f2a2 	rbit	r2, r2
 8003310:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003314:	fab2 f282 	clz	r2, r2
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	f042 0220 	orr.w	r2, r2, #32
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	f002 021f 	and.w	r2, r2, #31
 8003324:	2101      	movs	r1, #1
 8003326:	fa01 f202 	lsl.w	r2, r1, r2
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d135      	bne.n	800339c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0ae      	b.n	8003492 <HAL_RCC_ClockConfig+0x2c2>
 8003334:	2302      	movs	r3, #2
 8003336:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b3f      	cmp	r3, #63	@ 0x3f
 800334a:	d802      	bhi.n	8003352 <HAL_RCC_ClockConfig+0x182>
 800334c:	4b31      	ldr	r3, [pc, #196]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	e00d      	b.n	800336e <HAL_RCC_ClockConfig+0x19e>
 8003352:	2302      	movs	r3, #2
 8003354:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
 800335e:	2302      	movs	r3, #2
 8003360:	623b      	str	r3, [r7, #32]
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	4b2a      	ldr	r3, [pc, #168]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	2202      	movs	r2, #2
 8003370:	61ba      	str	r2, [r7, #24]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	fa92 f2a2 	rbit	r2, r2
 8003378:	617a      	str	r2, [r7, #20]
  return result;
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f042 0220 	orr.w	r2, r2, #32
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f002 021f 	and.w	r2, r2, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e07a      	b.n	8003492 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800339c:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f023 0203 	bic.w	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	491a      	ldr	r1, [pc, #104]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ae:	f7fd fb55 	bl	8000a5c <HAL_GetTick>
 80033b2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b6:	f7fd fb51 	bl	8000a5c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e062      	b.n	8003492 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033cc:	4b11      	ldr	r3, [pc, #68]	@ (8003414 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 020c 	and.w	r2, r3, #12
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	429a      	cmp	r2, r3
 80033dc:	d1eb      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033de:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d215      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ec:	4b08      	ldr	r3, [pc, #32]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f023 0207 	bic.w	r2, r3, #7
 80033f4:	4906      	ldr	r1, [pc, #24]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fc:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <HAL_RCC_ClockConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d006      	beq.n	8003418 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e041      	b.n	8003492 <HAL_RCC_ClockConfig+0x2c2>
 800340e:	bf00      	nop
 8003410:	40022000 	.word	0x40022000
 8003414:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b1d      	ldr	r3, [pc, #116]	@ (800349c <HAL_RCC_ClockConfig+0x2cc>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	491a      	ldr	r1, [pc, #104]	@ (800349c <HAL_RCC_ClockConfig+0x2cc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003442:	4b16      	ldr	r3, [pc, #88]	@ (800349c <HAL_RCC_ClockConfig+0x2cc>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4912      	ldr	r1, [pc, #72]	@ (800349c <HAL_RCC_ClockConfig+0x2cc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003456:	f000 f829 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 800345a:	4601      	mov	r1, r0
 800345c:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <HAL_RCC_ClockConfig+0x2cc>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003464:	22f0      	movs	r2, #240	@ 0xf0
 8003466:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	fa92 f2a2 	rbit	r2, r2
 800346e:	60fa      	str	r2, [r7, #12]
  return result;
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	fab2 f282 	clz	r2, r2
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	40d3      	lsrs	r3, r2
 800347a:	4a09      	ldr	r2, [pc, #36]	@ (80034a0 <HAL_RCC_ClockConfig+0x2d0>)
 800347c:	5cd3      	ldrb	r3, [r2, r3]
 800347e:	fa21 f303 	lsr.w	r3, r1, r3
 8003482:	4a08      	ldr	r2, [pc, #32]	@ (80034a4 <HAL_RCC_ClockConfig+0x2d4>)
 8003484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003486:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <HAL_RCC_ClockConfig+0x2d8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd faa2 	bl	80009d4 <HAL_InitTick>
  
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3778      	adds	r7, #120	@ 0x78
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	08004d50 	.word	0x08004d50
 80034a4:	20000000 	.word	0x20000000
 80034a8:	20000004 	.word	0x20000004

080034ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80034c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x98>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d002      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x30>
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x36>
 80034da:	e029      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034de:	613b      	str	r3, [r7, #16]
      break;
 80034e0:	e029      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	0c9b      	lsrs	r3, r3, #18
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	4a18      	ldr	r2, [pc, #96]	@ (800354c <HAL_RCC_GetSysClockFreq+0xa0>)
 80034ec:	5cd3      	ldrb	r3, [r2, r3]
 80034ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80034f0:	4b14      	ldr	r3, [pc, #80]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x98>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	4a15      	ldr	r2, [pc, #84]	@ (8003550 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003508:	4a0f      	ldr	r2, [pc, #60]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x9c>)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e007      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800351a:	4a0b      	ldr	r2, [pc, #44]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x9c>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	fb02 f303 	mul.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	613b      	str	r3, [r7, #16]
      break;
 800352e:	e002      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003532:	613b      	str	r3, [r7, #16]
      break;
 8003534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003536:	693b      	ldr	r3, [r7, #16]
}
 8003538:	4618      	mov	r0, r3
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40021000 	.word	0x40021000
 8003548:	007a1200 	.word	0x007a1200
 800354c:	08004d68 	.word	0x08004d68
 8003550:	08004d78 	.word	0x08004d78

08003554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003558:	4b03      	ldr	r3, [pc, #12]	@ (8003568 <HAL_RCC_GetHCLKFreq+0x14>)
 800355a:	681b      	ldr	r3, [r3, #0]
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000000 	.word	0x20000000

0800356c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003572:	f7ff ffef 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 8003576:	4601      	mov	r1, r0
 8003578:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003580:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003584:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	fa92 f2a2 	rbit	r2, r2
 800358c:	603a      	str	r2, [r7, #0]
  return result;
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	fab2 f282 	clz	r2, r2
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	40d3      	lsrs	r3, r2
 8003598:	4a04      	ldr	r2, [pc, #16]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800359a:	5cd3      	ldrb	r3, [r2, r3]
 800359c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	08004d60 	.word	0x08004d60

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035b6:	f7ff ffcd 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 80035ba:	4601      	mov	r1, r0
 80035bc:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80035c4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80035c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	fa92 f2a2 	rbit	r2, r2
 80035d0:	603a      	str	r2, [r7, #0]
  return result;
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	fab2 f282 	clz	r2, r2
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	40d3      	lsrs	r3, r2
 80035dc:	4a04      	ldr	r2, [pc, #16]	@ (80035f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80035de:	5cd3      	ldrb	r3, [r2, r3]
 80035e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08004d60 	.word	0x08004d60

080035f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b092      	sub	sp, #72	@ 0x48
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80d2 	beq.w	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003618:	4b4d      	ldr	r3, [pc, #308]	@ (8003750 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10e      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b4a      	ldr	r3, [pc, #296]	@ (8003750 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	4a49      	ldr	r2, [pc, #292]	@ (8003750 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800362e:	61d3      	str	r3, [r2, #28]
 8003630:	4b47      	ldr	r3, [pc, #284]	@ (8003750 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b44      	ldr	r3, [pc, #272]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d118      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364e:	4b41      	ldr	r3, [pc, #260]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a40      	ldr	r2, [pc, #256]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003658:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365a:	f7fd f9ff 	bl	8000a5c <HAL_GetTick>
 800365e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	e008      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fd f9fb 	bl	8000a5c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	@ 0x64
 800366e:	d901      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1d4      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	4b37      	ldr	r3, [pc, #220]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003680:	4b33      	ldr	r3, [pc, #204]	@ (8003750 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003688:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800368a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8082 	beq.w	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800369a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800369c:	429a      	cmp	r2, r3
 800369e:	d07a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003750 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b25      	ldr	r3, [pc, #148]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	461a      	mov	r2, r3
 80036ca:	2301      	movs	r3, #1
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80036dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	461a      	mov	r2, r3
 80036ee:	2300      	movs	r3, #0
 80036f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036f2:	4a17      	ldr	r2, [pc, #92]	@ (8003750 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d049      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fd f9ab 	bl	8000a5c <HAL_GetTick>
 8003706:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	e00a      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fd f9a7 	bl	8000a5c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e17e      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003720:	2302      	movs	r3, #2
 8003722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
 800372c:	2302      	movs	r3, #2
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	61fb      	str	r3, [r7, #28]
  return result;
 8003738:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800374a:	4b01      	ldr	r3, [pc, #4]	@ (8003750 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	e00d      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
 8003758:	10908100 	.word	0x10908100
 800375c:	2302      	movs	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	4b9a      	ldr	r3, [pc, #616]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	2202      	movs	r2, #2
 800376e:	613a      	str	r2, [r7, #16]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	fa92 f2a2 	rbit	r2, r2
 8003776:	60fa      	str	r2, [r7, #12]
  return result;
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	fab2 f282 	clz	r2, r2
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	f002 021f 	and.w	r2, r2, #31
 800378a:	2101      	movs	r1, #1
 800378c:	fa01 f202 	lsl.w	r2, r1, r2
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0b9      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003796:	4b8f      	ldr	r3, [pc, #572]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	498c      	ldr	r1, [pc, #560]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b0:	4b88      	ldr	r3, [pc, #544]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	4a87      	ldr	r2, [pc, #540]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c8:	4b82      	ldr	r3, [pc, #520]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	f023 0203 	bic.w	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	497f      	ldr	r1, [pc, #508]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e6:	4b7b      	ldr	r3, [pc, #492]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	4978      	ldr	r1, [pc, #480]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003804:	4b73      	ldr	r3, [pc, #460]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	4970      	ldr	r1, [pc, #448]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003822:	4b6c      	ldr	r3, [pc, #432]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	f023 0210 	bic.w	r2, r3, #16
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4969      	ldr	r1, [pc, #420]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003830:	4313      	orrs	r3, r2
 8003832:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003840:	4b64      	ldr	r3, [pc, #400]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	4961      	ldr	r1, [pc, #388]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800385e:	4b5d      	ldr	r3, [pc, #372]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	f023 0220 	bic.w	r2, r3, #32
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	495a      	ldr	r1, [pc, #360]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800387c:	4b55      	ldr	r3, [pc, #340]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	4952      	ldr	r1, [pc, #328]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800389a:	4b4e      	ldr	r3, [pc, #312]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	494b      	ldr	r1, [pc, #300]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038b8:	4b46      	ldr	r3, [pc, #280]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	4943      	ldr	r1, [pc, #268]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038d6:	4b3f      	ldr	r3, [pc, #252]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	493c      	ldr	r1, [pc, #240]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038f4:	4b37      	ldr	r3, [pc, #220]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	4934      	ldr	r1, [pc, #208]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003912:	4b30      	ldr	r3, [pc, #192]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003916:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	492d      	ldr	r1, [pc, #180]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003920:	4313      	orrs	r3, r2
 8003922:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003930:	4b28      	ldr	r3, [pc, #160]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393c:	4925      	ldr	r1, [pc, #148]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800394e:	4b21      	ldr	r3, [pc, #132]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	491e      	ldr	r1, [pc, #120]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395c:	4313      	orrs	r3, r2
 800395e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800396c:	4b19      	ldr	r3, [pc, #100]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003978:	4916      	ldr	r1, [pc, #88]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397a:	4313      	orrs	r3, r2
 800397c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800398a:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003996:	490f      	ldr	r1, [pc, #60]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039a8:	4b0a      	ldr	r3, [pc, #40]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ac:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b4:	4907      	ldr	r1, [pc, #28]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039c6:	4b03      	ldr	r3, [pc, #12]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	e002      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039da:	4913      	ldr	r1, [pc, #76]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f8:	490b      	ldr	r1, [pc, #44]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003a0a:	4b07      	ldr	r3, [pc, #28]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a16:	4904      	ldr	r1, [pc, #16]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3748      	adds	r7, #72	@ 0x48
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000

08003a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e040      	b.n	8003ac0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fc fec6 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2224      	movs	r2, #36	@ 0x24
 8003a58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa86 	bl	8003f84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f8af 	bl	8003bdc <UART_SetConfig>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e01b      	b.n	8003ac0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fb05 	bl	80040c8 <UART_CheckIdleState>
 8003abe:	4603      	mov	r3, r0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	@ 0x28
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d177      	bne.n	8003bd0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_UART_Transmit+0x24>
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e070      	b.n	8003bd2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2221      	movs	r2, #33	@ 0x21
 8003afc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afe:	f7fc ffad 	bl	8000a5c <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b1c:	d108      	bne.n	8003b30 <HAL_UART_Transmit+0x68>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d104      	bne.n	8003b30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	e003      	b.n	8003b38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b38:	e02f      	b.n	8003b9a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2200      	movs	r2, #0
 8003b42:	2180      	movs	r1, #128	@ 0x80
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fb67 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e03b      	b.n	8003bd2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	881a      	ldrh	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b6c:	b292      	uxth	r2, r2
 8003b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	3302      	adds	r3, #2
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	e007      	b.n	8003b88 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3301      	adds	r3, #1
 8003b86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1c9      	bne.n	8003b3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2140      	movs	r1, #64	@ 0x40
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fb31 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d004      	beq.n	8003bc6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e005      	b.n	8003bd2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b92      	ldr	r3, [pc, #584]	@ (8003e50 <UART_SetConfig+0x274>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	6979      	ldr	r1, [r7, #20]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a80      	ldr	r2, [pc, #512]	@ (8003e54 <UART_SetConfig+0x278>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d120      	bne.n	8003c9a <UART_SetConfig+0xbe>
 8003c58:	4b7f      	ldr	r3, [pc, #508]	@ (8003e58 <UART_SetConfig+0x27c>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d817      	bhi.n	8003c94 <UART_SetConfig+0xb8>
 8003c64:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <UART_SetConfig+0x90>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c89 	.word	0x08003c89
 8003c74:	08003c8f 	.word	0x08003c8f
 8003c78:	08003c83 	.word	0x08003c83
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e0b5      	b.n	8003dee <UART_SetConfig+0x212>
 8003c82:	2302      	movs	r3, #2
 8003c84:	77fb      	strb	r3, [r7, #31]
 8003c86:	e0b2      	b.n	8003dee <UART_SetConfig+0x212>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e0af      	b.n	8003dee <UART_SetConfig+0x212>
 8003c8e:	2308      	movs	r3, #8
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e0ac      	b.n	8003dee <UART_SetConfig+0x212>
 8003c94:	2310      	movs	r3, #16
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e0a9      	b.n	8003dee <UART_SetConfig+0x212>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6f      	ldr	r2, [pc, #444]	@ (8003e5c <UART_SetConfig+0x280>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d124      	bne.n	8003cee <UART_SetConfig+0x112>
 8003ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8003e58 <UART_SetConfig+0x27c>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cb0:	d011      	beq.n	8003cd6 <UART_SetConfig+0xfa>
 8003cb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cb6:	d817      	bhi.n	8003ce8 <UART_SetConfig+0x10c>
 8003cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cbc:	d011      	beq.n	8003ce2 <UART_SetConfig+0x106>
 8003cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cc2:	d811      	bhi.n	8003ce8 <UART_SetConfig+0x10c>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <UART_SetConfig+0xf4>
 8003cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ccc:	d006      	beq.n	8003cdc <UART_SetConfig+0x100>
 8003cce:	e00b      	b.n	8003ce8 <UART_SetConfig+0x10c>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e08b      	b.n	8003dee <UART_SetConfig+0x212>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e088      	b.n	8003dee <UART_SetConfig+0x212>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e085      	b.n	8003dee <UART_SetConfig+0x212>
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e082      	b.n	8003dee <UART_SetConfig+0x212>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e07f      	b.n	8003dee <UART_SetConfig+0x212>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e60 <UART_SetConfig+0x284>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d124      	bne.n	8003d42 <UART_SetConfig+0x166>
 8003cf8:	4b57      	ldr	r3, [pc, #348]	@ (8003e58 <UART_SetConfig+0x27c>)
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003d00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d04:	d011      	beq.n	8003d2a <UART_SetConfig+0x14e>
 8003d06:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d0a:	d817      	bhi.n	8003d3c <UART_SetConfig+0x160>
 8003d0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d10:	d011      	beq.n	8003d36 <UART_SetConfig+0x15a>
 8003d12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d16:	d811      	bhi.n	8003d3c <UART_SetConfig+0x160>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <UART_SetConfig+0x148>
 8003d1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d20:	d006      	beq.n	8003d30 <UART_SetConfig+0x154>
 8003d22:	e00b      	b.n	8003d3c <UART_SetConfig+0x160>
 8003d24:	2300      	movs	r3, #0
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e061      	b.n	8003dee <UART_SetConfig+0x212>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e05e      	b.n	8003dee <UART_SetConfig+0x212>
 8003d30:	2304      	movs	r3, #4
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e05b      	b.n	8003dee <UART_SetConfig+0x212>
 8003d36:	2308      	movs	r3, #8
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e058      	b.n	8003dee <UART_SetConfig+0x212>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e055      	b.n	8003dee <UART_SetConfig+0x212>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a47      	ldr	r2, [pc, #284]	@ (8003e64 <UART_SetConfig+0x288>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d124      	bne.n	8003d96 <UART_SetConfig+0x1ba>
 8003d4c:	4b42      	ldr	r3, [pc, #264]	@ (8003e58 <UART_SetConfig+0x27c>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d58:	d011      	beq.n	8003d7e <UART_SetConfig+0x1a2>
 8003d5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d5e:	d817      	bhi.n	8003d90 <UART_SetConfig+0x1b4>
 8003d60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d64:	d011      	beq.n	8003d8a <UART_SetConfig+0x1ae>
 8003d66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d6a:	d811      	bhi.n	8003d90 <UART_SetConfig+0x1b4>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <UART_SetConfig+0x19c>
 8003d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d74:	d006      	beq.n	8003d84 <UART_SetConfig+0x1a8>
 8003d76:	e00b      	b.n	8003d90 <UART_SetConfig+0x1b4>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e037      	b.n	8003dee <UART_SetConfig+0x212>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e034      	b.n	8003dee <UART_SetConfig+0x212>
 8003d84:	2304      	movs	r3, #4
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e031      	b.n	8003dee <UART_SetConfig+0x212>
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e02e      	b.n	8003dee <UART_SetConfig+0x212>
 8003d90:	2310      	movs	r3, #16
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e02b      	b.n	8003dee <UART_SetConfig+0x212>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a33      	ldr	r2, [pc, #204]	@ (8003e68 <UART_SetConfig+0x28c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d124      	bne.n	8003dea <UART_SetConfig+0x20e>
 8003da0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e58 <UART_SetConfig+0x27c>)
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003da8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003dac:	d011      	beq.n	8003dd2 <UART_SetConfig+0x1f6>
 8003dae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003db2:	d817      	bhi.n	8003de4 <UART_SetConfig+0x208>
 8003db4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003db8:	d011      	beq.n	8003dde <UART_SetConfig+0x202>
 8003dba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dbe:	d811      	bhi.n	8003de4 <UART_SetConfig+0x208>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <UART_SetConfig+0x1f0>
 8003dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc8:	d006      	beq.n	8003dd8 <UART_SetConfig+0x1fc>
 8003dca:	e00b      	b.n	8003de4 <UART_SetConfig+0x208>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e00d      	b.n	8003dee <UART_SetConfig+0x212>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	77fb      	strb	r3, [r7, #31]
 8003dd6:	e00a      	b.n	8003dee <UART_SetConfig+0x212>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e007      	b.n	8003dee <UART_SetConfig+0x212>
 8003dde:	2308      	movs	r3, #8
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e004      	b.n	8003dee <UART_SetConfig+0x212>
 8003de4:	2310      	movs	r3, #16
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e001      	b.n	8003dee <UART_SetConfig+0x212>
 8003dea:	2310      	movs	r3, #16
 8003dec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df6:	d16b      	bne.n	8003ed0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003df8:	7ffb      	ldrb	r3, [r7, #31]
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d838      	bhi.n	8003e70 <UART_SetConfig+0x294>
 8003dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <UART_SetConfig+0x228>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e29 	.word	0x08003e29
 8003e08:	08003e31 	.word	0x08003e31
 8003e0c:	08003e39 	.word	0x08003e39
 8003e10:	08003e71 	.word	0x08003e71
 8003e14:	08003e3f 	.word	0x08003e3f
 8003e18:	08003e71 	.word	0x08003e71
 8003e1c:	08003e71 	.word	0x08003e71
 8003e20:	08003e71 	.word	0x08003e71
 8003e24:	08003e47 	.word	0x08003e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e28:	f7ff fba0 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 8003e2c:	61b8      	str	r0, [r7, #24]
        break;
 8003e2e:	e024      	b.n	8003e7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e30:	f7ff fbbe 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8003e34:	61b8      	str	r0, [r7, #24]
        break;
 8003e36:	e020      	b.n	8003e7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e38:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <UART_SetConfig+0x290>)
 8003e3a:	61bb      	str	r3, [r7, #24]
        break;
 8003e3c:	e01d      	b.n	8003e7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3e:	f7ff fb35 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8003e42:	61b8      	str	r0, [r7, #24]
        break;
 8003e44:	e019      	b.n	8003e7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e4a:	61bb      	str	r3, [r7, #24]
        break;
 8003e4c:	e015      	b.n	8003e7a <UART_SetConfig+0x29e>
 8003e4e:	bf00      	nop
 8003e50:	efff69f3 	.word	0xefff69f3
 8003e54:	40013800 	.word	0x40013800
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40004400 	.word	0x40004400
 8003e60:	40004800 	.word	0x40004800
 8003e64:	40004c00 	.word	0x40004c00
 8003e68:	40005000 	.word	0x40005000
 8003e6c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	77bb      	strb	r3, [r7, #30]
        break;
 8003e78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d073      	beq.n	8003f68 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	005a      	lsls	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	441a      	add	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b0f      	cmp	r3, #15
 8003e9a:	d916      	bls.n	8003eca <UART_SetConfig+0x2ee>
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea2:	d212      	bcs.n	8003eca <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f023 030f 	bic.w	r3, r3, #15
 8003eac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	89fb      	ldrh	r3, [r7, #14]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	89fa      	ldrh	r2, [r7, #14]
 8003ec6:	60da      	str	r2, [r3, #12]
 8003ec8:	e04e      	b.n	8003f68 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	77bb      	strb	r3, [r7, #30]
 8003ece:	e04b      	b.n	8003f68 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ed0:	7ffb      	ldrb	r3, [r7, #31]
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d827      	bhi.n	8003f26 <UART_SetConfig+0x34a>
 8003ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8003edc <UART_SetConfig+0x300>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003f01 	.word	0x08003f01
 8003ee0:	08003f09 	.word	0x08003f09
 8003ee4:	08003f11 	.word	0x08003f11
 8003ee8:	08003f27 	.word	0x08003f27
 8003eec:	08003f17 	.word	0x08003f17
 8003ef0:	08003f27 	.word	0x08003f27
 8003ef4:	08003f27 	.word	0x08003f27
 8003ef8:	08003f27 	.word	0x08003f27
 8003efc:	08003f1f 	.word	0x08003f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f00:	f7ff fb34 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 8003f04:	61b8      	str	r0, [r7, #24]
        break;
 8003f06:	e013      	b.n	8003f30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f08:	f7ff fb52 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8003f0c:	61b8      	str	r0, [r7, #24]
        break;
 8003f0e:	e00f      	b.n	8003f30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	@ (8003f80 <UART_SetConfig+0x3a4>)
 8003f12:	61bb      	str	r3, [r7, #24]
        break;
 8003f14:	e00c      	b.n	8003f30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f16:	f7ff fac9 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8003f1a:	61b8      	str	r0, [r7, #24]
        break;
 8003f1c:	e008      	b.n	8003f30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f22:	61bb      	str	r3, [r7, #24]
        break;
 8003f24:	e004      	b.n	8003f30 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f2e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d018      	beq.n	8003f68 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	085a      	lsrs	r2, r3, #1
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	441a      	add	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d909      	bls.n	8003f64 <UART_SetConfig+0x388>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f56:	d205      	bcs.n	8003f64 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	e001      	b.n	8003f68 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f74:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	007a1200 	.word	0x007a1200

08003f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01a      	beq.n	800409a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004082:	d10a      	bne.n	800409a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b098      	sub	sp, #96	@ 0x60
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d8:	f7fc fcc0 	bl	8000a5c <HAL_GetTick>
 80040dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d12e      	bne.n	800414a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f4:	2200      	movs	r2, #0
 80040f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f88c 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d021      	beq.n	800414a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800411a:	653b      	str	r3, [r7, #80]	@ 0x50
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004124:	647b      	str	r3, [r7, #68]	@ 0x44
 8004126:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800412a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e6      	bne.n	8004106 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e062      	b.n	8004210 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b04      	cmp	r3, #4
 8004156:	d149      	bne.n	80041ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004158:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004160:	2200      	movs	r2, #0
 8004162:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f856 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d03c      	beq.n	80041ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	623b      	str	r3, [r7, #32]
   return(result);
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004190:	633b      	str	r3, [r7, #48]	@ 0x30
 8004192:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e6      	bne.n	8004172 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3308      	adds	r3, #8
 80041aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3308      	adds	r3, #8
 80041c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041c4:	61fa      	str	r2, [r7, #28]
 80041c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	617b      	str	r3, [r7, #20]
   return(result);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e5      	bne.n	80041a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e011      	b.n	8004210 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3758      	adds	r7, #88	@ 0x58
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004228:	e04f      	b.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d04b      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fc fc13 	bl	8000a5c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <UART_WaitOnFlagUntilTimeout+0x30>
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e04e      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d037      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b80      	cmp	r3, #128	@ 0x80
 800425e:	d034      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b40      	cmp	r3, #64	@ 0x40
 8004264:	d031      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b08      	cmp	r3, #8
 8004272:	d110      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2208      	movs	r2, #8
 800427a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f838 	bl	80042f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2208      	movs	r2, #8
 8004286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e029      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a4:	d111      	bne.n	80042ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f81e 	bl	80042f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e00f      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4013      	ands	r3, r2
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	bf0c      	ite	eq
 80042da:	2301      	moveq	r3, #1
 80042dc:	2300      	movne	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d0a0      	beq.n	800422a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b095      	sub	sp, #84	@ 0x54
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800430e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004318:	643b      	str	r3, [r7, #64]	@ 0x40
 800431a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800431e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e6      	bne.n	80042fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3308      	adds	r3, #8
 8004332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	61fb      	str	r3, [r7, #28]
   return(result);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800434c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800434e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004364:	2b01      	cmp	r3, #1
 8004366:	d118      	bne.n	800439a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	60bb      	str	r3, [r7, #8]
   return(result);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f023 0310 	bic.w	r3, r3, #16
 800437c:	647b      	str	r3, [r7, #68]	@ 0x44
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6979      	ldr	r1, [r7, #20]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	613b      	str	r3, [r7, #16]
   return(result);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e6      	bne.n	8004368 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043ae:	bf00      	nop
 80043b0:	3754      	adds	r7, #84	@ 0x54
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <sniprintf>:
 80043bc:	b40c      	push	{r2, r3}
 80043be:	b530      	push	{r4, r5, lr}
 80043c0:	4b18      	ldr	r3, [pc, #96]	@ (8004424 <sniprintf+0x68>)
 80043c2:	1e0c      	subs	r4, r1, #0
 80043c4:	681d      	ldr	r5, [r3, #0]
 80043c6:	b09d      	sub	sp, #116	@ 0x74
 80043c8:	da08      	bge.n	80043dc <sniprintf+0x20>
 80043ca:	238b      	movs	r3, #139	@ 0x8b
 80043cc:	602b      	str	r3, [r5, #0]
 80043ce:	f04f 30ff 	mov.w	r0, #4294967295
 80043d2:	b01d      	add	sp, #116	@ 0x74
 80043d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043d8:	b002      	add	sp, #8
 80043da:	4770      	bx	lr
 80043dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80043e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80043ea:	bf14      	ite	ne
 80043ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80043f0:	4623      	moveq	r3, r4
 80043f2:	9304      	str	r3, [sp, #16]
 80043f4:	9307      	str	r3, [sp, #28]
 80043f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043fa:	9002      	str	r0, [sp, #8]
 80043fc:	9006      	str	r0, [sp, #24]
 80043fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004402:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004404:	ab21      	add	r3, sp, #132	@ 0x84
 8004406:	a902      	add	r1, sp, #8
 8004408:	4628      	mov	r0, r5
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	f000 f994 	bl	8004738 <_svfiprintf_r>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	bfbc      	itt	lt
 8004414:	238b      	movlt	r3, #139	@ 0x8b
 8004416:	602b      	strlt	r3, [r5, #0]
 8004418:	2c00      	cmp	r4, #0
 800441a:	d0da      	beq.n	80043d2 <sniprintf+0x16>
 800441c:	9b02      	ldr	r3, [sp, #8]
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e7d6      	b.n	80043d2 <sniprintf+0x16>
 8004424:	2000000c 	.word	0x2000000c

08004428 <memset>:
 8004428:	4402      	add	r2, r0
 800442a:	4603      	mov	r3, r0
 800442c:	4293      	cmp	r3, r2
 800442e:	d100      	bne.n	8004432 <memset+0xa>
 8004430:	4770      	bx	lr
 8004432:	f803 1b01 	strb.w	r1, [r3], #1
 8004436:	e7f9      	b.n	800442c <memset+0x4>

08004438 <__errno>:
 8004438:	4b01      	ldr	r3, [pc, #4]	@ (8004440 <__errno+0x8>)
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	2000000c 	.word	0x2000000c

08004444 <__libc_init_array>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	4d0d      	ldr	r5, [pc, #52]	@ (800447c <__libc_init_array+0x38>)
 8004448:	4c0d      	ldr	r4, [pc, #52]	@ (8004480 <__libc_init_array+0x3c>)
 800444a:	1b64      	subs	r4, r4, r5
 800444c:	10a4      	asrs	r4, r4, #2
 800444e:	2600      	movs	r6, #0
 8004450:	42a6      	cmp	r6, r4
 8004452:	d109      	bne.n	8004468 <__libc_init_array+0x24>
 8004454:	4d0b      	ldr	r5, [pc, #44]	@ (8004484 <__libc_init_array+0x40>)
 8004456:	4c0c      	ldr	r4, [pc, #48]	@ (8004488 <__libc_init_array+0x44>)
 8004458:	f000 fc64 	bl	8004d24 <_init>
 800445c:	1b64      	subs	r4, r4, r5
 800445e:	10a4      	asrs	r4, r4, #2
 8004460:	2600      	movs	r6, #0
 8004462:	42a6      	cmp	r6, r4
 8004464:	d105      	bne.n	8004472 <__libc_init_array+0x2e>
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	f855 3b04 	ldr.w	r3, [r5], #4
 800446c:	4798      	blx	r3
 800446e:	3601      	adds	r6, #1
 8004470:	e7ee      	b.n	8004450 <__libc_init_array+0xc>
 8004472:	f855 3b04 	ldr.w	r3, [r5], #4
 8004476:	4798      	blx	r3
 8004478:	3601      	adds	r6, #1
 800447a:	e7f2      	b.n	8004462 <__libc_init_array+0x1e>
 800447c:	08004dc4 	.word	0x08004dc4
 8004480:	08004dc4 	.word	0x08004dc4
 8004484:	08004dc4 	.word	0x08004dc4
 8004488:	08004dc8 	.word	0x08004dc8

0800448c <__retarget_lock_acquire_recursive>:
 800448c:	4770      	bx	lr

0800448e <__retarget_lock_release_recursive>:
 800448e:	4770      	bx	lr

08004490 <_free_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4605      	mov	r5, r0
 8004494:	2900      	cmp	r1, #0
 8004496:	d041      	beq.n	800451c <_free_r+0x8c>
 8004498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800449c:	1f0c      	subs	r4, r1, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bfb8      	it	lt
 80044a2:	18e4      	addlt	r4, r4, r3
 80044a4:	f000 f8e0 	bl	8004668 <__malloc_lock>
 80044a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004520 <_free_r+0x90>)
 80044aa:	6813      	ldr	r3, [r2, #0]
 80044ac:	b933      	cbnz	r3, 80044bc <_free_r+0x2c>
 80044ae:	6063      	str	r3, [r4, #4]
 80044b0:	6014      	str	r4, [r2, #0]
 80044b2:	4628      	mov	r0, r5
 80044b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044b8:	f000 b8dc 	b.w	8004674 <__malloc_unlock>
 80044bc:	42a3      	cmp	r3, r4
 80044be:	d908      	bls.n	80044d2 <_free_r+0x42>
 80044c0:	6820      	ldr	r0, [r4, #0]
 80044c2:	1821      	adds	r1, r4, r0
 80044c4:	428b      	cmp	r3, r1
 80044c6:	bf01      	itttt	eq
 80044c8:	6819      	ldreq	r1, [r3, #0]
 80044ca:	685b      	ldreq	r3, [r3, #4]
 80044cc:	1809      	addeq	r1, r1, r0
 80044ce:	6021      	streq	r1, [r4, #0]
 80044d0:	e7ed      	b.n	80044ae <_free_r+0x1e>
 80044d2:	461a      	mov	r2, r3
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	b10b      	cbz	r3, 80044dc <_free_r+0x4c>
 80044d8:	42a3      	cmp	r3, r4
 80044da:	d9fa      	bls.n	80044d2 <_free_r+0x42>
 80044dc:	6811      	ldr	r1, [r2, #0]
 80044de:	1850      	adds	r0, r2, r1
 80044e0:	42a0      	cmp	r0, r4
 80044e2:	d10b      	bne.n	80044fc <_free_r+0x6c>
 80044e4:	6820      	ldr	r0, [r4, #0]
 80044e6:	4401      	add	r1, r0
 80044e8:	1850      	adds	r0, r2, r1
 80044ea:	4283      	cmp	r3, r0
 80044ec:	6011      	str	r1, [r2, #0]
 80044ee:	d1e0      	bne.n	80044b2 <_free_r+0x22>
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	6053      	str	r3, [r2, #4]
 80044f6:	4408      	add	r0, r1
 80044f8:	6010      	str	r0, [r2, #0]
 80044fa:	e7da      	b.n	80044b2 <_free_r+0x22>
 80044fc:	d902      	bls.n	8004504 <_free_r+0x74>
 80044fe:	230c      	movs	r3, #12
 8004500:	602b      	str	r3, [r5, #0]
 8004502:	e7d6      	b.n	80044b2 <_free_r+0x22>
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	1821      	adds	r1, r4, r0
 8004508:	428b      	cmp	r3, r1
 800450a:	bf04      	itt	eq
 800450c:	6819      	ldreq	r1, [r3, #0]
 800450e:	685b      	ldreq	r3, [r3, #4]
 8004510:	6063      	str	r3, [r4, #4]
 8004512:	bf04      	itt	eq
 8004514:	1809      	addeq	r1, r1, r0
 8004516:	6021      	streq	r1, [r4, #0]
 8004518:	6054      	str	r4, [r2, #4]
 800451a:	e7ca      	b.n	80044b2 <_free_r+0x22>
 800451c:	bd38      	pop	{r3, r4, r5, pc}
 800451e:	bf00      	nop
 8004520:	200002c0 	.word	0x200002c0

08004524 <sbrk_aligned>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	4e0f      	ldr	r6, [pc, #60]	@ (8004564 <sbrk_aligned+0x40>)
 8004528:	460c      	mov	r4, r1
 800452a:	6831      	ldr	r1, [r6, #0]
 800452c:	4605      	mov	r5, r0
 800452e:	b911      	cbnz	r1, 8004536 <sbrk_aligned+0x12>
 8004530:	f000 fba4 	bl	8004c7c <_sbrk_r>
 8004534:	6030      	str	r0, [r6, #0]
 8004536:	4621      	mov	r1, r4
 8004538:	4628      	mov	r0, r5
 800453a:	f000 fb9f 	bl	8004c7c <_sbrk_r>
 800453e:	1c43      	adds	r3, r0, #1
 8004540:	d103      	bne.n	800454a <sbrk_aligned+0x26>
 8004542:	f04f 34ff 	mov.w	r4, #4294967295
 8004546:	4620      	mov	r0, r4
 8004548:	bd70      	pop	{r4, r5, r6, pc}
 800454a:	1cc4      	adds	r4, r0, #3
 800454c:	f024 0403 	bic.w	r4, r4, #3
 8004550:	42a0      	cmp	r0, r4
 8004552:	d0f8      	beq.n	8004546 <sbrk_aligned+0x22>
 8004554:	1a21      	subs	r1, r4, r0
 8004556:	4628      	mov	r0, r5
 8004558:	f000 fb90 	bl	8004c7c <_sbrk_r>
 800455c:	3001      	adds	r0, #1
 800455e:	d1f2      	bne.n	8004546 <sbrk_aligned+0x22>
 8004560:	e7ef      	b.n	8004542 <sbrk_aligned+0x1e>
 8004562:	bf00      	nop
 8004564:	200002bc 	.word	0x200002bc

08004568 <_malloc_r>:
 8004568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800456c:	1ccd      	adds	r5, r1, #3
 800456e:	f025 0503 	bic.w	r5, r5, #3
 8004572:	3508      	adds	r5, #8
 8004574:	2d0c      	cmp	r5, #12
 8004576:	bf38      	it	cc
 8004578:	250c      	movcc	r5, #12
 800457a:	2d00      	cmp	r5, #0
 800457c:	4606      	mov	r6, r0
 800457e:	db01      	blt.n	8004584 <_malloc_r+0x1c>
 8004580:	42a9      	cmp	r1, r5
 8004582:	d904      	bls.n	800458e <_malloc_r+0x26>
 8004584:	230c      	movs	r3, #12
 8004586:	6033      	str	r3, [r6, #0]
 8004588:	2000      	movs	r0, #0
 800458a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800458e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004664 <_malloc_r+0xfc>
 8004592:	f000 f869 	bl	8004668 <__malloc_lock>
 8004596:	f8d8 3000 	ldr.w	r3, [r8]
 800459a:	461c      	mov	r4, r3
 800459c:	bb44      	cbnz	r4, 80045f0 <_malloc_r+0x88>
 800459e:	4629      	mov	r1, r5
 80045a0:	4630      	mov	r0, r6
 80045a2:	f7ff ffbf 	bl	8004524 <sbrk_aligned>
 80045a6:	1c43      	adds	r3, r0, #1
 80045a8:	4604      	mov	r4, r0
 80045aa:	d158      	bne.n	800465e <_malloc_r+0xf6>
 80045ac:	f8d8 4000 	ldr.w	r4, [r8]
 80045b0:	4627      	mov	r7, r4
 80045b2:	2f00      	cmp	r7, #0
 80045b4:	d143      	bne.n	800463e <_malloc_r+0xd6>
 80045b6:	2c00      	cmp	r4, #0
 80045b8:	d04b      	beq.n	8004652 <_malloc_r+0xea>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	4639      	mov	r1, r7
 80045be:	4630      	mov	r0, r6
 80045c0:	eb04 0903 	add.w	r9, r4, r3
 80045c4:	f000 fb5a 	bl	8004c7c <_sbrk_r>
 80045c8:	4581      	cmp	r9, r0
 80045ca:	d142      	bne.n	8004652 <_malloc_r+0xea>
 80045cc:	6821      	ldr	r1, [r4, #0]
 80045ce:	1a6d      	subs	r5, r5, r1
 80045d0:	4629      	mov	r1, r5
 80045d2:	4630      	mov	r0, r6
 80045d4:	f7ff ffa6 	bl	8004524 <sbrk_aligned>
 80045d8:	3001      	adds	r0, #1
 80045da:	d03a      	beq.n	8004652 <_malloc_r+0xea>
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	442b      	add	r3, r5
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	f8d8 3000 	ldr.w	r3, [r8]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	bb62      	cbnz	r2, 8004644 <_malloc_r+0xdc>
 80045ea:	f8c8 7000 	str.w	r7, [r8]
 80045ee:	e00f      	b.n	8004610 <_malloc_r+0xa8>
 80045f0:	6822      	ldr	r2, [r4, #0]
 80045f2:	1b52      	subs	r2, r2, r5
 80045f4:	d420      	bmi.n	8004638 <_malloc_r+0xd0>
 80045f6:	2a0b      	cmp	r2, #11
 80045f8:	d917      	bls.n	800462a <_malloc_r+0xc2>
 80045fa:	1961      	adds	r1, r4, r5
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	6025      	str	r5, [r4, #0]
 8004600:	bf18      	it	ne
 8004602:	6059      	strne	r1, [r3, #4]
 8004604:	6863      	ldr	r3, [r4, #4]
 8004606:	bf08      	it	eq
 8004608:	f8c8 1000 	streq.w	r1, [r8]
 800460c:	5162      	str	r2, [r4, r5]
 800460e:	604b      	str	r3, [r1, #4]
 8004610:	4630      	mov	r0, r6
 8004612:	f000 f82f 	bl	8004674 <__malloc_unlock>
 8004616:	f104 000b 	add.w	r0, r4, #11
 800461a:	1d23      	adds	r3, r4, #4
 800461c:	f020 0007 	bic.w	r0, r0, #7
 8004620:	1ac2      	subs	r2, r0, r3
 8004622:	bf1c      	itt	ne
 8004624:	1a1b      	subne	r3, r3, r0
 8004626:	50a3      	strne	r3, [r4, r2]
 8004628:	e7af      	b.n	800458a <_malloc_r+0x22>
 800462a:	6862      	ldr	r2, [r4, #4]
 800462c:	42a3      	cmp	r3, r4
 800462e:	bf0c      	ite	eq
 8004630:	f8c8 2000 	streq.w	r2, [r8]
 8004634:	605a      	strne	r2, [r3, #4]
 8004636:	e7eb      	b.n	8004610 <_malloc_r+0xa8>
 8004638:	4623      	mov	r3, r4
 800463a:	6864      	ldr	r4, [r4, #4]
 800463c:	e7ae      	b.n	800459c <_malloc_r+0x34>
 800463e:	463c      	mov	r4, r7
 8004640:	687f      	ldr	r7, [r7, #4]
 8004642:	e7b6      	b.n	80045b2 <_malloc_r+0x4a>
 8004644:	461a      	mov	r2, r3
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	42a3      	cmp	r3, r4
 800464a:	d1fb      	bne.n	8004644 <_malloc_r+0xdc>
 800464c:	2300      	movs	r3, #0
 800464e:	6053      	str	r3, [r2, #4]
 8004650:	e7de      	b.n	8004610 <_malloc_r+0xa8>
 8004652:	230c      	movs	r3, #12
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	4630      	mov	r0, r6
 8004658:	f000 f80c 	bl	8004674 <__malloc_unlock>
 800465c:	e794      	b.n	8004588 <_malloc_r+0x20>
 800465e:	6005      	str	r5, [r0, #0]
 8004660:	e7d6      	b.n	8004610 <_malloc_r+0xa8>
 8004662:	bf00      	nop
 8004664:	200002c0 	.word	0x200002c0

08004668 <__malloc_lock>:
 8004668:	4801      	ldr	r0, [pc, #4]	@ (8004670 <__malloc_lock+0x8>)
 800466a:	f7ff bf0f 	b.w	800448c <__retarget_lock_acquire_recursive>
 800466e:	bf00      	nop
 8004670:	200002b8 	.word	0x200002b8

08004674 <__malloc_unlock>:
 8004674:	4801      	ldr	r0, [pc, #4]	@ (800467c <__malloc_unlock+0x8>)
 8004676:	f7ff bf0a 	b.w	800448e <__retarget_lock_release_recursive>
 800467a:	bf00      	nop
 800467c:	200002b8 	.word	0x200002b8

08004680 <__ssputs_r>:
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	688e      	ldr	r6, [r1, #8]
 8004686:	461f      	mov	r7, r3
 8004688:	42be      	cmp	r6, r7
 800468a:	680b      	ldr	r3, [r1, #0]
 800468c:	4682      	mov	sl, r0
 800468e:	460c      	mov	r4, r1
 8004690:	4690      	mov	r8, r2
 8004692:	d82d      	bhi.n	80046f0 <__ssputs_r+0x70>
 8004694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004698:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800469c:	d026      	beq.n	80046ec <__ssputs_r+0x6c>
 800469e:	6965      	ldr	r5, [r4, #20]
 80046a0:	6909      	ldr	r1, [r1, #16]
 80046a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046a6:	eba3 0901 	sub.w	r9, r3, r1
 80046aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046ae:	1c7b      	adds	r3, r7, #1
 80046b0:	444b      	add	r3, r9
 80046b2:	106d      	asrs	r5, r5, #1
 80046b4:	429d      	cmp	r5, r3
 80046b6:	bf38      	it	cc
 80046b8:	461d      	movcc	r5, r3
 80046ba:	0553      	lsls	r3, r2, #21
 80046bc:	d527      	bpl.n	800470e <__ssputs_r+0x8e>
 80046be:	4629      	mov	r1, r5
 80046c0:	f7ff ff52 	bl	8004568 <_malloc_r>
 80046c4:	4606      	mov	r6, r0
 80046c6:	b360      	cbz	r0, 8004722 <__ssputs_r+0xa2>
 80046c8:	6921      	ldr	r1, [r4, #16]
 80046ca:	464a      	mov	r2, r9
 80046cc:	f000 fae6 	bl	8004c9c <memcpy>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046da:	81a3      	strh	r3, [r4, #12]
 80046dc:	6126      	str	r6, [r4, #16]
 80046de:	6165      	str	r5, [r4, #20]
 80046e0:	444e      	add	r6, r9
 80046e2:	eba5 0509 	sub.w	r5, r5, r9
 80046e6:	6026      	str	r6, [r4, #0]
 80046e8:	60a5      	str	r5, [r4, #8]
 80046ea:	463e      	mov	r6, r7
 80046ec:	42be      	cmp	r6, r7
 80046ee:	d900      	bls.n	80046f2 <__ssputs_r+0x72>
 80046f0:	463e      	mov	r6, r7
 80046f2:	6820      	ldr	r0, [r4, #0]
 80046f4:	4632      	mov	r2, r6
 80046f6:	4641      	mov	r1, r8
 80046f8:	f000 faa6 	bl	8004c48 <memmove>
 80046fc:	68a3      	ldr	r3, [r4, #8]
 80046fe:	1b9b      	subs	r3, r3, r6
 8004700:	60a3      	str	r3, [r4, #8]
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	4433      	add	r3, r6
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	2000      	movs	r0, #0
 800470a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470e:	462a      	mov	r2, r5
 8004710:	f000 fad2 	bl	8004cb8 <_realloc_r>
 8004714:	4606      	mov	r6, r0
 8004716:	2800      	cmp	r0, #0
 8004718:	d1e0      	bne.n	80046dc <__ssputs_r+0x5c>
 800471a:	6921      	ldr	r1, [r4, #16]
 800471c:	4650      	mov	r0, sl
 800471e:	f7ff feb7 	bl	8004490 <_free_r>
 8004722:	230c      	movs	r3, #12
 8004724:	f8ca 3000 	str.w	r3, [sl]
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800472e:	81a3      	strh	r3, [r4, #12]
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	e7e9      	b.n	800470a <__ssputs_r+0x8a>
	...

08004738 <_svfiprintf_r>:
 8004738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473c:	4698      	mov	r8, r3
 800473e:	898b      	ldrh	r3, [r1, #12]
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	b09d      	sub	sp, #116	@ 0x74
 8004744:	4607      	mov	r7, r0
 8004746:	460d      	mov	r5, r1
 8004748:	4614      	mov	r4, r2
 800474a:	d510      	bpl.n	800476e <_svfiprintf_r+0x36>
 800474c:	690b      	ldr	r3, [r1, #16]
 800474e:	b973      	cbnz	r3, 800476e <_svfiprintf_r+0x36>
 8004750:	2140      	movs	r1, #64	@ 0x40
 8004752:	f7ff ff09 	bl	8004568 <_malloc_r>
 8004756:	6028      	str	r0, [r5, #0]
 8004758:	6128      	str	r0, [r5, #16]
 800475a:	b930      	cbnz	r0, 800476a <_svfiprintf_r+0x32>
 800475c:	230c      	movs	r3, #12
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	b01d      	add	sp, #116	@ 0x74
 8004766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476a:	2340      	movs	r3, #64	@ 0x40
 800476c:	616b      	str	r3, [r5, #20]
 800476e:	2300      	movs	r3, #0
 8004770:	9309      	str	r3, [sp, #36]	@ 0x24
 8004772:	2320      	movs	r3, #32
 8004774:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004778:	f8cd 800c 	str.w	r8, [sp, #12]
 800477c:	2330      	movs	r3, #48	@ 0x30
 800477e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800491c <_svfiprintf_r+0x1e4>
 8004782:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004786:	f04f 0901 	mov.w	r9, #1
 800478a:	4623      	mov	r3, r4
 800478c:	469a      	mov	sl, r3
 800478e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004792:	b10a      	cbz	r2, 8004798 <_svfiprintf_r+0x60>
 8004794:	2a25      	cmp	r2, #37	@ 0x25
 8004796:	d1f9      	bne.n	800478c <_svfiprintf_r+0x54>
 8004798:	ebba 0b04 	subs.w	fp, sl, r4
 800479c:	d00b      	beq.n	80047b6 <_svfiprintf_r+0x7e>
 800479e:	465b      	mov	r3, fp
 80047a0:	4622      	mov	r2, r4
 80047a2:	4629      	mov	r1, r5
 80047a4:	4638      	mov	r0, r7
 80047a6:	f7ff ff6b 	bl	8004680 <__ssputs_r>
 80047aa:	3001      	adds	r0, #1
 80047ac:	f000 80a7 	beq.w	80048fe <_svfiprintf_r+0x1c6>
 80047b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047b2:	445a      	add	r2, fp
 80047b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80047b6:	f89a 3000 	ldrb.w	r3, [sl]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 809f 	beq.w	80048fe <_svfiprintf_r+0x1c6>
 80047c0:	2300      	movs	r3, #0
 80047c2:	f04f 32ff 	mov.w	r2, #4294967295
 80047c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ca:	f10a 0a01 	add.w	sl, sl, #1
 80047ce:	9304      	str	r3, [sp, #16]
 80047d0:	9307      	str	r3, [sp, #28]
 80047d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80047d8:	4654      	mov	r4, sl
 80047da:	2205      	movs	r2, #5
 80047dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e0:	484e      	ldr	r0, [pc, #312]	@ (800491c <_svfiprintf_r+0x1e4>)
 80047e2:	f7fb fd05 	bl	80001f0 <memchr>
 80047e6:	9a04      	ldr	r2, [sp, #16]
 80047e8:	b9d8      	cbnz	r0, 8004822 <_svfiprintf_r+0xea>
 80047ea:	06d0      	lsls	r0, r2, #27
 80047ec:	bf44      	itt	mi
 80047ee:	2320      	movmi	r3, #32
 80047f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047f4:	0711      	lsls	r1, r2, #28
 80047f6:	bf44      	itt	mi
 80047f8:	232b      	movmi	r3, #43	@ 0x2b
 80047fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004802:	2b2a      	cmp	r3, #42	@ 0x2a
 8004804:	d015      	beq.n	8004832 <_svfiprintf_r+0xfa>
 8004806:	9a07      	ldr	r2, [sp, #28]
 8004808:	4654      	mov	r4, sl
 800480a:	2000      	movs	r0, #0
 800480c:	f04f 0c0a 	mov.w	ip, #10
 8004810:	4621      	mov	r1, r4
 8004812:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004816:	3b30      	subs	r3, #48	@ 0x30
 8004818:	2b09      	cmp	r3, #9
 800481a:	d94b      	bls.n	80048b4 <_svfiprintf_r+0x17c>
 800481c:	b1b0      	cbz	r0, 800484c <_svfiprintf_r+0x114>
 800481e:	9207      	str	r2, [sp, #28]
 8004820:	e014      	b.n	800484c <_svfiprintf_r+0x114>
 8004822:	eba0 0308 	sub.w	r3, r0, r8
 8004826:	fa09 f303 	lsl.w	r3, r9, r3
 800482a:	4313      	orrs	r3, r2
 800482c:	9304      	str	r3, [sp, #16]
 800482e:	46a2      	mov	sl, r4
 8004830:	e7d2      	b.n	80047d8 <_svfiprintf_r+0xa0>
 8004832:	9b03      	ldr	r3, [sp, #12]
 8004834:	1d19      	adds	r1, r3, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	9103      	str	r1, [sp, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	bfbb      	ittet	lt
 800483e:	425b      	neglt	r3, r3
 8004840:	f042 0202 	orrlt.w	r2, r2, #2
 8004844:	9307      	strge	r3, [sp, #28]
 8004846:	9307      	strlt	r3, [sp, #28]
 8004848:	bfb8      	it	lt
 800484a:	9204      	strlt	r2, [sp, #16]
 800484c:	7823      	ldrb	r3, [r4, #0]
 800484e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004850:	d10a      	bne.n	8004868 <_svfiprintf_r+0x130>
 8004852:	7863      	ldrb	r3, [r4, #1]
 8004854:	2b2a      	cmp	r3, #42	@ 0x2a
 8004856:	d132      	bne.n	80048be <_svfiprintf_r+0x186>
 8004858:	9b03      	ldr	r3, [sp, #12]
 800485a:	1d1a      	adds	r2, r3, #4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	9203      	str	r2, [sp, #12]
 8004860:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004864:	3402      	adds	r4, #2
 8004866:	9305      	str	r3, [sp, #20]
 8004868:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800492c <_svfiprintf_r+0x1f4>
 800486c:	7821      	ldrb	r1, [r4, #0]
 800486e:	2203      	movs	r2, #3
 8004870:	4650      	mov	r0, sl
 8004872:	f7fb fcbd 	bl	80001f0 <memchr>
 8004876:	b138      	cbz	r0, 8004888 <_svfiprintf_r+0x150>
 8004878:	9b04      	ldr	r3, [sp, #16]
 800487a:	eba0 000a 	sub.w	r0, r0, sl
 800487e:	2240      	movs	r2, #64	@ 0x40
 8004880:	4082      	lsls	r2, r0
 8004882:	4313      	orrs	r3, r2
 8004884:	3401      	adds	r4, #1
 8004886:	9304      	str	r3, [sp, #16]
 8004888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800488c:	4824      	ldr	r0, [pc, #144]	@ (8004920 <_svfiprintf_r+0x1e8>)
 800488e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004892:	2206      	movs	r2, #6
 8004894:	f7fb fcac 	bl	80001f0 <memchr>
 8004898:	2800      	cmp	r0, #0
 800489a:	d036      	beq.n	800490a <_svfiprintf_r+0x1d2>
 800489c:	4b21      	ldr	r3, [pc, #132]	@ (8004924 <_svfiprintf_r+0x1ec>)
 800489e:	bb1b      	cbnz	r3, 80048e8 <_svfiprintf_r+0x1b0>
 80048a0:	9b03      	ldr	r3, [sp, #12]
 80048a2:	3307      	adds	r3, #7
 80048a4:	f023 0307 	bic.w	r3, r3, #7
 80048a8:	3308      	adds	r3, #8
 80048aa:	9303      	str	r3, [sp, #12]
 80048ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ae:	4433      	add	r3, r6
 80048b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80048b2:	e76a      	b.n	800478a <_svfiprintf_r+0x52>
 80048b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80048b8:	460c      	mov	r4, r1
 80048ba:	2001      	movs	r0, #1
 80048bc:	e7a8      	b.n	8004810 <_svfiprintf_r+0xd8>
 80048be:	2300      	movs	r3, #0
 80048c0:	3401      	adds	r4, #1
 80048c2:	9305      	str	r3, [sp, #20]
 80048c4:	4619      	mov	r1, r3
 80048c6:	f04f 0c0a 	mov.w	ip, #10
 80048ca:	4620      	mov	r0, r4
 80048cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048d0:	3a30      	subs	r2, #48	@ 0x30
 80048d2:	2a09      	cmp	r2, #9
 80048d4:	d903      	bls.n	80048de <_svfiprintf_r+0x1a6>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0c6      	beq.n	8004868 <_svfiprintf_r+0x130>
 80048da:	9105      	str	r1, [sp, #20]
 80048dc:	e7c4      	b.n	8004868 <_svfiprintf_r+0x130>
 80048de:	fb0c 2101 	mla	r1, ip, r1, r2
 80048e2:	4604      	mov	r4, r0
 80048e4:	2301      	movs	r3, #1
 80048e6:	e7f0      	b.n	80048ca <_svfiprintf_r+0x192>
 80048e8:	ab03      	add	r3, sp, #12
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	462a      	mov	r2, r5
 80048ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004928 <_svfiprintf_r+0x1f0>)
 80048f0:	a904      	add	r1, sp, #16
 80048f2:	4638      	mov	r0, r7
 80048f4:	f3af 8000 	nop.w
 80048f8:	1c42      	adds	r2, r0, #1
 80048fa:	4606      	mov	r6, r0
 80048fc:	d1d6      	bne.n	80048ac <_svfiprintf_r+0x174>
 80048fe:	89ab      	ldrh	r3, [r5, #12]
 8004900:	065b      	lsls	r3, r3, #25
 8004902:	f53f af2d 	bmi.w	8004760 <_svfiprintf_r+0x28>
 8004906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004908:	e72c      	b.n	8004764 <_svfiprintf_r+0x2c>
 800490a:	ab03      	add	r3, sp, #12
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	462a      	mov	r2, r5
 8004910:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <_svfiprintf_r+0x1f0>)
 8004912:	a904      	add	r1, sp, #16
 8004914:	4638      	mov	r0, r7
 8004916:	f000 f879 	bl	8004a0c <_printf_i>
 800491a:	e7ed      	b.n	80048f8 <_svfiprintf_r+0x1c0>
 800491c:	08004d88 	.word	0x08004d88
 8004920:	08004d92 	.word	0x08004d92
 8004924:	00000000 	.word	0x00000000
 8004928:	08004681 	.word	0x08004681
 800492c:	08004d8e 	.word	0x08004d8e

08004930 <_printf_common>:
 8004930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004934:	4616      	mov	r6, r2
 8004936:	4698      	mov	r8, r3
 8004938:	688a      	ldr	r2, [r1, #8]
 800493a:	690b      	ldr	r3, [r1, #16]
 800493c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004940:	4293      	cmp	r3, r2
 8004942:	bfb8      	it	lt
 8004944:	4613      	movlt	r3, r2
 8004946:	6033      	str	r3, [r6, #0]
 8004948:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800494c:	4607      	mov	r7, r0
 800494e:	460c      	mov	r4, r1
 8004950:	b10a      	cbz	r2, 8004956 <_printf_common+0x26>
 8004952:	3301      	adds	r3, #1
 8004954:	6033      	str	r3, [r6, #0]
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	0699      	lsls	r1, r3, #26
 800495a:	bf42      	ittt	mi
 800495c:	6833      	ldrmi	r3, [r6, #0]
 800495e:	3302      	addmi	r3, #2
 8004960:	6033      	strmi	r3, [r6, #0]
 8004962:	6825      	ldr	r5, [r4, #0]
 8004964:	f015 0506 	ands.w	r5, r5, #6
 8004968:	d106      	bne.n	8004978 <_printf_common+0x48>
 800496a:	f104 0a19 	add.w	sl, r4, #25
 800496e:	68e3      	ldr	r3, [r4, #12]
 8004970:	6832      	ldr	r2, [r6, #0]
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	42ab      	cmp	r3, r5
 8004976:	dc26      	bgt.n	80049c6 <_printf_common+0x96>
 8004978:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800497c:	6822      	ldr	r2, [r4, #0]
 800497e:	3b00      	subs	r3, #0
 8004980:	bf18      	it	ne
 8004982:	2301      	movne	r3, #1
 8004984:	0692      	lsls	r2, r2, #26
 8004986:	d42b      	bmi.n	80049e0 <_printf_common+0xb0>
 8004988:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800498c:	4641      	mov	r1, r8
 800498e:	4638      	mov	r0, r7
 8004990:	47c8      	blx	r9
 8004992:	3001      	adds	r0, #1
 8004994:	d01e      	beq.n	80049d4 <_printf_common+0xa4>
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	6922      	ldr	r2, [r4, #16]
 800499a:	f003 0306 	and.w	r3, r3, #6
 800499e:	2b04      	cmp	r3, #4
 80049a0:	bf02      	ittt	eq
 80049a2:	68e5      	ldreq	r5, [r4, #12]
 80049a4:	6833      	ldreq	r3, [r6, #0]
 80049a6:	1aed      	subeq	r5, r5, r3
 80049a8:	68a3      	ldr	r3, [r4, #8]
 80049aa:	bf0c      	ite	eq
 80049ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049b0:	2500      	movne	r5, #0
 80049b2:	4293      	cmp	r3, r2
 80049b4:	bfc4      	itt	gt
 80049b6:	1a9b      	subgt	r3, r3, r2
 80049b8:	18ed      	addgt	r5, r5, r3
 80049ba:	2600      	movs	r6, #0
 80049bc:	341a      	adds	r4, #26
 80049be:	42b5      	cmp	r5, r6
 80049c0:	d11a      	bne.n	80049f8 <_printf_common+0xc8>
 80049c2:	2000      	movs	r0, #0
 80049c4:	e008      	b.n	80049d8 <_printf_common+0xa8>
 80049c6:	2301      	movs	r3, #1
 80049c8:	4652      	mov	r2, sl
 80049ca:	4641      	mov	r1, r8
 80049cc:	4638      	mov	r0, r7
 80049ce:	47c8      	blx	r9
 80049d0:	3001      	adds	r0, #1
 80049d2:	d103      	bne.n	80049dc <_printf_common+0xac>
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049dc:	3501      	adds	r5, #1
 80049de:	e7c6      	b.n	800496e <_printf_common+0x3e>
 80049e0:	18e1      	adds	r1, r4, r3
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	2030      	movs	r0, #48	@ 0x30
 80049e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049ea:	4422      	add	r2, r4
 80049ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049f4:	3302      	adds	r3, #2
 80049f6:	e7c7      	b.n	8004988 <_printf_common+0x58>
 80049f8:	2301      	movs	r3, #1
 80049fa:	4622      	mov	r2, r4
 80049fc:	4641      	mov	r1, r8
 80049fe:	4638      	mov	r0, r7
 8004a00:	47c8      	blx	r9
 8004a02:	3001      	adds	r0, #1
 8004a04:	d0e6      	beq.n	80049d4 <_printf_common+0xa4>
 8004a06:	3601      	adds	r6, #1
 8004a08:	e7d9      	b.n	80049be <_printf_common+0x8e>
	...

08004a0c <_printf_i>:
 8004a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a10:	7e0f      	ldrb	r7, [r1, #24]
 8004a12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a14:	2f78      	cmp	r7, #120	@ 0x78
 8004a16:	4691      	mov	r9, r2
 8004a18:	4680      	mov	r8, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	469a      	mov	sl, r3
 8004a1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a22:	d807      	bhi.n	8004a34 <_printf_i+0x28>
 8004a24:	2f62      	cmp	r7, #98	@ 0x62
 8004a26:	d80a      	bhi.n	8004a3e <_printf_i+0x32>
 8004a28:	2f00      	cmp	r7, #0
 8004a2a:	f000 80d1 	beq.w	8004bd0 <_printf_i+0x1c4>
 8004a2e:	2f58      	cmp	r7, #88	@ 0x58
 8004a30:	f000 80b8 	beq.w	8004ba4 <_printf_i+0x198>
 8004a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a3c:	e03a      	b.n	8004ab4 <_printf_i+0xa8>
 8004a3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a42:	2b15      	cmp	r3, #21
 8004a44:	d8f6      	bhi.n	8004a34 <_printf_i+0x28>
 8004a46:	a101      	add	r1, pc, #4	@ (adr r1, 8004a4c <_printf_i+0x40>)
 8004a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a4c:	08004aa5 	.word	0x08004aa5
 8004a50:	08004ab9 	.word	0x08004ab9
 8004a54:	08004a35 	.word	0x08004a35
 8004a58:	08004a35 	.word	0x08004a35
 8004a5c:	08004a35 	.word	0x08004a35
 8004a60:	08004a35 	.word	0x08004a35
 8004a64:	08004ab9 	.word	0x08004ab9
 8004a68:	08004a35 	.word	0x08004a35
 8004a6c:	08004a35 	.word	0x08004a35
 8004a70:	08004a35 	.word	0x08004a35
 8004a74:	08004a35 	.word	0x08004a35
 8004a78:	08004bb7 	.word	0x08004bb7
 8004a7c:	08004ae3 	.word	0x08004ae3
 8004a80:	08004b71 	.word	0x08004b71
 8004a84:	08004a35 	.word	0x08004a35
 8004a88:	08004a35 	.word	0x08004a35
 8004a8c:	08004bd9 	.word	0x08004bd9
 8004a90:	08004a35 	.word	0x08004a35
 8004a94:	08004ae3 	.word	0x08004ae3
 8004a98:	08004a35 	.word	0x08004a35
 8004a9c:	08004a35 	.word	0x08004a35
 8004aa0:	08004b79 	.word	0x08004b79
 8004aa4:	6833      	ldr	r3, [r6, #0]
 8004aa6:	1d1a      	adds	r2, r3, #4
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6032      	str	r2, [r6, #0]
 8004aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ab0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e09c      	b.n	8004bf2 <_printf_i+0x1e6>
 8004ab8:	6833      	ldr	r3, [r6, #0]
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	1d19      	adds	r1, r3, #4
 8004abe:	6031      	str	r1, [r6, #0]
 8004ac0:	0606      	lsls	r6, r0, #24
 8004ac2:	d501      	bpl.n	8004ac8 <_printf_i+0xbc>
 8004ac4:	681d      	ldr	r5, [r3, #0]
 8004ac6:	e003      	b.n	8004ad0 <_printf_i+0xc4>
 8004ac8:	0645      	lsls	r5, r0, #25
 8004aca:	d5fb      	bpl.n	8004ac4 <_printf_i+0xb8>
 8004acc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ad0:	2d00      	cmp	r5, #0
 8004ad2:	da03      	bge.n	8004adc <_printf_i+0xd0>
 8004ad4:	232d      	movs	r3, #45	@ 0x2d
 8004ad6:	426d      	negs	r5, r5
 8004ad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004adc:	4858      	ldr	r0, [pc, #352]	@ (8004c40 <_printf_i+0x234>)
 8004ade:	230a      	movs	r3, #10
 8004ae0:	e011      	b.n	8004b06 <_printf_i+0xfa>
 8004ae2:	6821      	ldr	r1, [r4, #0]
 8004ae4:	6833      	ldr	r3, [r6, #0]
 8004ae6:	0608      	lsls	r0, r1, #24
 8004ae8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004aec:	d402      	bmi.n	8004af4 <_printf_i+0xe8>
 8004aee:	0649      	lsls	r1, r1, #25
 8004af0:	bf48      	it	mi
 8004af2:	b2ad      	uxthmi	r5, r5
 8004af4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004af6:	4852      	ldr	r0, [pc, #328]	@ (8004c40 <_printf_i+0x234>)
 8004af8:	6033      	str	r3, [r6, #0]
 8004afa:	bf14      	ite	ne
 8004afc:	230a      	movne	r3, #10
 8004afe:	2308      	moveq	r3, #8
 8004b00:	2100      	movs	r1, #0
 8004b02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b06:	6866      	ldr	r6, [r4, #4]
 8004b08:	60a6      	str	r6, [r4, #8]
 8004b0a:	2e00      	cmp	r6, #0
 8004b0c:	db05      	blt.n	8004b1a <_printf_i+0x10e>
 8004b0e:	6821      	ldr	r1, [r4, #0]
 8004b10:	432e      	orrs	r6, r5
 8004b12:	f021 0104 	bic.w	r1, r1, #4
 8004b16:	6021      	str	r1, [r4, #0]
 8004b18:	d04b      	beq.n	8004bb2 <_printf_i+0x1a6>
 8004b1a:	4616      	mov	r6, r2
 8004b1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b20:	fb03 5711 	mls	r7, r3, r1, r5
 8004b24:	5dc7      	ldrb	r7, [r0, r7]
 8004b26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b2a:	462f      	mov	r7, r5
 8004b2c:	42bb      	cmp	r3, r7
 8004b2e:	460d      	mov	r5, r1
 8004b30:	d9f4      	bls.n	8004b1c <_printf_i+0x110>
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d10b      	bne.n	8004b4e <_printf_i+0x142>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	07df      	lsls	r7, r3, #31
 8004b3a:	d508      	bpl.n	8004b4e <_printf_i+0x142>
 8004b3c:	6923      	ldr	r3, [r4, #16]
 8004b3e:	6861      	ldr	r1, [r4, #4]
 8004b40:	4299      	cmp	r1, r3
 8004b42:	bfde      	ittt	le
 8004b44:	2330      	movle	r3, #48	@ 0x30
 8004b46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b4e:	1b92      	subs	r2, r2, r6
 8004b50:	6122      	str	r2, [r4, #16]
 8004b52:	f8cd a000 	str.w	sl, [sp]
 8004b56:	464b      	mov	r3, r9
 8004b58:	aa03      	add	r2, sp, #12
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	f7ff fee7 	bl	8004930 <_printf_common>
 8004b62:	3001      	adds	r0, #1
 8004b64:	d14a      	bne.n	8004bfc <_printf_i+0x1f0>
 8004b66:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6a:	b004      	add	sp, #16
 8004b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	f043 0320 	orr.w	r3, r3, #32
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	4832      	ldr	r0, [pc, #200]	@ (8004c44 <_printf_i+0x238>)
 8004b7a:	2778      	movs	r7, #120	@ 0x78
 8004b7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	6831      	ldr	r1, [r6, #0]
 8004b84:	061f      	lsls	r7, r3, #24
 8004b86:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b8a:	d402      	bmi.n	8004b92 <_printf_i+0x186>
 8004b8c:	065f      	lsls	r7, r3, #25
 8004b8e:	bf48      	it	mi
 8004b90:	b2ad      	uxthmi	r5, r5
 8004b92:	6031      	str	r1, [r6, #0]
 8004b94:	07d9      	lsls	r1, r3, #31
 8004b96:	bf44      	itt	mi
 8004b98:	f043 0320 	orrmi.w	r3, r3, #32
 8004b9c:	6023      	strmi	r3, [r4, #0]
 8004b9e:	b11d      	cbz	r5, 8004ba8 <_printf_i+0x19c>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	e7ad      	b.n	8004b00 <_printf_i+0xf4>
 8004ba4:	4826      	ldr	r0, [pc, #152]	@ (8004c40 <_printf_i+0x234>)
 8004ba6:	e7e9      	b.n	8004b7c <_printf_i+0x170>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	f023 0320 	bic.w	r3, r3, #32
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	e7f6      	b.n	8004ba0 <_printf_i+0x194>
 8004bb2:	4616      	mov	r6, r2
 8004bb4:	e7bd      	b.n	8004b32 <_printf_i+0x126>
 8004bb6:	6833      	ldr	r3, [r6, #0]
 8004bb8:	6825      	ldr	r5, [r4, #0]
 8004bba:	6961      	ldr	r1, [r4, #20]
 8004bbc:	1d18      	adds	r0, r3, #4
 8004bbe:	6030      	str	r0, [r6, #0]
 8004bc0:	062e      	lsls	r6, r5, #24
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	d501      	bpl.n	8004bca <_printf_i+0x1be>
 8004bc6:	6019      	str	r1, [r3, #0]
 8004bc8:	e002      	b.n	8004bd0 <_printf_i+0x1c4>
 8004bca:	0668      	lsls	r0, r5, #25
 8004bcc:	d5fb      	bpl.n	8004bc6 <_printf_i+0x1ba>
 8004bce:	8019      	strh	r1, [r3, #0]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6123      	str	r3, [r4, #16]
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	e7bc      	b.n	8004b52 <_printf_i+0x146>
 8004bd8:	6833      	ldr	r3, [r6, #0]
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	6032      	str	r2, [r6, #0]
 8004bde:	681e      	ldr	r6, [r3, #0]
 8004be0:	6862      	ldr	r2, [r4, #4]
 8004be2:	2100      	movs	r1, #0
 8004be4:	4630      	mov	r0, r6
 8004be6:	f7fb fb03 	bl	80001f0 <memchr>
 8004bea:	b108      	cbz	r0, 8004bf0 <_printf_i+0x1e4>
 8004bec:	1b80      	subs	r0, r0, r6
 8004bee:	6060      	str	r0, [r4, #4]
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	6123      	str	r3, [r4, #16]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bfa:	e7aa      	b.n	8004b52 <_printf_i+0x146>
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	4632      	mov	r2, r6
 8004c00:	4649      	mov	r1, r9
 8004c02:	4640      	mov	r0, r8
 8004c04:	47d0      	blx	sl
 8004c06:	3001      	adds	r0, #1
 8004c08:	d0ad      	beq.n	8004b66 <_printf_i+0x15a>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	079b      	lsls	r3, r3, #30
 8004c0e:	d413      	bmi.n	8004c38 <_printf_i+0x22c>
 8004c10:	68e0      	ldr	r0, [r4, #12]
 8004c12:	9b03      	ldr	r3, [sp, #12]
 8004c14:	4298      	cmp	r0, r3
 8004c16:	bfb8      	it	lt
 8004c18:	4618      	movlt	r0, r3
 8004c1a:	e7a6      	b.n	8004b6a <_printf_i+0x15e>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4632      	mov	r2, r6
 8004c20:	4649      	mov	r1, r9
 8004c22:	4640      	mov	r0, r8
 8004c24:	47d0      	blx	sl
 8004c26:	3001      	adds	r0, #1
 8004c28:	d09d      	beq.n	8004b66 <_printf_i+0x15a>
 8004c2a:	3501      	adds	r5, #1
 8004c2c:	68e3      	ldr	r3, [r4, #12]
 8004c2e:	9903      	ldr	r1, [sp, #12]
 8004c30:	1a5b      	subs	r3, r3, r1
 8004c32:	42ab      	cmp	r3, r5
 8004c34:	dcf2      	bgt.n	8004c1c <_printf_i+0x210>
 8004c36:	e7eb      	b.n	8004c10 <_printf_i+0x204>
 8004c38:	2500      	movs	r5, #0
 8004c3a:	f104 0619 	add.w	r6, r4, #25
 8004c3e:	e7f5      	b.n	8004c2c <_printf_i+0x220>
 8004c40:	08004d99 	.word	0x08004d99
 8004c44:	08004daa 	.word	0x08004daa

08004c48 <memmove>:
 8004c48:	4288      	cmp	r0, r1
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	eb01 0402 	add.w	r4, r1, r2
 8004c50:	d902      	bls.n	8004c58 <memmove+0x10>
 8004c52:	4284      	cmp	r4, r0
 8004c54:	4623      	mov	r3, r4
 8004c56:	d807      	bhi.n	8004c68 <memmove+0x20>
 8004c58:	1e43      	subs	r3, r0, #1
 8004c5a:	42a1      	cmp	r1, r4
 8004c5c:	d008      	beq.n	8004c70 <memmove+0x28>
 8004c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c66:	e7f8      	b.n	8004c5a <memmove+0x12>
 8004c68:	4402      	add	r2, r0
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	428a      	cmp	r2, r1
 8004c6e:	d100      	bne.n	8004c72 <memmove+0x2a>
 8004c70:	bd10      	pop	{r4, pc}
 8004c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c7a:	e7f7      	b.n	8004c6c <memmove+0x24>

08004c7c <_sbrk_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4d06      	ldr	r5, [pc, #24]	@ (8004c98 <_sbrk_r+0x1c>)
 8004c80:	2300      	movs	r3, #0
 8004c82:	4604      	mov	r4, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	f7fb fe1c 	bl	80008c4 <_sbrk>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d102      	bne.n	8004c96 <_sbrk_r+0x1a>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	b103      	cbz	r3, 8004c96 <_sbrk_r+0x1a>
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	200002b4 	.word	0x200002b4

08004c9c <memcpy>:
 8004c9c:	440a      	add	r2, r1
 8004c9e:	4291      	cmp	r1, r2
 8004ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ca4:	d100      	bne.n	8004ca8 <memcpy+0xc>
 8004ca6:	4770      	bx	lr
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb2:	4291      	cmp	r1, r2
 8004cb4:	d1f9      	bne.n	8004caa <memcpy+0xe>
 8004cb6:	bd10      	pop	{r4, pc}

08004cb8 <_realloc_r>:
 8004cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	4614      	mov	r4, r2
 8004cc0:	460d      	mov	r5, r1
 8004cc2:	b921      	cbnz	r1, 8004cce <_realloc_r+0x16>
 8004cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc8:	4611      	mov	r1, r2
 8004cca:	f7ff bc4d 	b.w	8004568 <_malloc_r>
 8004cce:	b92a      	cbnz	r2, 8004cdc <_realloc_r+0x24>
 8004cd0:	f7ff fbde 	bl	8004490 <_free_r>
 8004cd4:	4625      	mov	r5, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cdc:	f000 f81a 	bl	8004d14 <_malloc_usable_size_r>
 8004ce0:	4284      	cmp	r4, r0
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	d802      	bhi.n	8004cec <_realloc_r+0x34>
 8004ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cea:	d8f4      	bhi.n	8004cd6 <_realloc_r+0x1e>
 8004cec:	4621      	mov	r1, r4
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f7ff fc3a 	bl	8004568 <_malloc_r>
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	b908      	cbnz	r0, 8004cfc <_realloc_r+0x44>
 8004cf8:	4645      	mov	r5, r8
 8004cfa:	e7ec      	b.n	8004cd6 <_realloc_r+0x1e>
 8004cfc:	42b4      	cmp	r4, r6
 8004cfe:	4622      	mov	r2, r4
 8004d00:	4629      	mov	r1, r5
 8004d02:	bf28      	it	cs
 8004d04:	4632      	movcs	r2, r6
 8004d06:	f7ff ffc9 	bl	8004c9c <memcpy>
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f7ff fbbf 	bl	8004490 <_free_r>
 8004d12:	e7f1      	b.n	8004cf8 <_realloc_r+0x40>

08004d14 <_malloc_usable_size_r>:
 8004d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d18:	1f18      	subs	r0, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bfbc      	itt	lt
 8004d1e:	580b      	ldrlt	r3, [r1, r0]
 8004d20:	18c0      	addlt	r0, r0, r3
 8004d22:	4770      	bx	lr

08004d24 <_init>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr

08004d30 <_fini>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr
