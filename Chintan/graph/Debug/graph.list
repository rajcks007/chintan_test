
graph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002f5c  08002f5c  00003f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003038  08003038  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003038  08003038  00004038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003040  08003040  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003040  08003040  00004040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003044  08003044  00004044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003048  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000a8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c03  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014cb  00000000  00000000  0000dc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  0000f110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ef  00000000  00000000  0000f780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f843  00000000  00000000  0000fc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009544  00000000  00000000  0002f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfce8  00000000  00000000  000389f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f86de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001910  00000000  00000000  000f8724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000fa034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f44 	.word	0x08002f44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002f44 	.word	0x08002f44

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fa53 	bl	8000694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f86f 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 f8fb 	bl	80003ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f6:	f000 f8c9 	bl	800038c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  send_msg("Cheking input voltage...!!! \r\n ");
 80001fa:	482c      	ldr	r0, [pc, #176]	@ (80002ac <main+0xc8>)
 80001fc:	f000 f95c 	bl	80004b8 <send_msg>
  HAL_Delay(1000);
 8000200:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000204:	f000 faac 	bl	8000760 <HAL_Delay>
  send_msg("Efuse enable pin High. \r\n ");
 8000208:	4829      	ldr	r0, [pc, #164]	@ (80002b0 <main+0xcc>)
 800020a:	f000 f955 	bl	80004b8 <send_msg>
  HAL_Delay(1000);
 800020e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000212:	f000 faa5 	bl	8000760 <HAL_Delay>
  send_msg("cheking efuse O/P voltage. \r\n ");
 8000216:	4827      	ldr	r0, [pc, #156]	@ (80002b4 <main+0xd0>)
 8000218:	f000 f94e 	bl	80004b8 <send_msg>
  HAL_Delay(1000);
 800021c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000220:	f000 fa9e 	bl	8000760 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t startTick = HAL_GetTick();
 8000224:	f000 fa90 	bl	8000748 <HAL_GetTick>
 8000228:	6078      	str	r0, [r7, #4]
	          while (HAL_GetTick() - startTick < 5000)  // 5000 ms = 5 seconds
 800022a:	e005      	b.n	8000238 <main+0x54>
	          {
	              // Your 5-second task here
	        	  send_msg("/*4096; 1*/");
 800022c:	4822      	ldr	r0, [pc, #136]	@ (80002b8 <main+0xd4>)
 800022e:	f000 f943 	bl	80004b8 <send_msg>
	        	  HAL_Delay(100);
 8000232:	2064      	movs	r0, #100	@ 0x64
 8000234:	f000 fa94 	bl	8000760 <HAL_Delay>
	          while (HAL_GetTick() - startTick < 5000)  // 5000 ms = 5 seconds
 8000238:	f000 fa86 	bl	8000748 <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000246:	4293      	cmp	r3, r2
 8000248:	d9f0      	bls.n	800022c <main+0x48>
	          }

	          send_msg("/*4000; 1*/");
 800024a:	481c      	ldr	r0, [pc, #112]	@ (80002bc <main+0xd8>)
 800024c:	f000 f934 	bl	80004b8 <send_msg>
	          HAL_Delay(100);
 8000250:	2064      	movs	r0, #100	@ 0x64
 8000252:	f000 fa85 	bl	8000760 <HAL_Delay>
	          send_msg("/*3500; 0*/");
 8000256:	481a      	ldr	r0, [pc, #104]	@ (80002c0 <main+0xdc>)
 8000258:	f000 f92e 	bl	80004b8 <send_msg>
	          HAL_Delay(100);
 800025c:	2064      	movs	r0, #100	@ 0x64
 800025e:	f000 fa7f 	bl	8000760 <HAL_Delay>
	          send_msg("/*2500; 0*/");
 8000262:	4818      	ldr	r0, [pc, #96]	@ (80002c4 <main+0xe0>)
 8000264:	f000 f928 	bl	80004b8 <send_msg>
	          HAL_Delay(100);
 8000268:	2064      	movs	r0, #100	@ 0x64
 800026a:	f000 fa79 	bl	8000760 <HAL_Delay>
	          send_msg("/*2096; 0*/");
 800026e:	4816      	ldr	r0, [pc, #88]	@ (80002c8 <main+0xe4>)
 8000270:	f000 f922 	bl	80004b8 <send_msg>
	          HAL_Delay(100);
 8000274:	2064      	movs	r0, #100	@ 0x64
 8000276:	f000 fa73 	bl	8000760 <HAL_Delay>

	          // --- Run for 3 seconds ---
	          startTick = HAL_GetTick();
 800027a:	f000 fa65 	bl	8000748 <HAL_GetTick>
 800027e:	6078      	str	r0, [r7, #4]
	          while (HAL_GetTick() - startTick < 3000)  // 3000 ms = 3 seconds
 8000280:	e005      	b.n	800028e <main+0xaa>
	          {
	              // Your 3-second task here
	        	  send_msg("/*0; 0*/");
 8000282:	4812      	ldr	r0, [pc, #72]	@ (80002cc <main+0xe8>)
 8000284:	f000 f918 	bl	80004b8 <send_msg>
	        	  HAL_Delay(100);
 8000288:	2064      	movs	r0, #100	@ 0x64
 800028a:	f000 fa69 	bl	8000760 <HAL_Delay>
	          while (HAL_GetTick() - startTick < 3000)  // 3000 ms = 3 seconds
 800028e:	f000 fa5b 	bl	8000748 <HAL_GetTick>
 8000292:	4602      	mov	r2, r0
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	1ad3      	subs	r3, r2, r3
 8000298:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800029c:	4293      	cmp	r3, r2
 800029e:	d9f0      	bls.n	8000282 <main+0x9e>
	          }

	          break;
 80002a0:	bf00      	nop
 80002a2:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	08002f5c 	.word	0x08002f5c
 80002b0:	08002f7c 	.word	0x08002f7c
 80002b4:	08002f98 	.word	0x08002f98
 80002b8:	08002fb8 	.word	0x08002fb8
 80002bc:	08002fc4 	.word	0x08002fc4
 80002c0:	08002fd0 	.word	0x08002fd0
 80002c4:	08002fdc 	.word	0x08002fdc
 80002c8:	08002fe8 	.word	0x08002fe8
 80002cc:	08002ff4 	.word	0x08002ff4

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b0a6      	sub	sp, #152	@ 0x98
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002da:	2228      	movs	r2, #40	@ 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fe03 	bl	8002eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2258      	movs	r2, #88	@ 0x58
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fdf5 	bl	8002eea <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000300:	2302      	movs	r3, #2
 8000302:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000308:	2310      	movs	r3, #16
 800030a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030e:	2302      	movs	r3, #2
 8000310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000314:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000318:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000320:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fcc2 	bl	8000cb8 <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033a:	f000 f8d3 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	2302      	movs	r3, #2
 8000344:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800034e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000354:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000358:	2102      	movs	r1, #2
 800035a:	4618      	mov	r0, r3
 800035c:	f001 fcd0 	bl	8001d00 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000366:	f000 f8bd 	bl	80004e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800036a:	2302      	movs	r3, #2
 800036c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fed5 	bl	8002124 <HAL_RCCEx_PeriphCLKConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000380:	f000 f8b0 	bl	80004e4 <Error_Handler>
  }
}
 8000384:	bf00      	nop
 8000386:	3798      	adds	r7, #152	@ 0x98
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000390:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 8000392:	4a15      	ldr	r2, [pc, #84]	@ (80003e8 <MX_USART2_UART_Init+0x5c>)
 8000394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000396:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 8000398:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800039c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039e:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	@ (80003e4 <MX_USART2_UART_Init+0x58>)
 80003d0:	f002 f8c4 	bl	800255c <HAL_UART_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003da:	f000 f883 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000028 	.word	0x20000028
 80003e8:	40004400 	.word	0x40004400

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	@ 0x28
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000402:	4b2b      	ldr	r3, [pc, #172]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a2a      	ldr	r2, [pc, #168]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 8000408:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b28      	ldr	r3, [pc, #160]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041a:	4b25      	ldr	r3, [pc, #148]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a24      	ldr	r2, [pc, #144]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 8000420:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b22      	ldr	r3, [pc, #136]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b1f      	ldr	r3, [pc, #124]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a1e      	ldr	r2, [pc, #120]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 8000438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b19      	ldr	r3, [pc, #100]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a18      	ldr	r2, [pc, #96]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 8000450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b16      	ldr	r3, [pc, #88]	@ (80004b0 <MX_GPIO_Init+0xc4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2120      	movs	r1, #32
 8000466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800046a:	f000 fc0d 	bl	8000c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800046e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000474:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	4619      	mov	r1, r3
 8000484:	480b      	ldr	r0, [pc, #44]	@ (80004b4 <MX_GPIO_Init+0xc8>)
 8000486:	f000 fa75 	bl	8000974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800048a:	2320      	movs	r3, #32
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2300      	movs	r3, #0
 8000498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a4:	f000 fa66 	bl	8000974 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004a8:	bf00      	nop
 80004aa:	3728      	adds	r7, #40	@ 0x28
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000800 	.word	0x48000800

080004b8 <send_msg>:

/* USER CODE BEGIN 4 */
void send_msg(char *msg){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f7ff fe87 	bl	80001d4 <strlen>
 80004c6:	4603      	mov	r3, r0
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	4803      	ldr	r0, [pc, #12]	@ (80004e0 <send_msg+0x28>)
 80004d2:	f002 f891 	bl	80025f8 <HAL_UART_Transmit>
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000028 	.word	0x20000028

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <Error_Handler+0x8>

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <HAL_MspInit+0x44>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000534 <HAL_MspInit+0x44>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <HAL_MspInit+0x44>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <HAL_MspInit+0x44>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <HAL_MspInit+0x44>)
 8000514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <HAL_MspInit+0x44>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000526:	2007      	movs	r0, #7
 8000528:	f000 f9f0 	bl	800090c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40021000 	.word	0x40021000

08000538 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	@ 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a17      	ldr	r2, [pc, #92]	@ (80005b4 <HAL_UART_MspInit+0x7c>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d128      	bne.n	80005ac <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800055a:	4b17      	ldr	r3, [pc, #92]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a16      	ldr	r2, [pc, #88]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b14      	ldr	r3, [pc, #80]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a10      	ldr	r2, [pc, #64]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 8000578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <HAL_UART_MspInit+0x80>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800058a:	230c      	movs	r3, #12
 800058c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800059a:	2307      	movs	r3, #7
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a8:	f000 f9e4 	bl	8000974 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80005ac:	bf00      	nop
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40004400 	.word	0x40004400
 80005b8:	40021000 	.word	0x40021000

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <NMI_Handler+0x4>

080005c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <HardFault_Handler+0x4>

080005cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <MemManage_Handler+0x4>

080005d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000612:	f000 f885 	bl	8000720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <SystemInit+0x20>)
 8000622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000626:	4a05      	ldr	r2, [pc, #20]	@ (800063c <SystemInit+0x20>)
 8000628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800062c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000678 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000644:	f7ff ffea 	bl	800061c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480c      	ldr	r0, [pc, #48]	@ (800067c <LoopForever+0x6>)
  ldr r1, =_edata
 800064a:	490d      	ldr	r1, [pc, #52]	@ (8000680 <LoopForever+0xa>)
  ldr r2, =_sidata
 800064c:	4a0d      	ldr	r2, [pc, #52]	@ (8000684 <LoopForever+0xe>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a0a      	ldr	r2, [pc, #40]	@ (8000688 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000660:	4c0a      	ldr	r4, [pc, #40]	@ (800068c <LoopForever+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066e:	f002 fc45 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000672:	f7ff fdb7 	bl	80001e4 <main>

08000676 <LoopForever>:

LoopForever:
    b LoopForever
 8000676:	e7fe      	b.n	8000676 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000678:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000684:	08003048 	.word	0x08003048
  ldr r2, =_sbss
 8000688:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800068c:	200000b4 	.word	0x200000b4

08000690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC1_2_IRQHandler>
	...

08000694 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <HAL_Init+0x28>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a07      	ldr	r2, [pc, #28]	@ (80006bc <HAL_Init+0x28>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f931 	bl	800090c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 f808 	bl	80006c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b0:	f7ff ff1e 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40022000 	.word	0x40022000

080006c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <HAL_InitTick+0x54>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <HAL_InitTick+0x58>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f93b 	bl	800095a <HAL_SYSTICK_Config>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00e      	b.n	800070c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d80a      	bhi.n	800070a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f4:	2200      	movs	r2, #0
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f000 f911 	bl	8000922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000700:	4a06      	ldr	r2, [pc, #24]	@ (800071c <HAL_InitTick+0x5c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000000 	.word	0x20000000
 8000718:	20000008 	.word	0x20000008
 800071c:	20000004 	.word	0x20000004

08000720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <HAL_IncTick+0x20>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_IncTick+0x24>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a04      	ldr	r2, [pc, #16]	@ (8000744 <HAL_IncTick+0x24>)
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000008 	.word	0x20000008
 8000744:	200000b0 	.word	0x200000b0

08000748 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;  
 800074c:	4b03      	ldr	r3, [pc, #12]	@ (800075c <HAL_GetTick+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200000b0 	.word	0x200000b0

08000760 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000768:	f7ff ffee 	bl	8000748 <HAL_GetTick>
 800076c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000778:	d005      	beq.n	8000786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800077a:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <HAL_Delay+0x44>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000786:	bf00      	nop
 8000788:	f7ff ffde 	bl	8000748 <HAL_GetTick>
 800078c:	4602      	mov	r2, r0
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	429a      	cmp	r2, r3
 8000796:	d8f7      	bhi.n	8000788 <HAL_Delay+0x28>
  {
  }
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000008 	.word	0x20000008

080007a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	db0a      	blt.n	8000836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	490c      	ldr	r1, [pc, #48]	@ (8000858 <__NVIC_SetPriority+0x4c>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	0112      	lsls	r2, r2, #4
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	440b      	add	r3, r1
 8000830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000834:	e00a      	b.n	800084c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4908      	ldr	r1, [pc, #32]	@ (800085c <__NVIC_SetPriority+0x50>)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	3b04      	subs	r3, #4
 8000844:	0112      	lsls	r2, r2, #4
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	440b      	add	r3, r1
 800084a:	761a      	strb	r2, [r3, #24]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	@ 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f1c3 0307 	rsb	r3, r3, #7
 800087a:	2b04      	cmp	r3, #4
 800087c:	bf28      	it	cs
 800087e:	2304      	movcs	r3, #4
 8000880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3304      	adds	r3, #4
 8000886:	2b06      	cmp	r3, #6
 8000888:	d902      	bls.n	8000890 <NVIC_EncodePriority+0x30>
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3b03      	subs	r3, #3
 800088e:	e000      	b.n	8000892 <NVIC_EncodePriority+0x32>
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	f04f 32ff 	mov.w	r2, #4294967295
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43da      	mvns	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	401a      	ands	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43d9      	mvns	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	4313      	orrs	r3, r2
         );
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3724      	adds	r7, #36	@ 0x24
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008d8:	d301      	bcc.n	80008de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008da:	2301      	movs	r3, #1
 80008dc:	e00f      	b.n	80008fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <SysTick_Config+0x40>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e6:	210f      	movs	r1, #15
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f7ff ff8e 	bl	800080c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <SysTick_Config+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <SysTick_Config+0x40>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff47 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000934:	f7ff ff5c 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 8000938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f7ff ff8e 	bl	8000860 <NVIC_EncodePriority>
 8000944:	4602      	mov	r2, r0
 8000946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5d 	bl	800080c <__NVIC_SetPriority>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ffb0 	bl	80008c8 <SysTick_Config>
 8000968:	4603      	mov	r3, r0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000982:	e160      	b.n	8000c46 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	2101      	movs	r1, #1
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 8152 	beq.w	8000c40 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d005      	beq.n	80009b4 <HAL_GPIO_Init+0x40>
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d130      	bne.n	8000a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2203      	movs	r2, #3
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ea:	2201      	movs	r2, #1
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	091b      	lsrs	r3, r3, #4
 8000a00:	f003 0201 	and.w	r2, r3, #1
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d017      	beq.n	8000a52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d123      	bne.n	8000aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	08da      	lsrs	r2, r3, #3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3208      	adds	r2, #8
 8000a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	691a      	ldr	r2, [r3, #16]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f003 0307 	and.w	r3, r3, #7
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	08da      	lsrs	r2, r3, #3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3208      	adds	r2, #8
 8000aa0:	6939      	ldr	r1, [r7, #16]
 8000aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f003 0203 	and.w	r2, r3, #3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 80ac 	beq.w	8000c40 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8000c64 <HAL_GPIO_Init+0x2f0>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a5d      	ldr	r2, [pc, #372]	@ (8000c64 <HAL_GPIO_Init+0x2f0>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b5b      	ldr	r3, [pc, #364]	@ (8000c64 <HAL_GPIO_Init+0x2f0>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b00:	4a59      	ldr	r2, [pc, #356]	@ (8000c68 <HAL_GPIO_Init+0x2f4>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	220f      	movs	r2, #15
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b2a:	d025      	beq.n	8000b78 <HAL_GPIO_Init+0x204>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a4f      	ldr	r2, [pc, #316]	@ (8000c6c <HAL_GPIO_Init+0x2f8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d01f      	beq.n	8000b74 <HAL_GPIO_Init+0x200>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a4e      	ldr	r2, [pc, #312]	@ (8000c70 <HAL_GPIO_Init+0x2fc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d019      	beq.n	8000b70 <HAL_GPIO_Init+0x1fc>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a4d      	ldr	r2, [pc, #308]	@ (8000c74 <HAL_GPIO_Init+0x300>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d013      	beq.n	8000b6c <HAL_GPIO_Init+0x1f8>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a4c      	ldr	r2, [pc, #304]	@ (8000c78 <HAL_GPIO_Init+0x304>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d00d      	beq.n	8000b68 <HAL_GPIO_Init+0x1f4>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a4b      	ldr	r2, [pc, #300]	@ (8000c7c <HAL_GPIO_Init+0x308>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d007      	beq.n	8000b64 <HAL_GPIO_Init+0x1f0>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a4a      	ldr	r2, [pc, #296]	@ (8000c80 <HAL_GPIO_Init+0x30c>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d101      	bne.n	8000b60 <HAL_GPIO_Init+0x1ec>
 8000b5c:	2306      	movs	r3, #6
 8000b5e:	e00c      	b.n	8000b7a <HAL_GPIO_Init+0x206>
 8000b60:	2307      	movs	r3, #7
 8000b62:	e00a      	b.n	8000b7a <HAL_GPIO_Init+0x206>
 8000b64:	2305      	movs	r3, #5
 8000b66:	e008      	b.n	8000b7a <HAL_GPIO_Init+0x206>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e006      	b.n	8000b7a <HAL_GPIO_Init+0x206>
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e004      	b.n	8000b7a <HAL_GPIO_Init+0x206>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_Init+0x206>
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <HAL_GPIO_Init+0x206>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	f002 0203 	and.w	r2, r2, #3
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	4093      	lsls	r3, r2
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b8a:	4937      	ldr	r1, [pc, #220]	@ (8000c68 <HAL_GPIO_Init+0x2f4>)
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3302      	adds	r3, #2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b98:	4b3a      	ldr	r3, [pc, #232]	@ (8000c84 <HAL_GPIO_Init+0x310>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bbc:	4a31      	ldr	r2, [pc, #196]	@ (8000c84 <HAL_GPIO_Init+0x310>)
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bc2:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <HAL_GPIO_Init+0x310>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000be6:	4a27      	ldr	r2, [pc, #156]	@ (8000c84 <HAL_GPIO_Init+0x310>)
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bec:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <HAL_GPIO_Init+0x310>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c10:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <HAL_GPIO_Init+0x310>)
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <HAL_GPIO_Init+0x310>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <HAL_GPIO_Init+0x310>)
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3301      	adds	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f47f ae97 	bne.w	8000984 <HAL_GPIO_Init+0x10>
  }
}
 8000c56:	bf00      	nop
 8000c58:	bf00      	nop
 8000c5a:	371c      	adds	r7, #28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	48000800 	.word	0x48000800
 8000c74:	48000c00 	.word	0x48000c00
 8000c78:	48001000 	.word	0x48001000
 8000c7c:	48001400 	.word	0x48001400
 8000c80:	48001800 	.word	0x48001800
 8000c84:	40010400 	.word	0x40010400

08000c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca4:	e002      	b.n	8000cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f001 b80a 	b.w	8001cf2 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ce2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8161 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cf4:	4bae      	ldr	r3, [pc, #696]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d00c      	beq.n	8000d1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d00:	4bab      	ldr	r3, [pc, #684]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d157      	bne.n	8000dbc <HAL_RCC_OscConfig+0x104>
 8000d0c:	4ba8      	ldr	r3, [pc, #672]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d18:	d150      	bne.n	8000dbc <HAL_RCC_OscConfig+0x104>
 8000d1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d1e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000d26:	fa93 f3a3 	rbit	r3, r3
 8000d2a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d32:	fab3 f383 	clz	r3, r3
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d3a:	d802      	bhi.n	8000d42 <HAL_RCC_OscConfig+0x8a>
 8000d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	e015      	b.n	8000d6e <HAL_RCC_OscConfig+0xb6>
 8000d42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d46:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d5a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d5e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000d62:	fa93 f3a3 	rbit	r3, r3
 8000d66:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d6a:	4b91      	ldr	r3, [pc, #580]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d72:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000d76:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000d7a:	fa92 f2a2 	rbit	r2, r2
 8000d7e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000d82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	f042 0220 	orr.w	r2, r2, #32
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	f002 021f 	and.w	r2, r2, #31
 8000d96:	2101      	movs	r1, #1
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 8108 	beq.w	8000fb4 <HAL_RCC_OscConfig+0x2fc>
 8000da4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000da8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f040 80ff 	bne.w	8000fb4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f000 bf9b 	b.w	8001cf2 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dcc:	d106      	bne.n	8000ddc <HAL_RCC_OscConfig+0x124>
 8000dce:	4b78      	ldr	r3, [pc, #480]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a77      	ldr	r2, [pc, #476]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e036      	b.n	8000e4a <HAL_RCC_OscConfig+0x192>
 8000ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000de0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10c      	bne.n	8000e06 <HAL_RCC_OscConfig+0x14e>
 8000dec:	4b70      	ldr	r3, [pc, #448]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a6f      	ldr	r2, [pc, #444]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b6d      	ldr	r3, [pc, #436]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a6c      	ldr	r2, [pc, #432]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	e021      	b.n	8000e4a <HAL_RCC_OscConfig+0x192>
 8000e06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e16:	d10c      	bne.n	8000e32 <HAL_RCC_OscConfig+0x17a>
 8000e18:	4b65      	ldr	r3, [pc, #404]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a64      	ldr	r2, [pc, #400]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b62      	ldr	r3, [pc, #392]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a61      	ldr	r2, [pc, #388]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e00b      	b.n	8000e4a <HAL_RCC_OscConfig+0x192>
 8000e32:	4b5f      	ldr	r3, [pc, #380]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a5e      	ldr	r2, [pc, #376]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a5b      	ldr	r2, [pc, #364]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d054      	beq.n	8000f04 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fc75 	bl	8000748 <HAL_GetTick>
 8000e5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	e00a      	b.n	8000e7a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fc70 	bl	8000748 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b64      	cmp	r3, #100	@ 0x64
 8000e72:	d902      	bls.n	8000e7a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	f000 bf3c 	b.w	8001cf2 <HAL_RCC_OscConfig+0x103a>
 8000e7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e7e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e82:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000e8e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e92:	fab3 f383 	clz	r3, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e9a:	d802      	bhi.n	8000ea2 <HAL_RCC_OscConfig+0x1ea>
 8000e9c:	4b44      	ldr	r3, [pc, #272]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	e015      	b.n	8000ece <HAL_RCC_OscConfig+0x216>
 8000ea2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ea6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eaa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000eb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eba:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000ebe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000eca:	4b39      	ldr	r3, [pc, #228]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ece:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ed2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000ed6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000eda:	fa92 f2a2 	rbit	r2, r2
 8000ede:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000ee2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000ee6:	fab2 f282 	clz	r2, r2
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	f042 0220 	orr.w	r2, r2, #32
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	f002 021f 	and.w	r2, r2, #31
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0b0      	beq.n	8000e64 <HAL_RCC_OscConfig+0x1ac>
 8000f02:	e058      	b.n	8000fb6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f04:	f7ff fc20 	bl	8000748 <HAL_GetTick>
 8000f08:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0c:	e00a      	b.n	8000f24 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f0e:	f7ff fc1b 	bl	8000748 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	@ 0x64
 8000f1c:	d902      	bls.n	8000f24 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	f000 bee7 	b.w	8001cf2 <HAL_RCC_OscConfig+0x103a>
 8000f24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f28:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000f38:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3c:	fab3 f383 	clz	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f44:	d802      	bhi.n	8000f4c <HAL_RCC_OscConfig+0x294>
 8000f46:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	e015      	b.n	8000f78 <HAL_RCC_OscConfig+0x2c0>
 8000f4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f50:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000f60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f64:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000f68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000f74:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f7c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000f80:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000f84:	fa92 f2a2 	rbit	r2, r2
 8000f88:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000f8c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000f90:	fab2 f282 	clz	r2, r2
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	f042 0220 	orr.w	r2, r2, #32
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	f002 021f 	and.w	r2, r2, #31
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1b0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x256>
 8000fac:	e003      	b.n	8000fb6 <HAL_RCC_OscConfig+0x2fe>
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 816d 	beq.w	80012a6 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fcc:	4bcd      	ldr	r3, [pc, #820]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00c      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fd8:	4bca      	ldr	r3, [pc, #808]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d16e      	bne.n	80010c2 <HAL_RCC_OscConfig+0x40a>
 8000fe4:	4bc7      	ldr	r3, [pc, #796]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000ff0:	d167      	bne.n	80010c2 <HAL_RCC_OscConfig+0x40a>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001004:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001008:	fab3 f383 	clz	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001010:	d802      	bhi.n	8001018 <HAL_RCC_OscConfig+0x360>
 8001012:	4bbc      	ldr	r3, [pc, #752]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	e013      	b.n	8001040 <HAL_RCC_OscConfig+0x388>
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001030:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800103c:	4bb1      	ldr	r3, [pc, #708]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 800103e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001040:	2202      	movs	r2, #2
 8001042:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001046:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800104a:	fa92 f2a2 	rbit	r2, r2
 800104e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001052:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001056:	fab2 f282 	clz	r2, r2
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	f042 0220 	orr.w	r2, r2, #32
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	f002 021f 	and.w	r2, r2, #31
 8001066:	2101      	movs	r1, #1
 8001068:	fa01 f202 	lsl.w	r2, r1, r2
 800106c:	4013      	ands	r3, r2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00a      	beq.n	8001088 <HAL_RCC_OscConfig+0x3d0>
 8001072:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001076:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d002      	beq.n	8001088 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	f000 be35 	b.w	8001cf2 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b9e      	ldr	r3, [pc, #632]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001090:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001094:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	21f8      	movs	r1, #248	@ 0xf8
 800109e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80010a6:	fa91 f1a1 	rbit	r1, r1
 80010aa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80010ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80010b2:	fab1 f181 	clz	r1, r1
 80010b6:	b2c9      	uxtb	r1, r1
 80010b8:	408b      	lsls	r3, r1
 80010ba:	4992      	ldr	r1, [pc, #584]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c0:	e0f1      	b.n	80012a6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8083 	beq.w	80011da <HAL_RCC_OscConfig+0x522>
 80010d4:	2301      	movs	r3, #1
 80010d6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80010e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80010f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	461a      	mov	r2, r3
 80010fc:	2301      	movs	r3, #1
 80010fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fb22 	bl	8000748 <HAL_GetTick>
 8001104:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff fb1d 	bl	8000748 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d902      	bls.n	8001120 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	f000 bde9 	b.w	8001cf2 <HAL_RCC_OscConfig+0x103a>
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001132:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b3f      	cmp	r3, #63	@ 0x3f
 800113e:	d802      	bhi.n	8001146 <HAL_RCC_OscConfig+0x48e>
 8001140:	4b70      	ldr	r3, [pc, #448]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	e013      	b.n	800116e <HAL_RCC_OscConfig+0x4b6>
 8001146:	2302      	movs	r3, #2
 8001148:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800115e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800116a:	4b66      	ldr	r3, [pc, #408]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116e:	2202      	movs	r2, #2
 8001170:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001174:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001178:	fa92 f2a2 	rbit	r2, r2
 800117c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001180:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001184:	fab2 f282 	clz	r2, r2
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	f042 0220 	orr.w	r2, r2, #32
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	f002 021f 	and.w	r2, r2, #31
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0b4      	beq.n	800110a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b58      	ldr	r3, [pc, #352]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	21f8      	movs	r1, #248	@ 0xf8
 80011b6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80011be:	fa91 f1a1 	rbit	r1, r1
 80011c2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80011c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80011ca:	fab1 f181 	clz	r1, r1
 80011ce:	b2c9      	uxtb	r1, r1
 80011d0:	408b      	lsls	r3, r1
 80011d2:	494c      	ldr	r1, [pc, #304]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
 80011d8:	e065      	b.n	80012a6 <HAL_RCC_OscConfig+0x5ee>
 80011da:	2301      	movs	r3, #1
 80011dc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80011e4:	fa93 f3a3 	rbit	r3, r3
 80011e8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80011ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011fa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	461a      	mov	r2, r3
 8001202:	2300      	movs	r3, #0
 8001204:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001206:	f7ff fa9f 	bl	8000748 <HAL_GetTick>
 800120a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	e00a      	b.n	8001226 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001210:	f7ff fa9a 	bl	8000748 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d902      	bls.n	8001226 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	f000 bd66 	b.w	8001cf2 <HAL_RCC_OscConfig+0x103a>
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001238:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b3f      	cmp	r3, #63	@ 0x3f
 8001244:	d802      	bhi.n	800124c <HAL_RCC_OscConfig+0x594>
 8001246:	4b2f      	ldr	r3, [pc, #188]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	e013      	b.n	8001274 <HAL_RCC_OscConfig+0x5bc>
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001264:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001270:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <HAL_RCC_OscConfig+0x64c>)
 8001272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001274:	2202      	movs	r2, #2
 8001276:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800127a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800127e:	fa92 f2a2 	rbit	r2, r2
 8001282:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001286:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800128a:	fab2 f282 	clz	r2, r2
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	f042 0220 	orr.w	r2, r2, #32
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	f002 021f 	and.w	r2, r2, #31
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1b4      	bne.n	8001210 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8119 	beq.w	80014ee <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 8082 	beq.w	80013d2 <HAL_RCC_OscConfig+0x71a>
 80012ce:	2301      	movs	r3, #1
 80012d0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80012e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_RCC_OscConfig+0x650>)
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	461a      	mov	r2, r3
 80012f4:	2301      	movs	r3, #1
 80012f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fa26 	bl	8000748 <HAL_GetTick>
 80012fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001300:	e00f      	b.n	8001322 <HAL_RCC_OscConfig+0x66a>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130c:	f7ff fa1c 	bl	8000748 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d902      	bls.n	8001322 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	f000 bce8 	b.w	8001cf2 <HAL_RCC_OscConfig+0x103a>
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800132c:	fa93 f2a3 	rbit	r2, r3
 8001330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001334:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800133e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001342:	2202      	movs	r2, #2
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	fa93 f2a3 	rbit	r2, r3
 8001354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001362:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001366:	2202      	movs	r2, #2
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800136e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	fa93 f2a3 	rbit	r2, r3
 8001378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800137c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001380:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4bb0      	ldr	r3, [pc, #704]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 8001384:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800138a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800138e:	2102      	movs	r1, #2
 8001390:	6019      	str	r1, [r3, #0]
 8001392:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001396:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	fa93 f1a3 	rbit	r1, r3
 80013a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013a8:	6019      	str	r1, [r3, #0]
  return result;
 80013aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d09d      	beq.n	800130c <HAL_RCC_OscConfig+0x654>
 80013d0:	e08d      	b.n	80014ee <HAL_RCC_OscConfig+0x836>
 80013d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	fa93 f2a3 	rbit	r2, r3
 80013ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013f4:	601a      	str	r2, [r3, #0]
  return result;
 80013f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013fe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	fab3 f383 	clz	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	4b8f      	ldr	r3, [pc, #572]	@ (8001648 <HAL_RCC_OscConfig+0x990>)
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	461a      	mov	r2, r3
 8001410:	2300      	movs	r3, #0
 8001412:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001414:	f7ff f998 	bl	8000748 <HAL_GetTick>
 8001418:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff f993 	bl	8000748 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d902      	bls.n	8001434 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	f000 bc5f 	b.w	8001cf2 <HAL_RCC_OscConfig+0x103a>
 8001434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001438:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800143c:	2202      	movs	r2, #2
 800143e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001444:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f2a3 	rbit	r2, r3
 800144e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001452:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001460:	2202      	movs	r2, #2
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001468:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	fa93 f2a3 	rbit	r2, r3
 8001472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001476:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001480:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001484:	2202      	movs	r2, #2
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	fa93 f2a3 	rbit	r2, r3
 8001496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800149a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800149e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b68      	ldr	r3, [pc, #416]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80014a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014ac:	2102      	movs	r1, #2
 80014ae:	6019      	str	r1, [r3, #0]
 80014b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f1a3 	rbit	r1, r3
 80014be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014c6:	6019      	str	r1, [r3, #0]
  return result;
 80014c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d197      	bne.n	800141e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 819c 	beq.w	800183c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b4e      	ldr	r3, [pc, #312]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d116      	bne.n	8001544 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b4b      	ldr	r3, [pc, #300]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a4a      	ldr	r2, [pc, #296]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b48      	ldr	r3, [pc, #288]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800152a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001538:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800153c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	4b41      	ldr	r3, [pc, #260]	@ (800164c <HAL_RCC_OscConfig+0x994>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d11a      	bne.n	8001586 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001550:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <HAL_RCC_OscConfig+0x994>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a3d      	ldr	r2, [pc, #244]	@ (800164c <HAL_RCC_OscConfig+0x994>)
 8001556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800155a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155c:	f7ff f8f4 	bl	8000748 <HAL_GetTick>
 8001560:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	e009      	b.n	800157a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001566:	f7ff f8ef 	bl	8000748 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	@ 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e3bb      	b.n	8001cf2 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157a:	4b34      	ldr	r3, [pc, #208]	@ (800164c <HAL_RCC_OscConfig+0x994>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0ef      	beq.n	8001566 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001586:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d106      	bne.n	80015a4 <HAL_RCC_OscConfig+0x8ec>
 8001596:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a2a      	ldr	r2, [pc, #168]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6213      	str	r3, [r2, #32]
 80015a2:	e035      	b.n	8001610 <HAL_RCC_OscConfig+0x958>
 80015a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x916>
 80015b4:	4b23      	ldr	r3, [pc, #140]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a22      	ldr	r2, [pc, #136]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	e020      	b.n	8001610 <HAL_RCC_OscConfig+0x958>
 80015ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x940>
 80015de:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4a18      	ldr	r2, [pc, #96]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6213      	str	r3, [r2, #32]
 80015ea:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a15      	ldr	r2, [pc, #84]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0x958>
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a11      	ldr	r2, [pc, #68]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a0e      	ldr	r2, [pc, #56]	@ (8001644 <HAL_RCC_OscConfig+0x98c>)
 800160a:	f023 0304 	bic.w	r3, r3, #4
 800160e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001614:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 8085 	beq.w	800172c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff f891 	bl	8000748 <HAL_GetTick>
 8001626:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162a:	e011      	b.n	8001650 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff f88c 	bl	8000748 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163c:	4293      	cmp	r3, r2
 800163e:	d907      	bls.n	8001650 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e356      	b.n	8001cf2 <HAL_RCC_OscConfig+0x103a>
 8001644:	40021000 	.word	0x40021000
 8001648:	10908120 	.word	0x10908120
 800164c:	40007000 	.word	0x40007000
 8001650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001654:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001660:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001678:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800167c:	2202      	movs	r2, #2
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001684:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	fa93 f2a3 	rbit	r2, r3
 800168e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001692:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001696:	601a      	str	r2, [r3, #0]
  return result;
 8001698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800169c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d102      	bne.n	80016b8 <HAL_RCC_OscConfig+0xa00>
 80016b2:	4b98      	ldr	r3, [pc, #608]	@ (8001914 <HAL_RCC_OscConfig+0xc5c>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	e013      	b.n	80016e0 <HAL_RCC_OscConfig+0xa28>
 80016b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016bc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016c0:	2202      	movs	r2, #2
 80016c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	fa93 f2a3 	rbit	r2, r3
 80016d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	4b8d      	ldr	r3, [pc, #564]	@ (8001914 <HAL_RCC_OscConfig+0xc5c>)
 80016de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016e4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80016e8:	2102      	movs	r1, #2
 80016ea:	6011      	str	r1, [r2, #0]
 80016ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016f0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	fa92 f1a2 	rbit	r1, r2
 80016fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016fe:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001702:	6011      	str	r1, [r2, #0]
  return result;
 8001704:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001708:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	fab2 f282 	clz	r2, r2
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	f002 021f 	and.w	r2, r2, #31
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d080      	beq.n	800162c <HAL_RCC_OscConfig+0x974>
 800172a:	e07d      	b.n	8001828 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172c:	f7ff f80c 	bl	8000748 <HAL_GetTick>
 8001730:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001734:	e00b      	b.n	800174e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff f807 	bl	8000748 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e2d1      	b.n	8001cf2 <HAL_RCC_OscConfig+0x103a>
 800174e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001752:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001756:	2202      	movs	r2, #2
 8001758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800175e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	fa93 f2a3 	rbit	r2, r3
 8001768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800176c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001776:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800177a:	2202      	movs	r2, #2
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001782:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fa93 f2a3 	rbit	r2, r3
 800178c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001790:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001794:	601a      	str	r2, [r3, #0]
  return result;
 8001796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800179e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_OscConfig+0xafe>
 80017b0:	4b58      	ldr	r3, [pc, #352]	@ (8001914 <HAL_RCC_OscConfig+0xc5c>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	e013      	b.n	80017de <HAL_RCC_OscConfig+0xb26>
 80017b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ba:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fa93 f2a3 	rbit	r2, r3
 80017d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	4b4e      	ldr	r3, [pc, #312]	@ (8001914 <HAL_RCC_OscConfig+0xc5c>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017e2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80017e6:	2102      	movs	r1, #2
 80017e8:	6011      	str	r1, [r2, #0]
 80017ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017ee:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	fa92 f1a2 	rbit	r1, r2
 80017f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017fc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001800:	6011      	str	r1, [r2, #0]
  return result;
 8001802:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001806:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d186      	bne.n	8001736 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001828:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b38      	ldr	r3, [pc, #224]	@ (8001914 <HAL_RCC_OscConfig+0xc5c>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	4a37      	ldr	r2, [pc, #220]	@ (8001914 <HAL_RCC_OscConfig+0xc5c>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001840:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8251 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184e:	4b31      	ldr	r3, [pc, #196]	@ (8001914 <HAL_RCC_OscConfig+0xc5c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	f000 820f 	beq.w	8001c7a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001860:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b02      	cmp	r3, #2
 800186a:	f040 8165 	bne.w	8001b38 <HAL_RCC_OscConfig+0xe80>
 800186e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001872:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001876:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800187a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001880:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	fa93 f2a3 	rbit	r2, r3
 800188a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001892:	601a      	str	r2, [r3, #0]
  return result;
 8001894:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001898:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800189c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	461a      	mov	r2, r3
 80018b0:	2300      	movs	r3, #0
 80018b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7fe ff48 	bl	8000748 <HAL_GetTick>
 80018b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018be:	f7fe ff43 	bl	8000748 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e20f      	b.n	8001cf2 <HAL_RCC_OscConfig+0x103a>
 80018d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80018da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	fa93 f2a3 	rbit	r2, r3
 80018ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018f6:	601a      	str	r2, [r3, #0]
  return result;
 80018f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001900:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b3f      	cmp	r3, #63	@ 0x3f
 800190a:	d805      	bhi.n	8001918 <HAL_RCC_OscConfig+0xc60>
 800190c:	4b01      	ldr	r3, [pc, #4]	@ (8001914 <HAL_RCC_OscConfig+0xc5c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	e02a      	b.n	8001968 <HAL_RCC_OscConfig+0xcb0>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001920:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f2a3 	rbit	r2, r3
 8001934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001938:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001942:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001946:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001950:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	4bca      	ldr	r3, [pc, #808]	@ (8001c90 <HAL_RCC_OscConfig+0xfd8>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800196c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001970:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001974:	6011      	str	r1, [r2, #0]
 8001976:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800197a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	fa92 f1a2 	rbit	r1, r2
 8001984:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001988:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800198c:	6011      	str	r1, [r2, #0]
  return result;
 800198e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001992:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	fab2 f282 	clz	r2, r2
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f042 0220 	orr.w	r2, r2, #32
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	f002 021f 	and.w	r2, r2, #31
 80019a8:	2101      	movs	r1, #1
 80019aa:	fa01 f202 	lsl.w	r2, r1, r2
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d184      	bne.n	80018be <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b4:	4bb6      	ldr	r3, [pc, #728]	@ (8001c90 <HAL_RCC_OscConfig+0xfd8>)
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	f023 020f 	bic.w	r2, r3, #15
 80019bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c8:	49b1      	ldr	r1, [pc, #708]	@ (8001c90 <HAL_RCC_OscConfig+0xfd8>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80019ce:	4bb0      	ldr	r3, [pc, #704]	@ (8001c90 <HAL_RCC_OscConfig+0xfd8>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80019d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a19      	ldr	r1, [r3, #32]
 80019e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	430b      	orrs	r3, r1
 80019f0:	49a7      	ldr	r1, [pc, #668]	@ (8001c90 <HAL_RCC_OscConfig+0xfd8>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
 80019f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80019fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a08:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a16:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a1a:	601a      	str	r2, [r3, #0]
  return result;
 8001a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a20:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a24:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	461a      	mov	r2, r3
 8001a38:	2301      	movs	r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7fe fe84 	bl	8000748 <HAL_GetTick>
 8001a40:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a44:	e009      	b.n	8001a5a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a46:	f7fe fe7f 	bl	8000748 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e14b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x103a>
 8001a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a7e:	601a      	str	r2, [r3, #0]
  return result;
 8001a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a84:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a8a:	fab3 f383 	clz	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a92:	d802      	bhi.n	8001a9a <HAL_RCC_OscConfig+0xde2>
 8001a94:	4b7e      	ldr	r3, [pc, #504]	@ (8001c90 <HAL_RCC_OscConfig+0xfd8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	e027      	b.n	8001aea <HAL_RCC_OscConfig+0xe32>
 8001a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001aa2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fa93 f2a3 	rbit	r2, r3
 8001ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001ac8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c90 <HAL_RCC_OscConfig+0xfd8>)
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aee:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001af2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001af6:	6011      	str	r1, [r2, #0]
 8001af8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001afc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	fa92 f1a2 	rbit	r1, r2
 8001b06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b0a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b0e:	6011      	str	r1, [r2, #0]
  return result;
 8001b10:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b14:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	fab2 f282 	clz	r2, r2
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f002 021f 	and.w	r2, r2, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d087      	beq.n	8001a46 <HAL_RCC_OscConfig+0xd8e>
 8001b36:	e0db      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1038>
 8001b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b58:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b5c:	601a      	str	r2, [r3, #0]
  return result;
 8001b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b62:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b66:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe fde3 	bl	8000748 <HAL_GetTick>
 8001b82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	e009      	b.n	8001b9c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7fe fdde 	bl	8000748 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0aa      	b.n	8001cf2 <HAL_RCC_OscConfig+0x103a>
 8001b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ba4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bbc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001bc0:	601a      	str	r2, [r3, #0]
  return result;
 8001bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001bca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bcc:	fab3 f383 	clz	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bd4:	d802      	bhi.n	8001bdc <HAL_RCC_OscConfig+0xf24>
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <HAL_RCC_OscConfig+0xfd8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	e027      	b.n	8001c2c <HAL_RCC_OscConfig+0xf74>
 8001bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001be4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bee:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	fa93 f2a3 	rbit	r2, r3
 8001bf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c06:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c14:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c22:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <HAL_RCC_OscConfig+0xfd8>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c30:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c34:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c38:	6011      	str	r1, [r2, #0]
 8001c3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c3e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	fa92 f1a2 	rbit	r1, r2
 8001c48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c4c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c50:	6011      	str	r1, [r2, #0]
  return result;
 8001c52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c56:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f002 021f 	and.w	r2, r2, #31
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d187      	bne.n	8001b88 <HAL_RCC_OscConfig+0xed0>
 8001c78:	e03a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d104      	bne.n	8001c94 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e031      	b.n	8001cf2 <HAL_RCC_OscConfig+0x103a>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <HAL_RCC_OscConfig+0x1044>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <HAL_RCC_OscConfig+0x1044>)
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ca4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ca8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d117      	bne.n	8001cec <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001cbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cc0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d10b      	bne.n	8001cec <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cd8:	f003 020f 	and.w	r2, r3, #15
 8001cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b09e      	sub	sp, #120	@ 0x78
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e154      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b89      	ldr	r3, [pc, #548]	@ (8001f40 <HAL_RCC_ClockConfig+0x240>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b86      	ldr	r3, [pc, #536]	@ (8001f40 <HAL_RCC_ClockConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4984      	ldr	r1, [pc, #528]	@ (8001f40 <HAL_RCC_ClockConfig+0x240>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b82      	ldr	r3, [pc, #520]	@ (8001f40 <HAL_RCC_ClockConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e13c      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b7b      	ldr	r3, [pc, #492]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4978      	ldr	r1, [pc, #480]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80cd 	beq.w	8001f0e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d137      	bne.n	8001dec <HAL_RCC_ClockConfig+0xec>
 8001d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d80:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001d8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d94:	d802      	bhi.n	8001d9c <HAL_RCC_ClockConfig+0x9c>
 8001d96:	4b6b      	ldr	r3, [pc, #428]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	e00f      	b.n	8001dbc <HAL_RCC_ClockConfig+0xbc>
 8001d9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001da0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	667b      	str	r3, [r7, #100]	@ 0x64
 8001daa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dae:	663b      	str	r3, [r7, #96]	@ 0x60
 8001db0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001db8:	4b62      	ldr	r3, [pc, #392]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001dc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dc4:	fa92 f2a2 	rbit	r2, r2
 8001dc8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001dca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001dcc:	fab2 f282 	clz	r2, r2
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	f042 0220 	orr.w	r2, r2, #32
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f002 021f 	and.w	r2, r2, #31
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f202 	lsl.w	r2, r1, r2
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d171      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0ea      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d137      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x164>
 8001df4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001df8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e0c:	d802      	bhi.n	8001e14 <HAL_RCC_ClockConfig+0x114>
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_ClockConfig+0x134>
 8001e14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e26:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e30:	4b44      	ldr	r3, [pc, #272]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e38:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001e42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f002 021f 	and.w	r2, r2, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d135      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0ae      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2c2>
 8001e64:	2302      	movs	r3, #2
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e7a:	d802      	bhi.n	8001e82 <HAL_RCC_ClockConfig+0x182>
 8001e7c:	4b31      	ldr	r3, [pc, #196]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	e00d      	b.n	8001e9e <HAL_RCC_ClockConfig+0x19e>
 8001e82:	2302      	movs	r3, #2
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8e:	2302      	movs	r3, #2
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	61ba      	str	r2, [r7, #24]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	fa92 f2a2 	rbit	r2, r2
 8001ea8:	617a      	str	r2, [r7, #20]
  return result;
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e07a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 0203 	bic.w	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	491a      	ldr	r1, [pc, #104]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ede:	f7fe fc33 	bl	8000748 <HAL_GetTick>
 8001ee2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee6:	f7fe fc2f 	bl	8000748 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e062      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efc:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_RCC_ClockConfig+0x244>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 020c 	and.w	r2, r3, #12
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d1eb      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <HAL_RCC_ClockConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d215      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <HAL_RCC_ClockConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 0207 	bic.w	r2, r3, #7
 8001f24:	4906      	ldr	r1, [pc, #24]	@ (8001f40 <HAL_RCC_ClockConfig+0x240>)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2c:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <HAL_RCC_ClockConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d006      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e041      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x2c2>
 8001f3e:	bf00      	nop
 8001f40:	40022000 	.word	0x40022000
 8001f44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_RCC_ClockConfig+0x2cc>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	491a      	ldr	r1, [pc, #104]	@ (8001fcc <HAL_RCC_ClockConfig+0x2cc>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f72:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <HAL_RCC_ClockConfig+0x2cc>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4912      	ldr	r1, [pc, #72]	@ (8001fcc <HAL_RCC_ClockConfig+0x2cc>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f86:	f000 f829 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f8a:	4601      	mov	r1, r0
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <HAL_RCC_ClockConfig+0x2cc>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f94:	22f0      	movs	r2, #240	@ 0xf0
 8001f96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	fa92 f2a2 	rbit	r2, r2
 8001f9e:	60fa      	str	r2, [r7, #12]
  return result;
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	fab2 f282 	clz	r2, r2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	40d3      	lsrs	r3, r2
 8001faa:	4a09      	ldr	r2, [pc, #36]	@ (8001fd0 <HAL_RCC_ClockConfig+0x2d0>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	fa21 f303 	lsr.w	r3, r1, r3
 8001fb2:	4a08      	ldr	r2, [pc, #32]	@ (8001fd4 <HAL_RCC_ClockConfig+0x2d4>)
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <HAL_RCC_ClockConfig+0x2d8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fb80 	bl	80006c0 <HAL_InitTick>
  
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3778      	adds	r7, #120	@ 0x78
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08003000 	.word	0x08003000
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x30>
 8002006:	2b08      	cmp	r3, #8
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x36>
 800200a:	e029      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800200e:	613b      	str	r3, [r7, #16]
      break;
 8002010:	e029      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	0c9b      	lsrs	r3, r3, #18
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	4a18      	ldr	r2, [pc, #96]	@ (800207c <HAL_RCC_GetSysClockFreq+0xa0>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002020:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	4a15      	ldr	r2, [pc, #84]	@ (8002080 <HAL_RCC_GetSysClockFreq+0xa4>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002038:	4a0f      	ldr	r2, [pc, #60]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e007      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800204a:	4a0b      	ldr	r2, [pc, #44]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	613b      	str	r3, [r7, #16]
      break;
 800205e:	e002      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002060:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002062:	613b      	str	r3, [r7, #16]
      break;
 8002064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002066:	693b      	ldr	r3, [r7, #16]
}
 8002068:	4618      	mov	r0, r3
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40021000 	.word	0x40021000
 8002078:	007a1200 	.word	0x007a1200
 800207c:	08003018 	.word	0x08003018
 8002080:	08003028 	.word	0x08003028

08002084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <HAL_RCC_GetHCLKFreq+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000000 	.word	0x20000000

0800209c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020a2:	f7ff ffef 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020a6:	4601      	mov	r1, r0
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020b0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	fa92 f2a2 	rbit	r2, r2
 80020bc:	603a      	str	r2, [r7, #0]
  return result;
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	40d3      	lsrs	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08003010 	.word	0x08003010

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020e6:	f7ff ffcd 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020ea:	4601      	mov	r1, r0
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80020f4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80020f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	fa92 f2a2 	rbit	r2, r2
 8002100:	603a      	str	r2, [r7, #0]
  return result;
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	40d3      	lsrs	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <HAL_RCC_GetPCLK2Freq+0x40>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	08003010 	.word	0x08003010

08002124 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b092      	sub	sp, #72	@ 0x48
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80d2 	beq.w	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002148:	4b4d      	ldr	r3, [pc, #308]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10e      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	4b4a      	ldr	r3, [pc, #296]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	4a49      	ldr	r2, [pc, #292]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800215a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215e:	61d3      	str	r3, [r2, #28]
 8002160:	4b47      	ldr	r3, [pc, #284]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216c:	2301      	movs	r3, #1
 800216e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b44      	ldr	r3, [pc, #272]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d118      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217e:	4b41      	ldr	r3, [pc, #260]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a40      	ldr	r2, [pc, #256]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002188:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218a:	f7fe fadd 	bl	8000748 <HAL_GetTick>
 800218e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	e008      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7fe fad9 	bl	8000748 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b64      	cmp	r3, #100	@ 0x64
 800219e:	d901      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1d4      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b37      	ldr	r3, [pc, #220]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021b0:	4b33      	ldr	r3, [pc, #204]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8082 	beq.w	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d07a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80021e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b25      	ldr	r3, [pc, #148]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	461a      	mov	r2, r3
 80021fa:	2301      	movs	r3, #1
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002202:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800220c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	461a      	mov	r2, r3
 800221e:	2300      	movs	r3, #0
 8002220:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002222:	4a17      	ldr	r2, [pc, #92]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002226:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d049      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe fa89 	bl	8000748 <HAL_GetTick>
 8002236:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fa85 	bl	8000748 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e17e      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002250:	2302      	movs	r3, #2
 8002252:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
 800225c:	2302      	movs	r3, #2
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	61fb      	str	r3, [r7, #28]
  return result;
 8002268:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d108      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800227a:	4b01      	ldr	r3, [pc, #4]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	e00d      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
 8002288:	10908100 	.word	0x10908100
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	4b9a      	ldr	r3, [pc, #616]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	2202      	movs	r2, #2
 800229e:	613a      	str	r2, [r7, #16]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	fa92 f2a2 	rbit	r2, r2
 80022a6:	60fa      	str	r2, [r7, #12]
  return result;
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	fab2 f282 	clz	r2, r2
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	f002 021f 	and.w	r2, r2, #31
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0b9      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	498c      	ldr	r1, [pc, #560]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e0:	4b88      	ldr	r3, [pc, #544]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	4a87      	ldr	r2, [pc, #540]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f8:	4b82      	ldr	r3, [pc, #520]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fc:	f023 0203 	bic.w	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	497f      	ldr	r1, [pc, #508]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002306:	4313      	orrs	r3, r2
 8002308:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002316:	4b7b      	ldr	r3, [pc, #492]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	4978      	ldr	r1, [pc, #480]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002334:	4b73      	ldr	r3, [pc, #460]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	4970      	ldr	r1, [pc, #448]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002342:	4313      	orrs	r3, r2
 8002344:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002352:	4b6c      	ldr	r3, [pc, #432]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f023 0210 	bic.w	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4969      	ldr	r1, [pc, #420]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002370:	4b64      	ldr	r3, [pc, #400]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237c:	4961      	ldr	r1, [pc, #388]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238e:	4b5d      	ldr	r3, [pc, #372]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	f023 0220 	bic.w	r2, r3, #32
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	495a      	ldr	r1, [pc, #360]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ac:	4b55      	ldr	r3, [pc, #340]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	4952      	ldr	r1, [pc, #328]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	494b      	ldr	r1, [pc, #300]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023e8:	4b46      	ldr	r3, [pc, #280]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4943      	ldr	r1, [pc, #268]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002406:	4b3f      	ldr	r3, [pc, #252]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	493c      	ldr	r1, [pc, #240]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002424:	4b37      	ldr	r3, [pc, #220]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	4934      	ldr	r1, [pc, #208]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002432:	4313      	orrs	r3, r2
 8002434:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002442:	4b30      	ldr	r3, [pc, #192]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002446:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	492d      	ldr	r1, [pc, #180]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002450:	4313      	orrs	r3, r2
 8002452:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002460:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246c:	4925      	ldr	r1, [pc, #148]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800247e:	4b21      	ldr	r3, [pc, #132]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	491e      	ldr	r1, [pc, #120]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a8:	4916      	ldr	r1, [pc, #88]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024ba:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c6:	490f      	ldr	r1, [pc, #60]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e4:	4907      	ldr	r1, [pc, #28]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80024f6:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	e002      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250a:	4913      	ldr	r1, [pc, #76]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800250c:	4313      	orrs	r3, r2
 800250e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800251c:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002528:	490b      	ldr	r1, [pc, #44]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800252a:	4313      	orrs	r3, r2
 800252c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800253a:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002546:	4904      	ldr	r1, [pc, #16]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002548:	4313      	orrs	r3, r2
 800254a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3748      	adds	r7, #72	@ 0x48
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e040      	b.n	80025f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fd ffda 	bl	8000538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2224      	movs	r2, #36	@ 0x24
 8002588:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0201 	bic.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fa86 	bl	8002ab4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f8af 	bl	800270c <UART_SetConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e01b      	b.n	80025f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fb05 	bl	8002bf8 <UART_CheckIdleState>
 80025ee:	4603      	mov	r3, r0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800260c:	2b20      	cmp	r3, #32
 800260e:	d177      	bne.n	8002700 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_UART_Transmit+0x24>
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e070      	b.n	8002702 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2221      	movs	r2, #33	@ 0x21
 800262c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800262e:	f7fe f88b 	bl	8000748 <HAL_GetTick>
 8002632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	88fa      	ldrh	r2, [r7, #6]
 8002638:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	88fa      	ldrh	r2, [r7, #6]
 8002640:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800264c:	d108      	bne.n	8002660 <HAL_UART_Transmit+0x68>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d104      	bne.n	8002660 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	e003      	b.n	8002668 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002668:	e02f      	b.n	80026ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2200      	movs	r2, #0
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fb67 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e03b      	b.n	8002702 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	881a      	ldrh	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800269c:	b292      	uxth	r2, r2
 800269e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	3302      	adds	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e007      	b.n	80026b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1c9      	bne.n	800266a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2200      	movs	r2, #0
 80026de:	2140      	movs	r1, #64	@ 0x40
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fb31 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e005      	b.n	8002702 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e000      	b.n	8002702 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b92      	ldr	r3, [pc, #584]	@ (8002980 <UART_SetConfig+0x274>)
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	6979      	ldr	r1, [r7, #20]
 8002740:	430b      	orrs	r3, r1
 8002742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	430a      	orrs	r2, r1
 800277c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a80      	ldr	r2, [pc, #512]	@ (8002984 <UART_SetConfig+0x278>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d120      	bne.n	80027ca <UART_SetConfig+0xbe>
 8002788:	4b7f      	ldr	r3, [pc, #508]	@ (8002988 <UART_SetConfig+0x27c>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b03      	cmp	r3, #3
 8002792:	d817      	bhi.n	80027c4 <UART_SetConfig+0xb8>
 8002794:	a201      	add	r2, pc, #4	@ (adr r2, 800279c <UART_SetConfig+0x90>)
 8002796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279a:	bf00      	nop
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	080027b9 	.word	0x080027b9
 80027a4:	080027bf 	.word	0x080027bf
 80027a8:	080027b3 	.word	0x080027b3
 80027ac:	2301      	movs	r3, #1
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e0b5      	b.n	800291e <UART_SetConfig+0x212>
 80027b2:	2302      	movs	r3, #2
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e0b2      	b.n	800291e <UART_SetConfig+0x212>
 80027b8:	2304      	movs	r3, #4
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e0af      	b.n	800291e <UART_SetConfig+0x212>
 80027be:	2308      	movs	r3, #8
 80027c0:	77fb      	strb	r3, [r7, #31]
 80027c2:	e0ac      	b.n	800291e <UART_SetConfig+0x212>
 80027c4:	2310      	movs	r3, #16
 80027c6:	77fb      	strb	r3, [r7, #31]
 80027c8:	e0a9      	b.n	800291e <UART_SetConfig+0x212>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6f      	ldr	r2, [pc, #444]	@ (800298c <UART_SetConfig+0x280>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d124      	bne.n	800281e <UART_SetConfig+0x112>
 80027d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002988 <UART_SetConfig+0x27c>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027e0:	d011      	beq.n	8002806 <UART_SetConfig+0xfa>
 80027e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027e6:	d817      	bhi.n	8002818 <UART_SetConfig+0x10c>
 80027e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027ec:	d011      	beq.n	8002812 <UART_SetConfig+0x106>
 80027ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027f2:	d811      	bhi.n	8002818 <UART_SetConfig+0x10c>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <UART_SetConfig+0xf4>
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027fc:	d006      	beq.n	800280c <UART_SetConfig+0x100>
 80027fe:	e00b      	b.n	8002818 <UART_SetConfig+0x10c>
 8002800:	2300      	movs	r3, #0
 8002802:	77fb      	strb	r3, [r7, #31]
 8002804:	e08b      	b.n	800291e <UART_SetConfig+0x212>
 8002806:	2302      	movs	r3, #2
 8002808:	77fb      	strb	r3, [r7, #31]
 800280a:	e088      	b.n	800291e <UART_SetConfig+0x212>
 800280c:	2304      	movs	r3, #4
 800280e:	77fb      	strb	r3, [r7, #31]
 8002810:	e085      	b.n	800291e <UART_SetConfig+0x212>
 8002812:	2308      	movs	r3, #8
 8002814:	77fb      	strb	r3, [r7, #31]
 8002816:	e082      	b.n	800291e <UART_SetConfig+0x212>
 8002818:	2310      	movs	r3, #16
 800281a:	77fb      	strb	r3, [r7, #31]
 800281c:	e07f      	b.n	800291e <UART_SetConfig+0x212>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a5b      	ldr	r2, [pc, #364]	@ (8002990 <UART_SetConfig+0x284>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d124      	bne.n	8002872 <UART_SetConfig+0x166>
 8002828:	4b57      	ldr	r3, [pc, #348]	@ (8002988 <UART_SetConfig+0x27c>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002830:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002834:	d011      	beq.n	800285a <UART_SetConfig+0x14e>
 8002836:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800283a:	d817      	bhi.n	800286c <UART_SetConfig+0x160>
 800283c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002840:	d011      	beq.n	8002866 <UART_SetConfig+0x15a>
 8002842:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002846:	d811      	bhi.n	800286c <UART_SetConfig+0x160>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <UART_SetConfig+0x148>
 800284c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002850:	d006      	beq.n	8002860 <UART_SetConfig+0x154>
 8002852:	e00b      	b.n	800286c <UART_SetConfig+0x160>
 8002854:	2300      	movs	r3, #0
 8002856:	77fb      	strb	r3, [r7, #31]
 8002858:	e061      	b.n	800291e <UART_SetConfig+0x212>
 800285a:	2302      	movs	r3, #2
 800285c:	77fb      	strb	r3, [r7, #31]
 800285e:	e05e      	b.n	800291e <UART_SetConfig+0x212>
 8002860:	2304      	movs	r3, #4
 8002862:	77fb      	strb	r3, [r7, #31]
 8002864:	e05b      	b.n	800291e <UART_SetConfig+0x212>
 8002866:	2308      	movs	r3, #8
 8002868:	77fb      	strb	r3, [r7, #31]
 800286a:	e058      	b.n	800291e <UART_SetConfig+0x212>
 800286c:	2310      	movs	r3, #16
 800286e:	77fb      	strb	r3, [r7, #31]
 8002870:	e055      	b.n	800291e <UART_SetConfig+0x212>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a47      	ldr	r2, [pc, #284]	@ (8002994 <UART_SetConfig+0x288>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d124      	bne.n	80028c6 <UART_SetConfig+0x1ba>
 800287c:	4b42      	ldr	r3, [pc, #264]	@ (8002988 <UART_SetConfig+0x27c>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002884:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002888:	d011      	beq.n	80028ae <UART_SetConfig+0x1a2>
 800288a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800288e:	d817      	bhi.n	80028c0 <UART_SetConfig+0x1b4>
 8002890:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002894:	d011      	beq.n	80028ba <UART_SetConfig+0x1ae>
 8002896:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800289a:	d811      	bhi.n	80028c0 <UART_SetConfig+0x1b4>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <UART_SetConfig+0x19c>
 80028a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028a4:	d006      	beq.n	80028b4 <UART_SetConfig+0x1a8>
 80028a6:	e00b      	b.n	80028c0 <UART_SetConfig+0x1b4>
 80028a8:	2300      	movs	r3, #0
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e037      	b.n	800291e <UART_SetConfig+0x212>
 80028ae:	2302      	movs	r3, #2
 80028b0:	77fb      	strb	r3, [r7, #31]
 80028b2:	e034      	b.n	800291e <UART_SetConfig+0x212>
 80028b4:	2304      	movs	r3, #4
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e031      	b.n	800291e <UART_SetConfig+0x212>
 80028ba:	2308      	movs	r3, #8
 80028bc:	77fb      	strb	r3, [r7, #31]
 80028be:	e02e      	b.n	800291e <UART_SetConfig+0x212>
 80028c0:	2310      	movs	r3, #16
 80028c2:	77fb      	strb	r3, [r7, #31]
 80028c4:	e02b      	b.n	800291e <UART_SetConfig+0x212>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a33      	ldr	r2, [pc, #204]	@ (8002998 <UART_SetConfig+0x28c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d124      	bne.n	800291a <UART_SetConfig+0x20e>
 80028d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002988 <UART_SetConfig+0x27c>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80028d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028dc:	d011      	beq.n	8002902 <UART_SetConfig+0x1f6>
 80028de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028e2:	d817      	bhi.n	8002914 <UART_SetConfig+0x208>
 80028e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028e8:	d011      	beq.n	800290e <UART_SetConfig+0x202>
 80028ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028ee:	d811      	bhi.n	8002914 <UART_SetConfig+0x208>
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <UART_SetConfig+0x1f0>
 80028f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028f8:	d006      	beq.n	8002908 <UART_SetConfig+0x1fc>
 80028fa:	e00b      	b.n	8002914 <UART_SetConfig+0x208>
 80028fc:	2300      	movs	r3, #0
 80028fe:	77fb      	strb	r3, [r7, #31]
 8002900:	e00d      	b.n	800291e <UART_SetConfig+0x212>
 8002902:	2302      	movs	r3, #2
 8002904:	77fb      	strb	r3, [r7, #31]
 8002906:	e00a      	b.n	800291e <UART_SetConfig+0x212>
 8002908:	2304      	movs	r3, #4
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e007      	b.n	800291e <UART_SetConfig+0x212>
 800290e:	2308      	movs	r3, #8
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	e004      	b.n	800291e <UART_SetConfig+0x212>
 8002914:	2310      	movs	r3, #16
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e001      	b.n	800291e <UART_SetConfig+0x212>
 800291a:	2310      	movs	r3, #16
 800291c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002926:	d16b      	bne.n	8002a00 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002928:	7ffb      	ldrb	r3, [r7, #31]
 800292a:	2b08      	cmp	r3, #8
 800292c:	d838      	bhi.n	80029a0 <UART_SetConfig+0x294>
 800292e:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <UART_SetConfig+0x228>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002959 	.word	0x08002959
 8002938:	08002961 	.word	0x08002961
 800293c:	08002969 	.word	0x08002969
 8002940:	080029a1 	.word	0x080029a1
 8002944:	0800296f 	.word	0x0800296f
 8002948:	080029a1 	.word	0x080029a1
 800294c:	080029a1 	.word	0x080029a1
 8002950:	080029a1 	.word	0x080029a1
 8002954:	08002977 	.word	0x08002977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002958:	f7ff fba0 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 800295c:	61b8      	str	r0, [r7, #24]
        break;
 800295e:	e024      	b.n	80029aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002960:	f7ff fbbe 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002964:	61b8      	str	r0, [r7, #24]
        break;
 8002966:	e020      	b.n	80029aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <UART_SetConfig+0x290>)
 800296a:	61bb      	str	r3, [r7, #24]
        break;
 800296c:	e01d      	b.n	80029aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800296e:	f7ff fb35 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8002972:	61b8      	str	r0, [r7, #24]
        break;
 8002974:	e019      	b.n	80029aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800297a:	61bb      	str	r3, [r7, #24]
        break;
 800297c:	e015      	b.n	80029aa <UART_SetConfig+0x29e>
 800297e:	bf00      	nop
 8002980:	efff69f3 	.word	0xefff69f3
 8002984:	40013800 	.word	0x40013800
 8002988:	40021000 	.word	0x40021000
 800298c:	40004400 	.word	0x40004400
 8002990:	40004800 	.word	0x40004800
 8002994:	40004c00 	.word	0x40004c00
 8002998:	40005000 	.word	0x40005000
 800299c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	77bb      	strb	r3, [r7, #30]
        break;
 80029a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d073      	beq.n	8002a98 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	005a      	lsls	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	441a      	add	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d916      	bls.n	80029fa <UART_SetConfig+0x2ee>
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d2:	d212      	bcs.n	80029fa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	f023 030f 	bic.w	r3, r3, #15
 80029dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	89fb      	ldrh	r3, [r7, #14]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	89fa      	ldrh	r2, [r7, #14]
 80029f6:	60da      	str	r2, [r3, #12]
 80029f8:	e04e      	b.n	8002a98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	77bb      	strb	r3, [r7, #30]
 80029fe:	e04b      	b.n	8002a98 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a00:	7ffb      	ldrb	r3, [r7, #31]
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d827      	bhi.n	8002a56 <UART_SetConfig+0x34a>
 8002a06:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <UART_SetConfig+0x300>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a31 	.word	0x08002a31
 8002a10:	08002a39 	.word	0x08002a39
 8002a14:	08002a41 	.word	0x08002a41
 8002a18:	08002a57 	.word	0x08002a57
 8002a1c:	08002a47 	.word	0x08002a47
 8002a20:	08002a57 	.word	0x08002a57
 8002a24:	08002a57 	.word	0x08002a57
 8002a28:	08002a57 	.word	0x08002a57
 8002a2c:	08002a4f 	.word	0x08002a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a30:	f7ff fb34 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8002a34:	61b8      	str	r0, [r7, #24]
        break;
 8002a36:	e013      	b.n	8002a60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a38:	f7ff fb52 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002a3c:	61b8      	str	r0, [r7, #24]
        break;
 8002a3e:	e00f      	b.n	8002a60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab0 <UART_SetConfig+0x3a4>)
 8002a42:	61bb      	str	r3, [r7, #24]
        break;
 8002a44:	e00c      	b.n	8002a60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a46:	f7ff fac9 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8002a4a:	61b8      	str	r0, [r7, #24]
        break;
 8002a4c:	e008      	b.n	8002a60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a52:	61bb      	str	r3, [r7, #24]
        break;
 8002a54:	e004      	b.n	8002a60 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a5e:	bf00      	nop
    }

    if (pclk != 0U)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d018      	beq.n	8002a98 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	085a      	lsrs	r2, r3, #1
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	441a      	add	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b0f      	cmp	r3, #15
 8002a7e:	d909      	bls.n	8002a94 <UART_SetConfig+0x388>
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a86:	d205      	bcs.n	8002a94 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	e001      	b.n	8002a98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002aa4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	007a1200 	.word	0x007a1200

08002ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01a      	beq.n	8002bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bb2:	d10a      	bne.n	8002bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b098      	sub	sp, #96	@ 0x60
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c08:	f7fd fd9e 	bl	8000748 <HAL_GetTick>
 8002c0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d12e      	bne.n	8002c7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c24:	2200      	movs	r2, #0
 8002c26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f88c 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d021      	beq.n	8002c7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3e:	e853 3f00 	ldrex	r3, [r3]
 8002c42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c5c:	e841 2300 	strex	r3, r2, [r1]
 8002c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e6      	bne.n	8002c36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e062      	b.n	8002d40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d149      	bne.n	8002d1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c90:	2200      	movs	r2, #0
 8002c92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f856 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d03c      	beq.n	8002d1c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	623b      	str	r3, [r7, #32]
   return(result);
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e6      	bne.n	8002ca2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3308      	adds	r3, #8
 8002cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cf4:	61fa      	str	r2, [r7, #28]
 8002cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	69b9      	ldr	r1, [r7, #24]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	e841 2300 	strex	r3, r2, [r1]
 8002d00:	617b      	str	r3, [r7, #20]
   return(result);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e5      	bne.n	8002cd4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e011      	b.n	8002d40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3758      	adds	r7, #88	@ 0x58
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d58:	e04f      	b.n	8002dfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d04b      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7fd fcf1 	bl	8000748 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e04e      	b.n	8002e1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d037      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b80      	cmp	r3, #128	@ 0x80
 8002d8e:	d034      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b40      	cmp	r3, #64	@ 0x40
 8002d94:	d031      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d110      	bne.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2208      	movs	r2, #8
 8002daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f838 	bl	8002e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2208      	movs	r2, #8
 8002db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e029      	b.n	8002e1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dd4:	d111      	bne.n	8002dfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f81e 	bl	8002e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e00f      	b.n	8002e1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4013      	ands	r3, r2
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d0a0      	beq.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b095      	sub	sp, #84	@ 0x54
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e50:	e841 2300 	strex	r3, r2, [r1]
 8002e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e6      	bne.n	8002e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3308      	adds	r3, #8
 8002e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	e853 3f00 	ldrex	r3, [r3]
 8002e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3308      	adds	r3, #8
 8002e7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e84:	e841 2300 	strex	r3, r2, [r1]
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e5      	bne.n	8002e5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d118      	bne.n	8002eca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f023 0310 	bic.w	r3, r3, #16
 8002eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6979      	ldr	r1, [r7, #20]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e6      	bne.n	8002e98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002ede:	bf00      	nop
 8002ee0:	3754      	adds	r7, #84	@ 0x54
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <memset>:
 8002eea:	4402      	add	r2, r0
 8002eec:	4603      	mov	r3, r0
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d100      	bne.n	8002ef4 <memset+0xa>
 8002ef2:	4770      	bx	lr
 8002ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef8:	e7f9      	b.n	8002eee <memset+0x4>
	...

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4d0d      	ldr	r5, [pc, #52]	@ (8002f34 <__libc_init_array+0x38>)
 8002f00:	4c0d      	ldr	r4, [pc, #52]	@ (8002f38 <__libc_init_array+0x3c>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	2600      	movs	r6, #0
 8002f08:	42a6      	cmp	r6, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8002f3c <__libc_init_array+0x40>)
 8002f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8002f40 <__libc_init_array+0x44>)
 8002f10:	f000 f818 	bl	8002f44 <_init>
 8002f14:	1b64      	subs	r4, r4, r5
 8002f16:	10a4      	asrs	r4, r4, #2
 8002f18:	2600      	movs	r6, #0
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f24:	4798      	blx	r3
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2e:	4798      	blx	r3
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	08003040 	.word	0x08003040
 8002f38:	08003040 	.word	0x08003040
 8002f3c:	08003040 	.word	0x08003040
 8002f40:	08003044 	.word	0x08003044

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr
