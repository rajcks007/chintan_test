
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005380  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005520  08005520  00006520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ec  080056ec  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056ec  080056ec  000066ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056f4  080056f4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056f8  080056f8  000066f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080056fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000002f8  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000354  20000354  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af69  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018cf  00000000  00000000  00011ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  000138c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000670  00000000  00000000  00014118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002090c  00000000  00000000  00014788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c74d  00000000  00000000  00035094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9557  00000000  00000000  000417e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ad38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000264c  00000000  00000000  0010ad7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0010d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005508 	.word	0x08005508

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005508 	.word	0x08005508

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fe74 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f874 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 fa7a 	bl	8000794 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a0:	f000 fa48 	bl	8000734 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002a4:	f000 f8d0 	bl	8000448 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002a8:	f000 f968 	bl	800057c <MX_ADC2_Init>
  MX_ADC3_Init();
 80002ac:	f000 f9c4 	bl	8000638 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  initalization();
 80002b0:	f000 fbe4 	bl	8000a7c <initalization>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start(&hadc2);
 80002b4:	482c      	ldr	r0, [pc, #176]	@ (8000368 <main+0xd8>)
 80002b6:	f001 f8e7 	bl	8001488 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc3);
 80002ba:	482c      	ldr	r0, [pc, #176]	@ (800036c <main+0xdc>)
 80002bc:	f001 f8e4 	bl	8001488 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80002c0:	f04f 31ff 	mov.w	r1, #4294967295
 80002c4:	4828      	ldr	r0, [pc, #160]	@ (8000368 <main+0xd8>)
 80002c6:	f001 fa2b 	bl	8001720 <HAL_ADC_PollForConversion>
	csc_out = HAL_ADC_GetValue(&hadc2);
 80002ca:	4827      	ldr	r0, [pc, #156]	@ (8000368 <main+0xd8>)
 80002cc:	f001 fb2a 	bl	8001924 <HAL_ADC_GetValue>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	4b26      	ldr	r3, [pc, #152]	@ (8000370 <main+0xe0>)
 80002d6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80002d8:	f04f 31ff 	mov.w	r1, #4294967295
 80002dc:	4823      	ldr	r0, [pc, #140]	@ (800036c <main+0xdc>)
 80002de:	f001 fa1f 	bl	8001720 <HAL_ADC_PollForConversion>
	pgood = HAL_ADC_GetValue(&hadc3);
 80002e2:	4822      	ldr	r0, [pc, #136]	@ (800036c <main+0xdc>)
 80002e4:	f001 fb1e 	bl	8001924 <HAL_ADC_GetValue>
 80002e8:	4603      	mov	r3, r0
 80002ea:	b29a      	uxth	r2, r3
 80002ec:	4b21      	ldr	r3, [pc, #132]	@ (8000374 <main+0xe4>)
 80002ee:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 80002f0:	2064      	movs	r0, #100	@ 0x64
 80002f2:	f000 feab 	bl	800104c <HAL_Delay>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80002f6:	f04f 31ff 	mov.w	r1, #4294967295
 80002fa:	481c      	ldr	r0, [pc, #112]	@ (800036c <main+0xdc>)
 80002fc:	f001 fa10 	bl	8001720 <HAL_ADC_PollForConversion>
	ovp = HAL_ADC_GetValue(&hadc3);
 8000300:	481a      	ldr	r0, [pc, #104]	@ (800036c <main+0xdc>)
 8000302:	f001 fb0f 	bl	8001924 <HAL_ADC_GetValue>
 8000306:	4603      	mov	r3, r0
 8000308:	b29a      	uxth	r2, r3
 800030a:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <main+0xe8>)
 800030c:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 800030e:	2064      	movs	r0, #100	@ 0x64
 8000310:	f000 fe9c 	bl	800104c <HAL_Delay>
	if(pgood > 2000 && ovp > 2000)
 8000314:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <main+0xe4>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800031c:	d90a      	bls.n	8000334 <main+0xa4>
 800031e:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <main+0xe8>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000326:	d905      	bls.n	8000334 <main+0xa4>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000328:	2120      	movs	r1, #32
 800032a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800032e:	f002 fb03 	bl	8002938 <HAL_GPIO_TogglePin>
 8000332:	e00f      	b.n	8000354 <main+0xc4>
	else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2101      	movs	r1, #1
 8000338:	4810      	ldr	r0, [pc, #64]	@ (800037c <main+0xec>)
 800033a:	f002 fae5 	bl	8002908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2110      	movs	r1, #16
 8000342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000346:	f002 fadf 	bl	8002908 <HAL_GPIO_WritePin>
		send_msg("pggod or ovp is not ok \r\n");
 800034a:	480d      	ldr	r0, [pc, #52]	@ (8000380 <main+0xf0>)
 800034c:	f000 fc48 	bl	8000be0 <send_msg>
		check_gpio_and_reset();
 8000350:	f000 fb68 	bl	8000a24 <check_gpio_and_reset>
	}
	HAL_ADC_Stop(&hadc2);
 8000354:	4804      	ldr	r0, [pc, #16]	@ (8000368 <main+0xd8>)
 8000356:	f001 f9ad 	bl	80016b4 <HAL_ADC_Stop>
	HAL_ADC_Stop(&hadc3);
 800035a:	4804      	ldr	r0, [pc, #16]	@ (800036c <main+0xdc>)
 800035c:	f001 f9aa 	bl	80016b4 <HAL_ADC_Stop>
	HAL_Delay(100);
 8000360:	2064      	movs	r0, #100	@ 0x64
 8000362:	f000 fe73 	bl	800104c <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 8000366:	e7a5      	b.n	80002b4 <main+0x24>
 8000368:	200000c8 	.word	0x200000c8
 800036c:	20000118 	.word	0x20000118
 8000370:	200001f8 	.word	0x200001f8
 8000374:	200001fa 	.word	0x200001fa
 8000378:	200001fc 	.word	0x200001fc
 800037c:	48000400 	.word	0x48000400
 8000380:	08005520 	.word	0x08005520

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b0a6      	sub	sp, #152	@ 0x98
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800038e:	2228      	movs	r2, #40	@ 0x28
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f004 fc3a 	bl	8004c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2258      	movs	r2, #88	@ 0x58
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f004 fc2c 	bl	8004c0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b4:	2302      	movs	r3, #2
 80003b6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b8:	2301      	movs	r3, #1
 80003ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003bc:	2310      	movs	r3, #16
 80003be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c2:	2302      	movs	r3, #2
 80003c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 fac2 	bl	800296c <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ee:	f000 fc0d 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	230f      	movs	r3, #15
 80003f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f6:	2302      	movs	r3, #2
 80003f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000402:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000408:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f003 fad0 	bl	80039b4 <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800041a:	f000 fbf7 	bl	8000c0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC34;
 800041e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000422:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800042c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4618      	mov	r0, r3
 8000432:	f003 fcd1 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800043c:	f000 fbe6 	bl	8000c0c <Error_Handler>
  }
}
 8000440:	bf00      	nop
 8000442:	3798      	adds	r7, #152	@ 0x98
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	@ 0x28
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800044e:	f107 031c 	add.w	r3, r7, #28
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
 8000468:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800046a:	4b43      	ldr	r3, [pc, #268]	@ (8000578 <MX_ADC1_Init+0x130>)
 800046c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000472:	4b41      	ldr	r3, [pc, #260]	@ (8000578 <MX_ADC1_Init+0x130>)
 8000474:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000478:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800047a:	4b3f      	ldr	r3, [pc, #252]	@ (8000578 <MX_ADC1_Init+0x130>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000480:	4b3d      	ldr	r3, [pc, #244]	@ (8000578 <MX_ADC1_Init+0x130>)
 8000482:	2201      	movs	r2, #1
 8000484:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000486:	4b3c      	ldr	r3, [pc, #240]	@ (8000578 <MX_ADC1_Init+0x130>)
 8000488:	2201      	movs	r2, #1
 800048a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800048c:	4b3a      	ldr	r3, [pc, #232]	@ (8000578 <MX_ADC1_Init+0x130>)
 800048e:	2200      	movs	r2, #0
 8000490:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000494:	4b38      	ldr	r3, [pc, #224]	@ (8000578 <MX_ADC1_Init+0x130>)
 8000496:	2200      	movs	r2, #0
 8000498:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800049a:	4b37      	ldr	r3, [pc, #220]	@ (8000578 <MX_ADC1_Init+0x130>)
 800049c:	2201      	movs	r2, #1
 800049e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a0:	4b35      	ldr	r3, [pc, #212]	@ (8000578 <MX_ADC1_Init+0x130>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80004a6:	4b34      	ldr	r3, [pc, #208]	@ (8000578 <MX_ADC1_Init+0x130>)
 80004a8:	2204      	movs	r2, #4
 80004aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004ac:	4b32      	ldr	r3, [pc, #200]	@ (8000578 <MX_ADC1_Init+0x130>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b4:	4b30      	ldr	r3, [pc, #192]	@ (8000578 <MX_ADC1_Init+0x130>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000578 <MX_ADC1_Init+0x130>)
 80004bc:	2200      	movs	r2, #0
 80004be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000578 <MX_ADC1_Init+0x130>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004c6:	482c      	ldr	r0, [pc, #176]	@ (8000578 <MX_ADC1_Init+0x130>)
 80004c8:	f000 fde4 	bl	8001094 <HAL_ADC_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80004d2:	f000 fb9b 	bl	8000c0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	4619      	mov	r1, r3
 80004e0:	4825      	ldr	r0, [pc, #148]	@ (8000578 <MX_ADC1_Init+0x130>)
 80004e2:	f001 fd17 	bl	8001f14 <HAL_ADCEx_MultiModeConfigChannel>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80004ec:	f000 fb8e 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004f0:	2306      	movs	r3, #6
 80004f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	4619      	mov	r1, r3
 800050c:	481a      	ldr	r0, [pc, #104]	@ (8000578 <MX_ADC1_Init+0x130>)
 800050e:	f001 fa17 	bl	8001940 <HAL_ADC_ConfigChannel>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000518:	f000 fb78 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800051c:	2309      	movs	r3, #9
 800051e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000520:	2302      	movs	r3, #2
 8000522:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4619      	mov	r1, r3
 8000528:	4813      	ldr	r0, [pc, #76]	@ (8000578 <MX_ADC1_Init+0x130>)
 800052a:	f001 fa09 	bl	8001940 <HAL_ADC_ConfigChannel>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000534:	f000 fb6a 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000538:	2307      	movs	r3, #7
 800053a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800053c:	2303      	movs	r3, #3
 800053e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4619      	mov	r1, r3
 8000544:	480c      	ldr	r0, [pc, #48]	@ (8000578 <MX_ADC1_Init+0x130>)
 8000546:	f001 f9fb 	bl	8001940 <HAL_ADC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000550:	f000 fb5c 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000554:	2308      	movs	r3, #8
 8000556:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000558:	2304      	movs	r3, #4
 800055a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	4619      	mov	r1, r3
 8000560:	4805      	ldr	r0, [pc, #20]	@ (8000578 <MX_ADC1_Init+0x130>)
 8000562:	f001 f9ed 	bl	8001940 <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 800056c:	f000 fb4e 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	@ 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000078 	.word	0x20000078

0800057c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	463b      	mov	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000592:	4b27      	ldr	r3, [pc, #156]	@ (8000630 <MX_ADC2_Init+0xb4>)
 8000594:	4a27      	ldr	r2, [pc, #156]	@ (8000634 <MX_ADC2_Init+0xb8>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000598:	4b25      	ldr	r3, [pc, #148]	@ (8000630 <MX_ADC2_Init+0xb4>)
 800059a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800059e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005a6:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80005cc:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005d2:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005da:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005dc:	2204      	movs	r2, #4
 80005de:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005e0:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005ec:	4810      	ldr	r0, [pc, #64]	@ (8000630 <MX_ADC2_Init+0xb4>)
 80005ee:	f000 fd51 	bl	8001094 <HAL_ADC_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80005f8:	f000 fb08 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005fc:	2305      	movs	r3, #5
 80005fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000600:	2301      	movs	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_ADC2_Init+0xb4>)
 800061a:	f001 f991 	bl	8001940 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000624:	f000 faf2 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000c8 	.word	0x200000c8
 8000634:	50000100 	.word	0x50000100

08000638 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800065a:	4b34      	ldr	r3, [pc, #208]	@ (800072c <MX_ADC3_Init+0xf4>)
 800065c:	4a34      	ldr	r2, [pc, #208]	@ (8000730 <MX_ADC3_Init+0xf8>)
 800065e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000660:	4b32      	ldr	r3, [pc, #200]	@ (800072c <MX_ADC3_Init+0xf4>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000666:	4b31      	ldr	r3, [pc, #196]	@ (800072c <MX_ADC3_Init+0xf4>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800066c:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <MX_ADC3_Init+0xf4>)
 800066e:	2201      	movs	r2, #1
 8000670:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000672:	4b2e      	ldr	r3, [pc, #184]	@ (800072c <MX_ADC3_Init+0xf4>)
 8000674:	2201      	movs	r2, #1
 8000676:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000678:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <MX_ADC3_Init+0xf4>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000680:	4b2a      	ldr	r3, [pc, #168]	@ (800072c <MX_ADC3_Init+0xf4>)
 8000682:	2200      	movs	r2, #0
 8000684:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000686:	4b29      	ldr	r3, [pc, #164]	@ (800072c <MX_ADC3_Init+0xf4>)
 8000688:	2201      	movs	r2, #1
 800068a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068c:	4b27      	ldr	r3, [pc, #156]	@ (800072c <MX_ADC3_Init+0xf4>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8000692:	4b26      	ldr	r3, [pc, #152]	@ (800072c <MX_ADC3_Init+0xf4>)
 8000694:	2202      	movs	r2, #2
 8000696:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000698:	4b24      	ldr	r3, [pc, #144]	@ (800072c <MX_ADC3_Init+0xf4>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <MX_ADC3_Init+0xf4>)
 80006a2:	2204      	movs	r2, #4
 80006a4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006a6:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_ADC3_Init+0xf4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <MX_ADC3_Init+0xf4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006b2:	481e      	ldr	r0, [pc, #120]	@ (800072c <MX_ADC3_Init+0xf4>)
 80006b4:	f000 fcee 	bl	8001094 <HAL_ADC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80006be:	f000 faa5 	bl	8000c0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4817      	ldr	r0, [pc, #92]	@ (800072c <MX_ADC3_Init+0xf4>)
 80006ce:	f001 fc21 	bl	8001f14 <HAL_ADCEx_MultiModeConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80006d8:	f000 fa98 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006dc:	2301      	movs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	@ (800072c <MX_ADC3_Init+0xf4>)
 80006fa:	f001 f921 	bl	8001940 <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000704:	f000 fa82 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000708:	2305      	movs	r3, #5
 800070a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800070c:	2302      	movs	r3, #2
 800070e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_ADC3_Init+0xf4>)
 8000716:	f001 f913 	bl	8001940 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8000720:	f000 fa74 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	@ 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000118 	.word	0x20000118
 8000730:	50000400 	.word	0x50000400

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_USART2_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <MX_USART2_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_USART2_UART_Init+0x58>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_USART2_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_USART2_UART_Init+0x58>)
 8000778:	f003 fd4a 	bl	8004210 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 fa43 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000168 	.word	0x20000168
 8000790:	40004400 	.word	0x40004400

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	@ 0x28
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	4b38      	ldr	r3, [pc, #224]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c2:	4b35      	ldr	r3, [pc, #212]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a34      	ldr	r2, [pc, #208]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b2f      	ldr	r3, [pc, #188]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a2e      	ldr	r2, [pc, #184]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a28      	ldr	r2, [pc, #160]	@ (8000898 <MX_GPIO_Init+0x104>)
 80007f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <MX_GPIO_Init+0x104>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2130      	movs	r1, #48	@ 0x30
 800080e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000812:	f002 f879 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2101      	movs	r1, #1
 800081a:	4820      	ldr	r0, [pc, #128]	@ (800089c <MX_GPIO_Init+0x108>)
 800081c:	f002 f874 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000826:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	481a      	ldr	r0, [pc, #104]	@ (80008a0 <MX_GPIO_Init+0x10c>)
 8000838:	f001 fec4 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 800083c:	2330      	movs	r3, #48	@ 0x30
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000856:	f001 feb5 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800085a:	2301      	movs	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480a      	ldr	r0, [pc, #40]	@ (800089c <MX_GPIO_Init+0x108>)
 8000872:	f001 fea7 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_GPIO_Init+0x10c>)
 800088c:	f001 fe9a 	bl	80025c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	@ 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400
 80008a0:	48000800 	.word	0x48000800

080008a4 <check_efuse_volt>:

/* USER CODE BEGIN 4 */
uint16_t check_efuse_volt(void){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1, 5000);
 80008aa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80008ae:	4811      	ldr	r0, [pc, #68]	@ (80008f4 <check_efuse_volt+0x50>)
 80008b0:	f000 ff36 	bl	8001720 <HAL_ADC_PollForConversion>
	adc_val[0] = HAL_ADC_GetValue(&hadc1);
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <check_efuse_volt+0x50>)
 80008b6:	f001 f835 	bl	8001924 <HAL_ADC_GetValue>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <check_efuse_volt+0x54>)
 80008c0:	801a      	strh	r2, [r3, #0]
	char uart_buff[20];  // Buffer for formatted string
	int buff_length = snprintf(uart_buff, sizeof(uart_buff), "/*%d*/\r\n", adc_val[0]);
 80008c2:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <check_efuse_volt+0x54>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	4638      	mov	r0, r7
 80008c8:	4a0c      	ldr	r2, [pc, #48]	@ (80008fc <check_efuse_volt+0x58>)
 80008ca:	2114      	movs	r1, #20
 80008cc:	f004 f968 	bl	8004ba0 <sniprintf>
 80008d0:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, buff_length, HAL_MAX_DELAY);
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	4639      	mov	r1, r7
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	4808      	ldr	r0, [pc, #32]	@ (8000900 <check_efuse_volt+0x5c>)
 80008de:	f003 fce5 	bl	80042ac <HAL_UART_Transmit>
	HAL_Delay(10);
 80008e2:	200a      	movs	r0, #10
 80008e4:	f000 fbb2 	bl	800104c <HAL_Delay>
	return adc_val[0];
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <check_efuse_volt+0x54>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000078 	.word	0x20000078
 80008f8:	200001f0 	.word	0x200001f0
 80008fc:	0800553c 	.word	0x0800553c
 8000900:	20000168 	.word	0x20000168

08000904 <check_buck_volt>:

uint16_t check_buck_volt(void){
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1, 5000);
 800090a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800090e:	4811      	ldr	r0, [pc, #68]	@ (8000954 <check_buck_volt+0x50>)
 8000910:	f000 ff06 	bl	8001720 <HAL_ADC_PollForConversion>
	adc_val[1] = HAL_ADC_GetValue(&hadc1);
 8000914:	480f      	ldr	r0, [pc, #60]	@ (8000954 <check_buck_volt+0x50>)
 8000916:	f001 f805 	bl	8001924 <HAL_ADC_GetValue>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <check_buck_volt+0x54>)
 8000920:	805a      	strh	r2, [r3, #2]
	char uart_buff[20];  // Buffer for formatted string
	int buff_length = snprintf(uart_buff, sizeof(uart_buff), "/*%d*/\r\n", adc_val[1]);
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <check_buck_volt+0x54>)
 8000924:	885b      	ldrh	r3, [r3, #2]
 8000926:	4638      	mov	r0, r7
 8000928:	4a0c      	ldr	r2, [pc, #48]	@ (800095c <check_buck_volt+0x58>)
 800092a:	2114      	movs	r1, #20
 800092c:	f004 f938 	bl	8004ba0 <sniprintf>
 8000930:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, buff_length, HAL_MAX_DELAY);
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	b29a      	uxth	r2, r3
 8000936:	4639      	mov	r1, r7
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <check_buck_volt+0x5c>)
 800093e:	f003 fcb5 	bl	80042ac <HAL_UART_Transmit>
	HAL_Delay(10);
 8000942:	200a      	movs	r0, #10
 8000944:	f000 fb82 	bl	800104c <HAL_Delay>
	return adc_val[1];
 8000948:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <check_buck_volt+0x54>)
 800094a:	885b      	ldrh	r3, [r3, #2]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000078 	.word	0x20000078
 8000958:	200001f0 	.word	0x200001f0
 800095c:	0800553c 	.word	0x0800553c
 8000960:	20000168 	.word	0x20000168

08000964 <check_buck_current>:

uint16_t check_buck_current(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1, 5000);
 800096a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800096e:	4811      	ldr	r0, [pc, #68]	@ (80009b4 <check_buck_current+0x50>)
 8000970:	f000 fed6 	bl	8001720 <HAL_ADC_PollForConversion>
	adc_val[2] = HAL_ADC_GetValue(&hadc1);
 8000974:	480f      	ldr	r0, [pc, #60]	@ (80009b4 <check_buck_current+0x50>)
 8000976:	f000 ffd5 	bl	8001924 <HAL_ADC_GetValue>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <check_buck_current+0x54>)
 8000980:	809a      	strh	r2, [r3, #4]
	char uart_buff[20];  // Buffer for formatted string
	int buff_length = snprintf(uart_buff, sizeof(uart_buff), "/*%d*/\r\n", adc_val[2]);
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <check_buck_current+0x54>)
 8000984:	889b      	ldrh	r3, [r3, #4]
 8000986:	4638      	mov	r0, r7
 8000988:	4a0c      	ldr	r2, [pc, #48]	@ (80009bc <check_buck_current+0x58>)
 800098a:	2114      	movs	r1, #20
 800098c:	f004 f908 	bl	8004ba0 <sniprintf>
 8000990:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, buff_length, HAL_MAX_DELAY);
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	b29a      	uxth	r2, r3
 8000996:	4639      	mov	r1, r7
 8000998:	f04f 33ff 	mov.w	r3, #4294967295
 800099c:	4808      	ldr	r0, [pc, #32]	@ (80009c0 <check_buck_current+0x5c>)
 800099e:	f003 fc85 	bl	80042ac <HAL_UART_Transmit>
	HAL_Delay(10);
 80009a2:	200a      	movs	r0, #10
 80009a4:	f000 fb52 	bl	800104c <HAL_Delay>
	return adc_val[2];
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <check_buck_current+0x54>)
 80009aa:	889b      	ldrh	r3, [r3, #4]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000078 	.word	0x20000078
 80009b8:	200001f0 	.word	0x200001f0
 80009bc:	0800553c 	.word	0x0800553c
 80009c0:	20000168 	.word	0x20000168

080009c4 <check_lsc_volt>:

uint16_t check_lsc_volt(void){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1, 5000);
 80009ca:	f241 3188 	movw	r1, #5000	@ 0x1388
 80009ce:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <check_lsc_volt+0x50>)
 80009d0:	f000 fea6 	bl	8001720 <HAL_ADC_PollForConversion>
	adc_val[3] = HAL_ADC_GetValue(&hadc1);
 80009d4:	480f      	ldr	r0, [pc, #60]	@ (8000a14 <check_lsc_volt+0x50>)
 80009d6:	f000 ffa5 	bl	8001924 <HAL_ADC_GetValue>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <check_lsc_volt+0x54>)
 80009e0:	80da      	strh	r2, [r3, #6]
	char uart_buff[20];  // Buffer for formatted string
	int buff_length = snprintf(uart_buff, sizeof(uart_buff), "/*%d*/\r\n", adc_val[3]);
 80009e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <check_lsc_volt+0x54>)
 80009e4:	88db      	ldrh	r3, [r3, #6]
 80009e6:	4638      	mov	r0, r7
 80009e8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <check_lsc_volt+0x58>)
 80009ea:	2114      	movs	r1, #20
 80009ec:	f004 f8d8 	bl	8004ba0 <sniprintf>
 80009f0:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, buff_length, HAL_MAX_DELAY);
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4639      	mov	r1, r7
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	4808      	ldr	r0, [pc, #32]	@ (8000a20 <check_lsc_volt+0x5c>)
 80009fe:	f003 fc55 	bl	80042ac <HAL_UART_Transmit>
	HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f000 fb22 	bl	800104c <HAL_Delay>
	return adc_val[3];
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <check_lsc_volt+0x54>)
 8000a0a:	88db      	ldrh	r3, [r3, #6]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000078 	.word	0x20000078
 8000a18:	200001f0 	.word	0x200001f0
 8000a1c:	0800553c 	.word	0x0800553c
 8000a20:	20000168 	.word	0x20000168

08000a24 <check_gpio_and_reset>:

void check_gpio_and_reset(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
    uint32_t start_time;
send_msg("wait for button press !!! \r\n");
 8000a2a:	4812      	ldr	r0, [pc, #72]	@ (8000a74 <check_gpio_and_reset+0x50>)
 8000a2c:	f000 f8d8 	bl	8000be0 <send_msg>
    while (1) {
        // Check if output pin is LOW and input pin is HIGH
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET) {
 8000a30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a34:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <check_gpio_and_reset+0x54>)
 8000a36:	f001 ff4f 	bl	80028d8 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d1f7      	bne.n	8000a30 <check_gpio_and_reset+0xc>

            start_time = HAL_GetTick();  // Start timer
 8000a40:	f000 faf8 	bl	8001034 <HAL_GetTick>
 8000a44:	6078      	str	r0, [r7, #4]

            // Wait for 200ms while input pin remains HIGH
            while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET) {
 8000a46:	e009      	b.n	8000a5c <check_gpio_and_reset+0x38>
                if (HAL_GetTick() - start_time >= 200) {
 8000a48:	f000 faf4 	bl	8001034 <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a54:	d902      	bls.n	8000a5c <check_gpio_and_reset+0x38>
                	initalization();
 8000a56:	f000 f811 	bl	8000a7c <initalization>
                    return;  // Exit function
 8000a5a:	e008      	b.n	8000a6e <check_gpio_and_reset+0x4a>
            while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET) {
 8000a5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <check_gpio_and_reset+0x54>)
 8000a62:	f001 ff39 	bl	80028d8 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d0ed      	beq.n	8000a48 <check_gpio_and_reset+0x24>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET) {
 8000a6c:	e7e0      	b.n	8000a30 <check_gpio_and_reset+0xc>
                }
            }
        }
    }
}
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	08005548 	.word	0x08005548
 8000a78:	48000800 	.word	0x48000800

08000a7c <initalization>:

void initalization (void){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	send_msg("Initialization Start !!! \r\n");
 8000a80:	4849      	ldr	r0, [pc, #292]	@ (8000ba8 <initalization+0x12c>)
 8000a82:	f000 f8ad 	bl	8000be0 <send_msg>
	HAL_ADC_Start(&hadc1);
 8000a86:	4849      	ldr	r0, [pc, #292]	@ (8000bac <initalization+0x130>)
 8000a88:	f000 fcfe 	bl	8001488 <HAL_ADC_Start>
	HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	@ 0x64
 8000a8e:	f000 fadd 	bl	800104c <HAL_Delay>
	send_msg("Set Efuse Enable Pin \r\n ");
 8000a92:	4847      	ldr	r0, [pc, #284]	@ (8000bb0 <initalization+0x134>)
 8000a94:	f000 f8a4 	bl	8000be0 <send_msg>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4845      	ldr	r0, [pc, #276]	@ (8000bb4 <initalization+0x138>)
 8000a9e:	f001 ff33 	bl	8002908 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000aa2:	2064      	movs	r0, #100	@ 0x64
 8000aa4:	f000 fad2 	bl	800104c <HAL_Delay>
	check_efuse_volt();
 8000aa8:	f7ff fefc 	bl	80008a4 <check_efuse_volt>
	HAL_Delay(100);
 8000aac:	2064      	movs	r0, #100	@ 0x64
 8000aae:	f000 facd 	bl	800104c <HAL_Delay>
	if(adc_val[0] < 2000){
 8000ab2:	4b41      	ldr	r3, [pc, #260]	@ (8000bb8 <initalization+0x13c>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000aba:	d20a      	bcs.n	8000ad2 <initalization+0x56>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2101      	movs	r1, #1
 8000ac0:	483c      	ldr	r0, [pc, #240]	@ (8000bb4 <initalization+0x138>)
 8000ac2:	f001 ff21 	bl	8002908 <HAL_GPIO_WritePin>
		send_msg("Efuse voltage is not OK. \r\n");
 8000ac6:	483d      	ldr	r0, [pc, #244]	@ (8000bbc <initalization+0x140>)
 8000ac8:	f000 f88a 	bl	8000be0 <send_msg>
		return check_gpio_and_reset();
 8000acc:	f7ff ffaa 	bl	8000a24 <check_gpio_and_reset>
 8000ad0:	e069      	b.n	8000ba6 <initalization+0x12a>
	}
	else send_msg("Efuse voltage is OK. \r\n");
 8000ad2:	483b      	ldr	r0, [pc, #236]	@ (8000bc0 <initalization+0x144>)
 8000ad4:	f000 f884 	bl	8000be0 <send_msg>
	HAL_Delay(100);
 8000ad8:	2064      	movs	r0, #100	@ 0x64
 8000ada:	f000 fab7 	bl	800104c <HAL_Delay>
	send_msg("Set Buck Enable Pin \r\n ");
 8000ade:	4839      	ldr	r0, [pc, #228]	@ (8000bc4 <initalization+0x148>)
 8000ae0:	f000 f87e 	bl	8000be0 <send_msg>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aec:	f001 ff0c 	bl	8002908 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000af0:	2064      	movs	r0, #100	@ 0x64
 8000af2:	f000 faab 	bl	800104c <HAL_Delay>
	check_buck_volt();
 8000af6:	f7ff ff05 	bl	8000904 <check_buck_volt>
	HAL_Delay(100);
 8000afa:	2064      	movs	r0, #100	@ 0x64
 8000afc:	f000 faa6 	bl	800104c <HAL_Delay>
	if(adc_val[1] < 2000){
 8000b00:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <initalization+0x13c>)
 8000b02:	885b      	ldrh	r3, [r3, #2]
 8000b04:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b08:	d20b      	bcs.n	8000b22 <initalization+0xa6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b12:	f001 fef9 	bl	8002908 <HAL_GPIO_WritePin>
		send_msg("Buck voltage is not OK. \r\n");
 8000b16:	482c      	ldr	r0, [pc, #176]	@ (8000bc8 <initalization+0x14c>)
 8000b18:	f000 f862 	bl	8000be0 <send_msg>
		return check_gpio_and_reset();
 8000b1c:	f7ff ff82 	bl	8000a24 <check_gpio_and_reset>
 8000b20:	e041      	b.n	8000ba6 <initalization+0x12a>
	}
	else send_msg("Buck voltage is OK. \r\n");
 8000b22:	482a      	ldr	r0, [pc, #168]	@ (8000bcc <initalization+0x150>)
 8000b24:	f000 f85c 	bl	8000be0 <send_msg>
	check_buck_current();
 8000b28:	f7ff ff1c 	bl	8000964 <check_buck_current>
	HAL_Delay(100);
 8000b2c:	2064      	movs	r0, #100	@ 0x64
 8000b2e:	f000 fa8d 	bl	800104c <HAL_Delay>
	if(adc_val[2] < 1000){
 8000b32:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <initalization+0x13c>)
 8000b34:	889b      	ldrh	r3, [r3, #4]
 8000b36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b3a:	d210      	bcs.n	8000b5e <initalization+0xe2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2101      	movs	r1, #1
 8000b40:	481c      	ldr	r0, [pc, #112]	@ (8000bb4 <initalization+0x138>)
 8000b42:	f001 fee1 	bl	8002908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2110      	movs	r1, #16
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4e:	f001 fedb 	bl	8002908 <HAL_GPIO_WritePin>
		send_msg("Buck current is not OK. \r\n");
 8000b52:	481f      	ldr	r0, [pc, #124]	@ (8000bd0 <initalization+0x154>)
 8000b54:	f000 f844 	bl	8000be0 <send_msg>
		return check_gpio_and_reset();
 8000b58:	f7ff ff64 	bl	8000a24 <check_gpio_and_reset>
 8000b5c:	e023      	b.n	8000ba6 <initalization+0x12a>
	}
	else send_msg("Buck current is OK. \r\n");
 8000b5e:	481d      	ldr	r0, [pc, #116]	@ (8000bd4 <initalization+0x158>)
 8000b60:	f000 f83e 	bl	8000be0 <send_msg>
	check_lsc_volt();
 8000b64:	f7ff ff2e 	bl	80009c4 <check_lsc_volt>
	HAL_Delay(100);
 8000b68:	2064      	movs	r0, #100	@ 0x64
 8000b6a:	f000 fa6f 	bl	800104c <HAL_Delay>
	if(adc_val[3] < 2000){
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <initalization+0x13c>)
 8000b70:	88db      	ldrh	r3, [r3, #6]
 8000b72:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b76:	d210      	bcs.n	8000b9a <initalization+0x11e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	480d      	ldr	r0, [pc, #52]	@ (8000bb4 <initalization+0x138>)
 8000b7e:	f001 fec3 	bl	8002908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2110      	movs	r1, #16
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f001 febd 	bl	8002908 <HAL_GPIO_WritePin>
		send_msg("lsc volt is not OK. \r\n");
 8000b8e:	4812      	ldr	r0, [pc, #72]	@ (8000bd8 <initalization+0x15c>)
 8000b90:	f000 f826 	bl	8000be0 <send_msg>
		return check_gpio_and_reset();
 8000b94:	f7ff ff46 	bl	8000a24 <check_gpio_and_reset>
 8000b98:	e005      	b.n	8000ba6 <initalization+0x12a>
	}
	else send_msg("lsc volt is OK. \r\n");
 8000b9a:	4810      	ldr	r0, [pc, #64]	@ (8000bdc <initalization+0x160>)
 8000b9c:	f000 f820 	bl	8000be0 <send_msg>
	HAL_ADC_Stop(&hadc1);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <initalization+0x130>)
 8000ba2:	f000 fd87 	bl	80016b4 <HAL_ADC_Stop>

}
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08005568 	.word	0x08005568
 8000bac:	20000078 	.word	0x20000078
 8000bb0:	08005584 	.word	0x08005584
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	200001f0 	.word	0x200001f0
 8000bbc:	080055a0 	.word	0x080055a0
 8000bc0:	080055bc 	.word	0x080055bc
 8000bc4:	080055d4 	.word	0x080055d4
 8000bc8:	080055ec 	.word	0x080055ec
 8000bcc:	08005608 	.word	0x08005608
 8000bd0:	08005620 	.word	0x08005620
 8000bd4:	0800563c 	.word	0x0800563c
 8000bd8:	08005654 	.word	0x08005654
 8000bdc:	0800566c 	.word	0x0800566c

08000be0 <send_msg>:

void send_msg(char *msg){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff faf9 	bl	80001e0 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <send_msg+0x28>)
 8000bfa:	f003 fb57 	bl	80042ac <HAL_UART_Transmit>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000168 	.word	0x20000168

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <Error_Handler+0x8>

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6193      	str	r3, [r2, #24]
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c4e:	2007      	movs	r0, #7
 8000c50:	f001 fc84 	bl	800255c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	@ 0x38
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c80:	d12d      	bne.n	8000cde <HAL_ADC_MspInit+0x7e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c82:	4b47      	ldr	r3, [pc, #284]	@ (8000da0 <HAL_ADC_MspInit+0x140>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a45      	ldr	r2, [pc, #276]	@ (8000da0 <HAL_ADC_MspInit+0x140>)
 8000c8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c8c:	4b44      	ldr	r3, [pc, #272]	@ (8000da0 <HAL_ADC_MspInit+0x140>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d10b      	bne.n	8000cac <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c94:	4b43      	ldr	r3, [pc, #268]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	4a42      	ldr	r2, [pc, #264]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	6153      	str	r3, [r2, #20]
 8000ca0:	4b40      	ldr	r3, [pc, #256]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca8:	623b      	str	r3, [r7, #32]
 8000caa:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	4b3d      	ldr	r3, [pc, #244]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000cb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cb6:	6153      	str	r3, [r2, #20]
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4834      	ldr	r0, [pc, #208]	@ (8000da8 <HAL_ADC_MspInit+0x148>)
 8000cd8:	f001 fc74 	bl	80025c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000cdc:	e05c      	b.n	8000d98 <HAL_ADC_MspInit+0x138>
  else if(hadc->Instance==ADC2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a32      	ldr	r2, [pc, #200]	@ (8000dac <HAL_ADC_MspInit+0x14c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d12d      	bne.n	8000d44 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <HAL_ADC_MspInit+0x140>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a2c      	ldr	r2, [pc, #176]	@ (8000da0 <HAL_ADC_MspInit+0x140>)
 8000cf0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8000da0 <HAL_ADC_MspInit+0x140>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10b      	bne.n	8000d12 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a29      	ldr	r2, [pc, #164]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a23      	ldr	r2, [pc, #140]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481a      	ldr	r0, [pc, #104]	@ (8000da8 <HAL_ADC_MspInit+0x148>)
 8000d3e:	f001 fc41 	bl	80025c4 <HAL_GPIO_Init>
}
 8000d42:	e029      	b.n	8000d98 <HAL_ADC_MspInit+0x138>
  else if(hadc->Instance==ADC3)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	@ (8000db0 <HAL_ADC_MspInit+0x150>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d124      	bne.n	8000d98 <HAL_ADC_MspInit+0x138>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d58:	6153      	str	r3, [r2, #20]
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d70:	6153      	str	r3, [r2, #20]
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_ADC_MspInit+0x144>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8000d7e:	f242 0302 	movw	r3, #8194	@ 0x2002
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d84:	2303      	movs	r3, #3
 8000d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4808      	ldr	r0, [pc, #32]	@ (8000db4 <HAL_ADC_MspInit+0x154>)
 8000d94:	f001 fc16 	bl	80025c4 <HAL_GPIO_Init>
}
 8000d98:	bf00      	nop
 8000d9a:	3738      	adds	r7, #56	@ 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000200 	.word	0x20000200
 8000da4:	40021000 	.word	0x40021000
 8000da8:	48000800 	.word	0x48000800
 8000dac:	50000100 	.word	0x50000100
 8000db0:	50000400 	.word	0x50000400
 8000db4:	48000400 	.word	0x48000400

08000db8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a17      	ldr	r2, [pc, #92]	@ (8000e34 <HAL_UART_MspInit+0x7c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d128      	bne.n	8000e2c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dda:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <HAL_UART_MspInit+0x80>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a16      	ldr	r2, [pc, #88]	@ (8000e38 <HAL_UART_MspInit+0x80>)
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <HAL_UART_MspInit+0x80>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <HAL_UART_MspInit+0x80>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a10      	ldr	r2, [pc, #64]	@ (8000e38 <HAL_UART_MspInit+0x80>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_UART_MspInit+0x80>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e28:	f001 fbcc 	bl	80025c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	@ 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40021000 	.word	0x40021000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <NMI_Handler+0x4>

08000e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <MemManage_Handler+0x4>

08000e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e92:	f000 f8bb 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f003 fea6 	bl	8004c1c <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20010000 	.word	0x20010000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	20000204 	.word	0x20000204
 8000f04:	20000358 	.word	0x20000358

08000f08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <SystemInit+0x20>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <SystemInit+0x20>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f64 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f30:	f7ff ffea 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f34:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f36:	490d      	ldr	r1, [pc, #52]	@ (8000f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <LoopForever+0xe>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f78 <LoopForever+0x16>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f003 fe65 	bl	8004c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f5e:	f7ff f997 	bl	8000290 <main>

08000f62 <LoopForever>:

LoopForever:
    b LoopForever
 8000f62:	e7fe      	b.n	8000f62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f70:	080056fc 	.word	0x080056fc
  ldr r2, =_sbss
 8000f74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f78:	20000354 	.word	0x20000354

08000f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC1_2_IRQHandler>
	...

08000f80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_Init+0x28>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <HAL_Init+0x28>)
 8000f8a:	f043 0310 	orr.w	r3, r3, #16
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f001 fae3 	bl	800255c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fe3c 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40022000 	.word	0x40022000

08000fac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 faed 	bl	80025aa <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f001 fac3 	bl	8002572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000008 	.word	0x20000008
 8001008:	20000004 	.word	0x20000004

0800100c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008
 8001030:	20000208 	.word	0x20000208

08001034 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;  
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000208 	.word	0x20000208

0800104c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_Delay+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008

08001094 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b09a      	sub	sp, #104	@ 0x68
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e1e3      	b.n	800147c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d176      	bne.n	80011b4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d152      	bne.n	8001174 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff fdb9 	bl	8000c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d13b      	bne.n	8001174 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f001 f85f 	bl	80021c0 <ADC_Disable>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	2b00      	cmp	r3, #0
 8001112:	d12f      	bne.n	8001174 <HAL_ADC_Init+0xe0>
 8001114:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001118:	2b00      	cmp	r3, #0
 800111a:	d12b      	bne.n	8001174 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001124:	f023 0302 	bic.w	r3, r3, #2
 8001128:	f043 0202 	orr.w	r2, r3, #2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800113e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800114e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001150:	4b92      	ldr	r3, [pc, #584]	@ (800139c <HAL_ADC_Init+0x308>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a92      	ldr	r2, [pc, #584]	@ (80013a0 <HAL_ADC_Init+0x30c>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	0c9a      	lsrs	r2, r3, #18
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001166:	e002      	b.n	800116e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3b01      	subs	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f9      	bne.n	8001168 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800118c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001190:	d110      	bne.n	80011b4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f023 0312 	bic.w	r3, r3, #18
 800119a:	f043 0210 	orr.w	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	f043 0201 	orr.w	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f040 8150 	bne.w	8001462 <HAL_ADC_Init+0x3ce>
 80011c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 814b 	bne.w	8001462 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 8143 	bne.w	8001462 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80011e4:	f043 0202 	orr.w	r2, r3, #2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011f4:	d004      	beq.n	8001200 <HAL_ADC_Init+0x16c>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a6a      	ldr	r2, [pc, #424]	@ (80013a4 <HAL_ADC_Init+0x310>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d101      	bne.n	8001204 <HAL_ADC_Init+0x170>
 8001200:	4b69      	ldr	r3, [pc, #420]	@ (80013a8 <HAL_ADC_Init+0x314>)
 8001202:	e000      	b.n	8001206 <HAL_ADC_Init+0x172>
 8001204:	4b69      	ldr	r3, [pc, #420]	@ (80013ac <HAL_ADC_Init+0x318>)
 8001206:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001210:	d102      	bne.n	8001218 <HAL_ADC_Init+0x184>
 8001212:	4b64      	ldr	r3, [pc, #400]	@ (80013a4 <HAL_ADC_Init+0x310>)
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	e01a      	b.n	800124e <HAL_ADC_Init+0x1ba>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a61      	ldr	r2, [pc, #388]	@ (80013a4 <HAL_ADC_Init+0x310>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d103      	bne.n	800122a <HAL_ADC_Init+0x196>
 8001222:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e011      	b.n	800124e <HAL_ADC_Init+0x1ba>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a60      	ldr	r2, [pc, #384]	@ (80013b0 <HAL_ADC_Init+0x31c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d102      	bne.n	800123a <HAL_ADC_Init+0x1a6>
 8001234:	4b5f      	ldr	r3, [pc, #380]	@ (80013b4 <HAL_ADC_Init+0x320>)
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e009      	b.n	800124e <HAL_ADC_Init+0x1ba>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a5d      	ldr	r2, [pc, #372]	@ (80013b4 <HAL_ADC_Init+0x320>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d102      	bne.n	800124a <HAL_ADC_Init+0x1b6>
 8001244:	4b5a      	ldr	r3, [pc, #360]	@ (80013b0 <HAL_ADC_Init+0x31c>)
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e001      	b.n	800124e <HAL_ADC_Init+0x1ba>
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d108      	bne.n	800126e <HAL_ADC_Init+0x1da>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_ADC_Init+0x1da>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_ADC_Init+0x1dc>
 800126e:	2300      	movs	r3, #0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d11c      	bne.n	80012ae <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001274:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001276:	2b00      	cmp	r3, #0
 8001278:	d010      	beq.n	800129c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d107      	bne.n	8001296 <HAL_ADC_Init+0x202>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x202>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_ADC_Init+0x204>
 8001296:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001298:	2b00      	cmp	r3, #0
 800129a:	d108      	bne.n	80012ae <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800129c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012ac:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7e5b      	ldrb	r3, [r3, #25]
 80012b2:	035b      	lsls	r3, r3, #13
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012b8:	2a01      	cmp	r2, #1
 80012ba:	d002      	beq.n	80012c2 <HAL_ADC_Init+0x22e>
 80012bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c0:	e000      	b.n	80012c4 <HAL_ADC_Init+0x230>
 80012c2:	2200      	movs	r2, #0
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012d4:	4313      	orrs	r3, r2
 80012d6:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d11b      	bne.n	800131a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7e5b      	ldrb	r3, [r3, #25]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d109      	bne.n	80012fe <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ee:	3b01      	subs	r3, #1
 80012f0:	045a      	lsls	r2, r3, #17
 80012f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012f4:	4313      	orrs	r3, r2
 80012f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80012fc:	e00d      	b.n	800131a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001306:	f043 0220 	orr.w	r2, r3, #32
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131e:	2b01      	cmp	r3, #1
 8001320:	d054      	beq.n	80013cc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a22      	ldr	r2, [pc, #136]	@ (80013b0 <HAL_ADC_Init+0x31c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d004      	beq.n	8001336 <HAL_ADC_Init+0x2a2>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a20      	ldr	r2, [pc, #128]	@ (80013b4 <HAL_ADC_Init+0x320>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d140      	bne.n	80013b8 <HAL_ADC_Init+0x324>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133a:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800133e:	d02a      	beq.n	8001396 <HAL_ADC_Init+0x302>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001348:	d022      	beq.n	8001390 <HAL_ADC_Init+0x2fc>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134e:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001352:	d01a      	beq.n	800138a <HAL_ADC_Init+0x2f6>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001358:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 800135c:	d012      	beq.n	8001384 <HAL_ADC_Init+0x2f0>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001362:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001366:	d00a      	beq.n	800137e <HAL_ADC_Init+0x2ea>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136c:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001370:	d002      	beq.n	8001378 <HAL_ADC_Init+0x2e4>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001376:	e023      	b.n	80013c0 <HAL_ADC_Init+0x32c>
 8001378:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800137c:	e020      	b.n	80013c0 <HAL_ADC_Init+0x32c>
 800137e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001382:	e01d      	b.n	80013c0 <HAL_ADC_Init+0x32c>
 8001384:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001388:	e01a      	b.n	80013c0 <HAL_ADC_Init+0x32c>
 800138a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800138e:	e017      	b.n	80013c0 <HAL_ADC_Init+0x32c>
 8001390:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001394:	e014      	b.n	80013c0 <HAL_ADC_Init+0x32c>
 8001396:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800139a:	e011      	b.n	80013c0 <HAL_ADC_Init+0x32c>
 800139c:	20000000 	.word	0x20000000
 80013a0:	431bde83 	.word	0x431bde83
 80013a4:	50000100 	.word	0x50000100
 80013a8:	50000300 	.word	0x50000300
 80013ac:	50000700 	.word	0x50000700
 80013b0:	50000400 	.word	0x50000400
 80013b4:	50000500 	.word	0x50000500
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80013c4:	4313      	orrs	r3, r2
 80013c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013c8:	4313      	orrs	r3, r2
 80013ca:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d114      	bne.n	8001404 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013e8:	f023 0302 	bic.w	r3, r3, #2
 80013ec:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7e1b      	ldrb	r3, [r3, #24]
 80013f2:	039a      	lsls	r2, r3, #14
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4313      	orrs	r3, r2
 80013fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001400:	4313      	orrs	r3, r2
 8001402:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <HAL_ADC_Init+0x3f0>)
 800140c:	4013      	ands	r3, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001414:	430b      	orrs	r3, r1
 8001416:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d10c      	bne.n	800143a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f023 010f 	bic.w	r1, r3, #15
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	631a      	str	r2, [r3, #48]	@ 0x30
 8001438:	e007      	b.n	800144a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 020f 	bic.w	r2, r2, #15
 8001448:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f023 0303 	bic.w	r3, r3, #3
 8001458:	f043 0201 	orr.w	r2, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001460:	e00a      	b.n	8001478 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f023 0312 	bic.w	r3, r3, #18
 800146a:	f043 0210 	orr.w	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001472:	2301      	movs	r3, #1
 8001474:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001478:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800147c:	4618      	mov	r0, r3
 800147e:	3768      	adds	r7, #104	@ 0x68
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	fff0c007 	.word	0xfff0c007

08001488 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 80f9 	bne.w	8001696 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Start+0x2a>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e0f4      	b.n	800169c <HAL_ADC_Start+0x214>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fe1c 	bl	80020f8 <ADC_Enable>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f040 80e0 	bne.w	800168c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014e8:	d004      	beq.n	80014f4 <HAL_ADC_Start+0x6c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6d      	ldr	r2, [pc, #436]	@ (80016a4 <HAL_ADC_Start+0x21c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d106      	bne.n	8001502 <HAL_ADC_Start+0x7a>
 80014f4:	4b6c      	ldr	r3, [pc, #432]	@ (80016a8 <HAL_ADC_Start+0x220>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d010      	beq.n	8001522 <HAL_ADC_Start+0x9a>
 8001500:	e005      	b.n	800150e <HAL_ADC_Start+0x86>
 8001502:	4b6a      	ldr	r3, [pc, #424]	@ (80016ac <HAL_ADC_Start+0x224>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <HAL_ADC_Start+0x9a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001516:	d004      	beq.n	8001522 <HAL_ADC_Start+0x9a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a64      	ldr	r2, [pc, #400]	@ (80016b0 <HAL_ADC_Start+0x228>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d115      	bne.n	800154e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d036      	beq.n	80015aa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001544:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800154c:	e02d      	b.n	80015aa <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001562:	d004      	beq.n	800156e <HAL_ADC_Start+0xe6>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a4e      	ldr	r2, [pc, #312]	@ (80016a4 <HAL_ADC_Start+0x21c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10a      	bne.n	8001584 <HAL_ADC_Start+0xfc>
 800156e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	e008      	b.n	8001596 <HAL_ADC_Start+0x10e>
 8001584:	4b4a      	ldr	r3, [pc, #296]	@ (80016b0 <HAL_ADC_Start+0x228>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015b6:	d106      	bne.n	80015c6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015bc:	f023 0206 	bic.w	r2, r3, #6
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80015c4:	e002      	b.n	80015cc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	221c      	movs	r2, #28
 80015da:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015e4:	d004      	beq.n	80015f0 <HAL_ADC_Start+0x168>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a2e      	ldr	r2, [pc, #184]	@ (80016a4 <HAL_ADC_Start+0x21c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d106      	bne.n	80015fe <HAL_ADC_Start+0x176>
 80015f0:	4b2d      	ldr	r3, [pc, #180]	@ (80016a8 <HAL_ADC_Start+0x220>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d03e      	beq.n	800167a <HAL_ADC_Start+0x1f2>
 80015fc:	e005      	b.n	800160a <HAL_ADC_Start+0x182>
 80015fe:	4b2b      	ldr	r3, [pc, #172]	@ (80016ac <HAL_ADC_Start+0x224>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	2b00      	cmp	r3, #0
 8001608:	d037      	beq.n	800167a <HAL_ADC_Start+0x1f2>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001612:	d004      	beq.n	800161e <HAL_ADC_Start+0x196>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a22      	ldr	r2, [pc, #136]	@ (80016a4 <HAL_ADC_Start+0x21c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d106      	bne.n	800162c <HAL_ADC_Start+0x1a4>
 800161e:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <HAL_ADC_Start+0x220>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	2b05      	cmp	r3, #5
 8001628:	d027      	beq.n	800167a <HAL_ADC_Start+0x1f2>
 800162a:	e005      	b.n	8001638 <HAL_ADC_Start+0x1b0>
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <HAL_ADC_Start+0x224>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	2b05      	cmp	r3, #5
 8001636:	d020      	beq.n	800167a <HAL_ADC_Start+0x1f2>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001640:	d004      	beq.n	800164c <HAL_ADC_Start+0x1c4>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a17      	ldr	r2, [pc, #92]	@ (80016a4 <HAL_ADC_Start+0x21c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d106      	bne.n	800165a <HAL_ADC_Start+0x1d2>
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <HAL_ADC_Start+0x220>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	2b09      	cmp	r3, #9
 8001656:	d010      	beq.n	800167a <HAL_ADC_Start+0x1f2>
 8001658:	e005      	b.n	8001666 <HAL_ADC_Start+0x1de>
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <HAL_ADC_Start+0x224>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	2b09      	cmp	r3, #9
 8001664:	d009      	beq.n	800167a <HAL_ADC_Start+0x1f2>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800166e:	d004      	beq.n	800167a <HAL_ADC_Start+0x1f2>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0e      	ldr	r2, [pc, #56]	@ (80016b0 <HAL_ADC_Start+0x228>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d10f      	bne.n	800169a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0204 	orr.w	r2, r2, #4
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	e006      	b.n	800169a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001694:	e001      	b.n	800169a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001696:	2302      	movs	r3, #2
 8001698:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	50000100 	.word	0x50000100
 80016a8:	50000300 	.word	0x50000300
 80016ac:	50000700 	.word	0x50000700
 80016b0:	50000400 	.word	0x50000400

080016b4 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_Stop+0x1a>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e023      	b.n	8001716 <HAL_ADC_Stop+0x62>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80016d6:	216c      	movs	r1, #108	@ 0x6c
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fdd7 	bl	800228c <ADC_ConversionStop>
 80016de:	4603      	mov	r3, r0
 80016e0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fd69 	bl	80021c0 <ADC_Disable>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d109      	bne.n	800170c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	2b08      	cmp	r3, #8
 8001734:	d102      	bne.n	800173c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001736:	2308      	movs	r3, #8
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e03a      	b.n	80017b2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001744:	d004      	beq.n	8001750 <HAL_ADC_PollForConversion+0x30>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a72      	ldr	r2, [pc, #456]	@ (8001914 <HAL_ADC_PollForConversion+0x1f4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_ADC_PollForConversion+0x34>
 8001750:	4b71      	ldr	r3, [pc, #452]	@ (8001918 <HAL_ADC_PollForConversion+0x1f8>)
 8001752:	e000      	b.n	8001756 <HAL_ADC_PollForConversion+0x36>
 8001754:	4b71      	ldr	r3, [pc, #452]	@ (800191c <HAL_ADC_PollForConversion+0x1fc>)
 8001756:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	2b00      	cmp	r3, #0
 8001762:	d112      	bne.n	800178a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b01      	cmp	r3, #1
 8001770:	d11d      	bne.n	80017ae <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f043 0220 	orr.w	r2, r3, #32
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0bf      	b.n	800190a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f043 0220 	orr.w	r2, r3, #32
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0ad      	b.n	800190a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80017ae:	230c      	movs	r3, #12
 80017b0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017ba:	d004      	beq.n	80017c6 <HAL_ADC_PollForConversion+0xa6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a54      	ldr	r2, [pc, #336]	@ (8001914 <HAL_ADC_PollForConversion+0x1f4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d106      	bne.n	80017d4 <HAL_ADC_PollForConversion+0xb4>
 80017c6:	4b54      	ldr	r3, [pc, #336]	@ (8001918 <HAL_ADC_PollForConversion+0x1f8>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d010      	beq.n	80017f4 <HAL_ADC_PollForConversion+0xd4>
 80017d2:	e005      	b.n	80017e0 <HAL_ADC_PollForConversion+0xc0>
 80017d4:	4b51      	ldr	r3, [pc, #324]	@ (800191c <HAL_ADC_PollForConversion+0x1fc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d009      	beq.n	80017f4 <HAL_ADC_PollForConversion+0xd4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017e8:	d004      	beq.n	80017f4 <HAL_ADC_PollForConversion+0xd4>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a4c      	ldr	r2, [pc, #304]	@ (8001920 <HAL_ADC_PollForConversion+0x200>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d104      	bne.n	80017fe <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	e00f      	b.n	800181e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001806:	d004      	beq.n	8001812 <HAL_ADC_PollForConversion+0xf2>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a41      	ldr	r2, [pc, #260]	@ (8001914 <HAL_ADC_PollForConversion+0x1f4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d102      	bne.n	8001818 <HAL_ADC_PollForConversion+0xf8>
 8001812:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001816:	e000      	b.n	800181a <HAL_ADC_PollForConversion+0xfa>
 8001818:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <HAL_ADC_PollForConversion+0x200>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800181e:	f7ff fc09 	bl	8001034 <HAL_GetTick>
 8001822:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001824:	e021      	b.n	800186a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d01d      	beq.n	800186a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <HAL_ADC_PollForConversion+0x124>
 8001834:	f7ff fbfe 	bl	8001034 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d212      	bcs.n	800186a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10b      	bne.n	800186a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f043 0204 	orr.w	r2, r3, #4
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e04f      	b.n	800190a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0d6      	beq.n	8001826 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800188e:	2b00      	cmp	r3, #0
 8001890:	d131      	bne.n	80018f6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001898:	2b00      	cmp	r3, #0
 800189a:	d12c      	bne.n	80018f6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d125      	bne.n	80018f6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d112      	bne.n	80018de <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d112      	bne.n	80018f6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
 80018dc:	e00b      	b.n	80018f6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f043 0220 	orr.w	r2, r3, #32
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d103      	bne.n	8001908 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	50000100 	.word	0x50000100
 8001918:	50000300 	.word	0x50000300
 800191c:	50000700 	.word	0x50000700
 8001920:	50000400 	.word	0x50000400

08001924 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001940:	b480      	push	{r7}
 8001942:	b09b      	sub	sp, #108	@ 0x6c
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x22>
 800195e:	2302      	movs	r3, #2
 8001960:	e2c8      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x5b4>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 82ac 	bne.w	8001ed2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b04      	cmp	r3, #4
 8001980:	d81c      	bhi.n	80019bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	461a      	mov	r2, r3
 8001996:	231f      	movs	r3, #31
 8001998:	4093      	lsls	r3, r2
 800199a:	43db      	mvns	r3, r3
 800199c:	4019      	ands	r1, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fa00 f203 	lsl.w	r2, r0, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80019ba:	e063      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	d81e      	bhi.n	8001a02 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	3b1e      	subs	r3, #30
 80019d8:	221f      	movs	r2, #31
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	4019      	ands	r1, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	3b1e      	subs	r3, #30
 80019f4:	fa00 f203 	lsl.w	r2, r0, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a00:	e040      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b0e      	cmp	r3, #14
 8001a08:	d81e      	bhi.n	8001a48 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	3b3c      	subs	r3, #60	@ 0x3c
 8001a1e:	221f      	movs	r2, #31
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4019      	ands	r1, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	3b3c      	subs	r3, #60	@ 0x3c
 8001a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a46:	e01d      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	3b5a      	subs	r3, #90	@ 0x5a
 8001a5c:	221f      	movs	r2, #31
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4019      	ands	r1, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	3b5a      	subs	r3, #90	@ 0x5a
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f040 80e5 	bne.w	8001c5e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b09      	cmp	r3, #9
 8001a9a:	d91c      	bls.n	8001ad6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6999      	ldr	r1, [r3, #24]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b1e      	subs	r3, #30
 8001aae:	2207      	movs	r2, #7
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4019      	ands	r1, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6898      	ldr	r0, [r3, #8]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b1e      	subs	r3, #30
 8001ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	619a      	str	r2, [r3, #24]
 8001ad4:	e019      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6959      	ldr	r1, [r3, #20]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4019      	ands	r1, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6898      	ldr	r0, [r3, #8]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	fa00 f203 	lsl.w	r2, r0, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	08db      	lsrs	r3, r3, #3
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d84f      	bhi.n	8001bcc <HAL_ADC_ConfigChannel+0x28c>
 8001b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b34 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b32:	bf00      	nop
 8001b34:	08001b45 	.word	0x08001b45
 8001b38:	08001b67 	.word	0x08001b67
 8001b3c:	08001b89 	.word	0x08001b89
 8001b40:	08001bab 	.word	0x08001bab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b4a:	4b99      	ldr	r3, [pc, #612]	@ (8001db0 <HAL_ADC_ConfigChannel+0x470>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	0691      	lsls	r1, r2, #26
 8001b54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b56:	430a      	orrs	r2, r1
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b62:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b64:	e07b      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b6c:	4b90      	ldr	r3, [pc, #576]	@ (8001db0 <HAL_ADC_ConfigChannel+0x470>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	0691      	lsls	r1, r2, #26
 8001b76:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b84:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b86:	e06a      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b8e:	4b88      	ldr	r3, [pc, #544]	@ (8001db0 <HAL_ADC_ConfigChannel+0x470>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	0691      	lsls	r1, r2, #26
 8001b98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ba6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ba8:	e059      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001bb0:	4b7f      	ldr	r3, [pc, #508]	@ (8001db0 <HAL_ADC_ConfigChannel+0x470>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	0691      	lsls	r1, r2, #26
 8001bba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001bc8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bca:	e048      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	069b      	lsls	r3, r3, #26
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d107      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bee:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bf6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	069b      	lsls	r3, r3, #26
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d107      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c12:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	069b      	lsls	r3, r3, #26
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d107      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c36:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	069b      	lsls	r3, r3, #26
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d107      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c5a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001c5c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d108      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x33e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x33e>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x340>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f040 8131 	bne.w	8001ee8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d00f      	beq.n	8001cae <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001cac:	e049      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b09      	cmp	r3, #9
 8001cce:	d91c      	bls.n	8001d0a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6999      	ldr	r1, [r3, #24]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b1b      	subs	r3, #27
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4019      	ands	r1, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6898      	ldr	r0, [r3, #8]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b1b      	subs	r3, #27
 8001cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	619a      	str	r2, [r3, #24]
 8001d08:	e01b      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6959      	ldr	r1, [r3, #20]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	4019      	ands	r1, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6898      	ldr	r0, [r3, #8]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d4a:	d004      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x416>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a18      	ldr	r2, [pc, #96]	@ (8001db4 <HAL_ADC_ConfigChannel+0x474>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x41a>
 8001d56:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <HAL_ADC_ConfigChannel+0x478>)
 8001d58:	e000      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x41c>
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_ADC_ConfigChannel+0x47c>)
 8001d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d105      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d015      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d76:	2b11      	cmp	r3, #17
 8001d78:	d105      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	f040 80ac 	bne.w	8001ee8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f040 80a5 	bne.w	8001ee8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001da6:	d10b      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x480>
 8001da8:	4b02      	ldr	r3, [pc, #8]	@ (8001db4 <HAL_ADC_ConfigChannel+0x474>)
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e023      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x4b6>
 8001dae:	bf00      	nop
 8001db0:	83fff000 	.word	0x83fff000
 8001db4:	50000100 	.word	0x50000100
 8001db8:	50000300 	.word	0x50000300
 8001dbc:	50000700 	.word	0x50000700
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f00 <HAL_ADC_ConfigChannel+0x5c0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d103      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x492>
 8001dca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e011      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x4b6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a4b      	ldr	r2, [pc, #300]	@ (8001f04 <HAL_ADC_ConfigChannel+0x5c4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d102      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x4a2>
 8001ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8001f08 <HAL_ADC_ConfigChannel+0x5c8>)
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e009      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x4b6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a48      	ldr	r2, [pc, #288]	@ (8001f08 <HAL_ADC_ConfigChannel+0x5c8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d102      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x4b2>
 8001dec:	4b45      	ldr	r3, [pc, #276]	@ (8001f04 <HAL_ADC_ConfigChannel+0x5c4>)
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e001      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x4b6>
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d108      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x4d6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x4d6>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x4d8>
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d150      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e1c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d010      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x4fe>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x4fe>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x500>
 8001e3e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d13c      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d11d      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x548>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e54:	d118      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e60:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e62:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <HAL_ADC_ConfigChannel+0x5cc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a2a      	ldr	r2, [pc, #168]	@ (8001f10 <HAL_ADC_ConfigChannel+0x5d0>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	0c9a      	lsrs	r2, r3, #18
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e78:	e002      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f9      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e86:	e02e      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b11      	cmp	r3, #17
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x568>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e98:	d106      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ea4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ea6:	e01e      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b12      	cmp	r3, #18
 8001eae:	d11a      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001eb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ebc:	e013      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	f043 0220 	orr.w	r2, r3, #32
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001ed0:	e00a      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f043 0220 	orr.w	r2, r3, #32
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001ee4:	e000      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ee6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ef0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	376c      	adds	r7, #108	@ 0x6c
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	50000100 	.word	0x50000100
 8001f04:	50000400 	.word	0x50000400
 8001f08:	50000500 	.word	0x50000500
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	431bde83 	.word	0x431bde83

08001f14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b099      	sub	sp, #100	@ 0x64
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f2c:	d102      	bne.n	8001f34 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	e01a      	b.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6a      	ldr	r2, [pc, #424]	@ (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d103      	bne.n	8001f46 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001f3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	e011      	b.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a67      	ldr	r2, [pc, #412]	@ (80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d102      	bne.n	8001f56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f50:	4b66      	ldr	r3, [pc, #408]	@ (80020ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	e009      	b.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a64      	ldr	r2, [pc, #400]	@ (80020ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d102      	bne.n	8001f66 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001f60:	4b61      	ldr	r3, [pc, #388]	@ (80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	e001      	b.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0b0      	b.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e0a9      	b.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 808d 	bne.w	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 8086 	bne.w	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fb0:	d004      	beq.n	8001fbc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a4b      	ldr	r2, [pc, #300]	@ (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001fbe:	e000      	b.n	8001fc2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001fc0:	4b4c      	ldr	r3, [pc, #304]	@ (80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d040      	beq.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001fcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fde:	035b      	lsls	r3, r3, #13
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fe6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d108      	bne.n	8002008 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d15c      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800202a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800202c:	2b00      	cmp	r3, #0
 800202e:	d14b      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002038:	f023 030f 	bic.w	r3, r3, #15
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	6811      	ldr	r1, [r2, #0]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	6892      	ldr	r2, [r2, #8]
 8002044:	430a      	orrs	r2, r1
 8002046:	431a      	orrs	r2, r3
 8002048:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800204a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800204c:	e03c      	b.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800204e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002058:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d108      	bne.n	800207a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800207a:	2300      	movs	r3, #0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d123      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800209c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d112      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80020a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80020aa:	f023 030f 	bic.w	r3, r3, #15
 80020ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020b0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020b2:	e009      	b.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80020c6:	e000      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020c8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80020d6:	4618      	mov	r0, r3
 80020d8:	3764      	adds	r7, #100	@ 0x64
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	50000100 	.word	0x50000100
 80020e8:	50000400 	.word	0x50000400
 80020ec:	50000500 	.word	0x50000500
 80020f0:	50000300 	.word	0x50000300
 80020f4:	50000700 	.word	0x50000700

080020f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <ADC_Enable+0x2c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <ADC_Enable+0x2c>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <ADC_Enable+0x2e>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d143      	bne.n	80021b2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <ADC_Enable+0xc4>)
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	f043 0210 	orr.w	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e02f      	b.n	80021b4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002164:	f7fe ff66 	bl	8001034 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800216a:	e01b      	b.n	80021a4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800216c:	f7fe ff62 	bl	8001034 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d914      	bls.n	80021a4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d00d      	beq.n	80021a4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	f043 0210 	orr.w	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e007      	b.n	80021b4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d1dc      	bne.n	800216c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	8000003f 	.word	0x8000003f

080021c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d108      	bne.n	80021ec <ADC_Disable+0x2c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <ADC_Disable+0x2c>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <ADC_Disable+0x2e>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d047      	beq.n	8002282 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030d 	and.w	r3, r3, #13
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10f      	bne.n	8002220 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0202 	orr.w	r2, r2, #2
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2203      	movs	r2, #3
 8002216:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002218:	f7fe ff0c 	bl	8001034 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800221e:	e029      	b.n	8002274 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	f043 0210 	orr.w	r2, r3, #16
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e023      	b.n	8002284 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800223c:	f7fe fefa 	bl	8001034 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d914      	bls.n	8002274 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d10d      	bne.n	8002274 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	f043 0210 	orr.w	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002268:	f043 0201 	orr.w	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e007      	b.n	8002284 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d0dc      	beq.n	800223c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 809b 	beq.w	80023e8 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022c0:	d12a      	bne.n	8002318 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d126      	bne.n	8002318 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d122      	bne.n	8002318 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80022d2:	230c      	movs	r3, #12
 80022d4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80022d6:	e014      	b.n	8002302 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4a46      	ldr	r2, [pc, #280]	@ (80023f4 <ADC_ConversionStop+0x168>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d90d      	bls.n	80022fc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	f043 0210 	orr.w	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e076      	b.n	80023ea <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	3301      	adds	r3, #1
 8002300:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230c:	2b40      	cmp	r3, #64	@ 0x40
 800230e:	d1e3      	bne.n	80022d8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2240      	movs	r2, #64	@ 0x40
 8002316:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b60      	cmp	r3, #96	@ 0x60
 800231c:	d015      	beq.n	800234a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b04      	cmp	r3, #4
 800232a:	d10e      	bne.n	800234a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002336:	2b00      	cmp	r3, #0
 8002338:	d107      	bne.n	800234a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0210 	orr.w	r2, r2, #16
 8002348:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b0c      	cmp	r3, #12
 800234e:	d015      	beq.n	800237c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b08      	cmp	r3, #8
 800235c:	d10e      	bne.n	800237c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002368:	2b00      	cmp	r3, #0
 800236a:	d107      	bne.n	800237c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0220 	orr.w	r2, r2, #32
 800237a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b60      	cmp	r3, #96	@ 0x60
 8002380:	d005      	beq.n	800238e <ADC_ConversionStop+0x102>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b6c      	cmp	r3, #108	@ 0x6c
 8002386:	d105      	bne.n	8002394 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002388:	230c      	movs	r3, #12
 800238a:	617b      	str	r3, [r7, #20]
        break;
 800238c:	e005      	b.n	800239a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800238e:	2308      	movs	r3, #8
 8002390:	617b      	str	r3, [r7, #20]
        break;
 8002392:	e002      	b.n	800239a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002394:	2304      	movs	r3, #4
 8002396:	617b      	str	r3, [r7, #20]
        break;
 8002398:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800239a:	f7fe fe4b 	bl	8001034 <HAL_GetTick>
 800239e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80023a0:	e01b      	b.n	80023da <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80023a2:	f7fe fe47 	bl	8001034 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b0b      	cmp	r3, #11
 80023ae:	d914      	bls.n	80023da <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00d      	beq.n	80023da <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f043 0210 	orr.w	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e007      	b.n	80023ea <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1dc      	bne.n	80023a2 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	000993ff 	.word	0x000993ff

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	@ (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	@ (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
         );
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f7ff ff8e 	bl	800245c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff47 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff5c 	bl	8002440 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff8e 	bl	80024b0 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5d 	bl	800245c <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffb0 	bl	8002518 <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d2:	e160      	b.n	8002896 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2101      	movs	r1, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8152 	beq.w	8002890 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d005      	beq.n	8002604 <HAL_GPIO_Init+0x40>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d130      	bne.n	8002666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800263a:	2201      	movs	r2, #1
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 0201 	and.w	r2, r3, #1
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b03      	cmp	r3, #3
 8002670:	d017      	beq.n	80026a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d123      	bne.n	80026f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	08da      	lsrs	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3208      	adds	r2, #8
 80026f0:	6939      	ldr	r1, [r7, #16]
 80026f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0203 	and.w	r2, r3, #3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80ac 	beq.w	8002890 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002738:	4b5e      	ldr	r3, [pc, #376]	@ (80028b4 <HAL_GPIO_Init+0x2f0>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a5d      	ldr	r2, [pc, #372]	@ (80028b4 <HAL_GPIO_Init+0x2f0>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b5b      	ldr	r3, [pc, #364]	@ (80028b4 <HAL_GPIO_Init+0x2f0>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002750:	4a59      	ldr	r2, [pc, #356]	@ (80028b8 <HAL_GPIO_Init+0x2f4>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800277a:	d025      	beq.n	80027c8 <HAL_GPIO_Init+0x204>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a4f      	ldr	r2, [pc, #316]	@ (80028bc <HAL_GPIO_Init+0x2f8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d01f      	beq.n	80027c4 <HAL_GPIO_Init+0x200>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a4e      	ldr	r2, [pc, #312]	@ (80028c0 <HAL_GPIO_Init+0x2fc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d019      	beq.n	80027c0 <HAL_GPIO_Init+0x1fc>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a4d      	ldr	r2, [pc, #308]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_GPIO_Init+0x1f8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a4c      	ldr	r2, [pc, #304]	@ (80028c8 <HAL_GPIO_Init+0x304>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00d      	beq.n	80027b8 <HAL_GPIO_Init+0x1f4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a4b      	ldr	r2, [pc, #300]	@ (80028cc <HAL_GPIO_Init+0x308>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <HAL_GPIO_Init+0x1f0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a4a      	ldr	r2, [pc, #296]	@ (80028d0 <HAL_GPIO_Init+0x30c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_GPIO_Init+0x1ec>
 80027ac:	2306      	movs	r3, #6
 80027ae:	e00c      	b.n	80027ca <HAL_GPIO_Init+0x206>
 80027b0:	2307      	movs	r3, #7
 80027b2:	e00a      	b.n	80027ca <HAL_GPIO_Init+0x206>
 80027b4:	2305      	movs	r3, #5
 80027b6:	e008      	b.n	80027ca <HAL_GPIO_Init+0x206>
 80027b8:	2304      	movs	r3, #4
 80027ba:	e006      	b.n	80027ca <HAL_GPIO_Init+0x206>
 80027bc:	2303      	movs	r3, #3
 80027be:	e004      	b.n	80027ca <HAL_GPIO_Init+0x206>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x206>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_GPIO_Init+0x206>
 80027c8:	2300      	movs	r3, #0
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	f002 0203 	and.w	r2, r2, #3
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	4093      	lsls	r3, r2
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027da:	4937      	ldr	r1, [pc, #220]	@ (80028b8 <HAL_GPIO_Init+0x2f4>)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e8:	4b3a      	ldr	r3, [pc, #232]	@ (80028d4 <HAL_GPIO_Init+0x310>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800280c:	4a31      	ldr	r2, [pc, #196]	@ (80028d4 <HAL_GPIO_Init+0x310>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002812:	4b30      	ldr	r3, [pc, #192]	@ (80028d4 <HAL_GPIO_Init+0x310>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002836:	4a27      	ldr	r2, [pc, #156]	@ (80028d4 <HAL_GPIO_Init+0x310>)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800283c:	4b25      	ldr	r3, [pc, #148]	@ (80028d4 <HAL_GPIO_Init+0x310>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002860:	4a1c      	ldr	r2, [pc, #112]	@ (80028d4 <HAL_GPIO_Init+0x310>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002866:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <HAL_GPIO_Init+0x310>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800288a:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <HAL_GPIO_Init+0x310>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3301      	adds	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f47f ae97 	bne.w	80025d4 <HAL_GPIO_Init+0x10>
  }
}
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010000 	.word	0x40010000
 80028bc:	48000400 	.word	0x48000400
 80028c0:	48000800 	.word	0x48000800
 80028c4:	48000c00 	.word	0x48000c00
 80028c8:	48001000 	.word	0x48001000
 80028cc:	48001400 	.word	0x48001400
 80028d0:	48001800 	.word	0x48001800
 80028d4:	40010400 	.word	0x40010400

080028d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	887b      	ldrh	r3, [r7, #2]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e001      	b.n	80028fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002924:	e002      	b.n	800292c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	43d9      	mvns	r1, r3
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	400b      	ands	r3, r1
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	619a      	str	r2, [r3, #24]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002972:	af00      	add	r7, sp, #0
 8002974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002978:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800297c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002982:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f001 b80a 	b.w	80039a6 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002996:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8161 	beq.w	8002c6a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029a8:	4bae      	ldr	r3, [pc, #696]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d00c      	beq.n	80029ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029b4:	4bab      	ldr	r3, [pc, #684]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d157      	bne.n	8002a70 <HAL_RCC_OscConfig+0x104>
 80029c0:	4ba8      	ldr	r3, [pc, #672]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029cc:	d150      	bne.n	8002a70 <HAL_RCC_OscConfig+0x104>
 80029ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029d2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80029ee:	d802      	bhi.n	80029f6 <HAL_RCC_OscConfig+0x8a>
 80029f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	e015      	b.n	8002a22 <HAL_RCC_OscConfig+0xb6>
 80029f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029fa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002a0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a0e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002a12:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002a1e:	4b91      	ldr	r3, [pc, #580]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a26:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002a2a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002a2e:	fa92 f2a2 	rbit	r2, r2
 8002a32:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002a36:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002a3a:	fab2 f282 	clz	r2, r2
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	f042 0220 	orr.w	r2, r2, #32
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f002 021f 	and.w	r2, r2, #31
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8108 	beq.w	8002c68 <HAL_RCC_OscConfig+0x2fc>
 8002a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 80ff 	bne.w	8002c68 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f000 bf9b 	b.w	80039a6 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a80:	d106      	bne.n	8002a90 <HAL_RCC_OscConfig+0x124>
 8002a82:	4b78      	ldr	r3, [pc, #480]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a77      	ldr	r2, [pc, #476]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e036      	b.n	8002afe <HAL_RCC_OscConfig+0x192>
 8002a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_OscConfig+0x14e>
 8002aa0:	4b70      	ldr	r3, [pc, #448]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6f      	ldr	r2, [pc, #444]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b6d      	ldr	r3, [pc, #436]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a6c      	ldr	r2, [pc, #432]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	e021      	b.n	8002afe <HAL_RCC_OscConfig+0x192>
 8002aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002abe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x17a>
 8002acc:	4b65      	ldr	r3, [pc, #404]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a64      	ldr	r2, [pc, #400]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ad2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b62      	ldr	r3, [pc, #392]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a61      	ldr	r2, [pc, #388]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	e00b      	b.n	8002afe <HAL_RCC_OscConfig+0x192>
 8002ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a5e      	ldr	r2, [pc, #376]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002aec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002af8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d054      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fa91 	bl	8001034 <HAL_GetTick>
 8002b12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fa8c 	bl	8001034 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	@ 0x64
 8002b26:	d902      	bls.n	8002b2e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	f000 bf3c 	b.w	80039a6 <HAL_RCC_OscConfig+0x103a>
 8002b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b32:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002b42:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b4e:	d802      	bhi.n	8002b56 <HAL_RCC_OscConfig+0x1ea>
 8002b50:	4b44      	ldr	r3, [pc, #272]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x216>
 8002b56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b5a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002b6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b6e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002b72:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002b7e:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b86:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002b8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002b8e:	fa92 f2a2 	rbit	r2, r2
 8002b92:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002b96:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002b9a:	fab2 f282 	clz	r2, r2
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f042 0220 	orr.w	r2, r2, #32
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f002 021f 	and.w	r2, r2, #31
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0b0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x1ac>
 8002bb6:	e058      	b.n	8002c6a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fa3c 	bl	8001034 <HAL_GetTick>
 8002bbc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fa37 	bl	8001034 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	@ 0x64
 8002bd0:	d902      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	f000 bee7 	b.w	80039a6 <HAL_RCC_OscConfig+0x103a>
 8002bd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bdc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002bec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bf8:	d802      	bhi.n	8002c00 <HAL_RCC_OscConfig+0x294>
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	e015      	b.n	8002c2c <HAL_RCC_OscConfig+0x2c0>
 8002c00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c04:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002c14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c18:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002c1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002c28:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c30:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002c34:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002c38:	fa92 f2a2 	rbit	r2, r2
 8002c3c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002c40:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002c44:	fab2 f282 	clz	r2, r2
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	f042 0220 	orr.w	r2, r2, #32
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f002 021f 	and.w	r2, r2, #31
 8002c54:	2101      	movs	r1, #1
 8002c56:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1b0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x256>
 8002c60:	e003      	b.n	8002c6a <HAL_RCC_OscConfig+0x2fe>
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 816d 	beq.w	8002f5a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c80:	4bcd      	ldr	r3, [pc, #820]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c8c:	4bca      	ldr	r3, [pc, #808]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d16e      	bne.n	8002d76 <HAL_RCC_OscConfig+0x40a>
 8002c98:	4bc7      	ldr	r3, [pc, #796]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca4:	d167      	bne.n	8002d76 <HAL_RCC_OscConfig+0x40a>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002cb8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cc4:	d802      	bhi.n	8002ccc <HAL_RCC_OscConfig+0x360>
 8002cc6:	4bbc      	ldr	r3, [pc, #752]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	e013      	b.n	8002cf4 <HAL_RCC_OscConfig+0x388>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ce4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002cf0:	4bb1      	ldr	r3, [pc, #708]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002cfa:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002cfe:	fa92 f2a2 	rbit	r2, r2
 8002d02:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002d06:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002d0a:	fab2 f282 	clz	r2, r2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f042 0220 	orr.w	r2, r2, #32
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f002 021f 	and.w	r2, r2, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCC_OscConfig+0x3d0>
 8002d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d002      	beq.n	8002d3c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f000 be35 	b.w	80039a6 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b9e      	ldr	r3, [pc, #632]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	21f8      	movs	r1, #248	@ 0xf8
 8002d52:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002d5a:	fa91 f1a1 	rbit	r1, r1
 8002d5e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002d62:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002d66:	fab1 f181 	clz	r1, r1
 8002d6a:	b2c9      	uxtb	r1, r1
 8002d6c:	408b      	lsls	r3, r1
 8002d6e:	4992      	ldr	r1, [pc, #584]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d74:	e0f1      	b.n	8002f5a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8083 	beq.w	8002e8e <HAL_RCC_OscConfig+0x522>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002d9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002da8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	461a      	mov	r2, r3
 8002db0:	2301      	movs	r3, #1
 8002db2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe f93e 	bl	8001034 <HAL_GetTick>
 8002db8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dbe:	f7fe f939 	bl	8001034 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d902      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	f000 bde9 	b.w	80039a6 <HAL_RCC_OscConfig+0x103a>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002de6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002df2:	d802      	bhi.n	8002dfa <HAL_RCC_OscConfig+0x48e>
 8002df4:	4b70      	ldr	r3, [pc, #448]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	e013      	b.n	8002e22 <HAL_RCC_OscConfig+0x4b6>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002e12:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002e1e:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	2202      	movs	r2, #2
 8002e24:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002e28:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002e2c:	fa92 f2a2 	rbit	r2, r2
 8002e30:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002e34:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002e38:	fab2 f282 	clz	r2, r2
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f002 021f 	and.w	r2, r2, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0b4      	beq.n	8002dbe <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	4b58      	ldr	r3, [pc, #352]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	21f8      	movs	r1, #248	@ 0xf8
 8002e6a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002e72:	fa91 f1a1 	rbit	r1, r1
 8002e76:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002e7a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002e7e:	fab1 f181 	clz	r1, r1
 8002e82:	b2c9      	uxtb	r1, r1
 8002e84:	408b      	lsls	r3, r1
 8002e86:	494c      	ldr	r1, [pc, #304]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
 8002e8c:	e065      	b.n	8002f5a <HAL_RCC_OscConfig+0x5ee>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002ea0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002eae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe f8bb 	bl	8001034 <HAL_GetTick>
 8002ebe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7fe f8b6 	bl	8001034 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d902      	bls.n	8002eda <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	f000 bd66 	b.w	80039a6 <HAL_RCC_OscConfig+0x103a>
 8002eda:	2302      	movs	r3, #2
 8002edc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002eec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ef8:	d802      	bhi.n	8002f00 <HAL_RCC_OscConfig+0x594>
 8002efa:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	e013      	b.n	8002f28 <HAL_RCC_OscConfig+0x5bc>
 8002f00:	2302      	movs	r3, #2
 8002f02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f12:	2302      	movs	r3, #2
 8002f14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f18:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f24:	4b24      	ldr	r3, [pc, #144]	@ (8002fb8 <HAL_RCC_OscConfig+0x64c>)
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002f2e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002f32:	fa92 f2a2 	rbit	r2, r2
 8002f36:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002f3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002f3e:	fab2 f282 	clz	r2, r2
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f042 0220 	orr.w	r2, r2, #32
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f002 021f 	and.w	r2, r2, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1b4      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8119 	beq.w	80031a2 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8082 	beq.w	8003086 <HAL_RCC_OscConfig+0x71a>
 8002f82:	2301      	movs	r3, #1
 8002f84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002f94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2301      	movs	r3, #1
 8002faa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fac:	f7fe f842 	bl	8001034 <HAL_GetTick>
 8002fb0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb4:	e00f      	b.n	8002fd6 <HAL_RCC_OscConfig+0x66a>
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe f838 	bl	8001034 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d902      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	f000 bce8 	b.w	80039a6 <HAL_RCC_OscConfig+0x103a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	fa93 f2a3 	rbit	r2, r3
 8003008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800300c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003016:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800301a:	2202      	movs	r2, #2
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003022:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003030:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003034:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4bb0      	ldr	r3, [pc, #704]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 8003038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800303a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003042:	2102      	movs	r1, #2
 8003044:	6019      	str	r1, [r3, #0]
 8003046:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800304a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fa93 f1a3 	rbit	r1, r3
 8003054:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003058:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800305c:	6019      	str	r1, [r3, #0]
  return result;
 800305e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003062:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d09d      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x654>
 8003084:	e08d      	b.n	80031a2 <HAL_RCC_OscConfig+0x836>
 8003086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800308a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003096:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030a8:	601a      	str	r2, [r3, #0]
  return result;
 80030aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b8f      	ldr	r3, [pc, #572]	@ (80032fc <HAL_RCC_OscConfig+0x990>)
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fd ffb4 	bl	8001034 <HAL_GetTick>
 80030cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d2:	f7fd ffaf 	bl	8001034 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d902      	bls.n	80030e8 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	f000 bc5f 	b.w	80039a6 <HAL_RCC_OscConfig+0x103a>
 80030e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030f0:	2202      	movs	r2, #2
 80030f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fa93 f2a3 	rbit	r2, r3
 8003102:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003106:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003110:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003114:	2202      	movs	r2, #2
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800312a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003134:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003138:	2202      	movs	r2, #2
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003140:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800314e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003152:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	4b68      	ldr	r3, [pc, #416]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 8003156:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800315c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003160:	2102      	movs	r1, #2
 8003162:	6019      	str	r1, [r3, #0]
 8003164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003168:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f1a3 	rbit	r1, r3
 8003172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003176:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800317a:	6019      	str	r1, [r3, #0]
  return result;
 800317c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003180:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2101      	movs	r1, #1
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d197      	bne.n	80030d2 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 819c 	beq.w	80034f0 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031be:	4b4e      	ldr	r3, [pc, #312]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	4b4b      	ldr	r3, [pc, #300]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	4a4a      	ldr	r2, [pc, #296]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	61d3      	str	r3, [r2, #28]
 80031d6:	4b48      	ldr	r3, [pc, #288]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80031de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	4b41      	ldr	r3, [pc, #260]	@ (8003300 <HAL_RCC_OscConfig+0x994>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11a      	bne.n	800323a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003204:	4b3e      	ldr	r3, [pc, #248]	@ (8003300 <HAL_RCC_OscConfig+0x994>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a3d      	ldr	r2, [pc, #244]	@ (8003300 <HAL_RCC_OscConfig+0x994>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800320e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003210:	f7fd ff10 	bl	8001034 <HAL_GetTick>
 8003214:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	e009      	b.n	800322e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321a:	f7fd ff0b 	bl	8001034 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e3bb      	b.n	80039a6 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b34      	ldr	r3, [pc, #208]	@ (8003300 <HAL_RCC_OscConfig+0x994>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0ef      	beq.n	800321a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x8ec>
 800324a:	4b2b      	ldr	r3, [pc, #172]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a2a      	ldr	r2, [pc, #168]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6213      	str	r3, [r2, #32]
 8003256:	e035      	b.n	80032c4 <HAL_RCC_OscConfig+0x958>
 8003258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10c      	bne.n	8003282 <HAL_RCC_OscConfig+0x916>
 8003268:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4a22      	ldr	r2, [pc, #136]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6213      	str	r3, [r2, #32]
 8003274:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	4a1f      	ldr	r2, [pc, #124]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 800327a:	f023 0304 	bic.w	r3, r3, #4
 800327e:	6213      	str	r3, [r2, #32]
 8003280:	e020      	b.n	80032c4 <HAL_RCC_OscConfig+0x958>
 8003282:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003286:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b05      	cmp	r3, #5
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x940>
 8003292:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	4a18      	ldr	r2, [pc, #96]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	6213      	str	r3, [r2, #32]
 800329e:	4b16      	ldr	r3, [pc, #88]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4a15      	ldr	r2, [pc, #84]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6213      	str	r3, [r2, #32]
 80032aa:	e00b      	b.n	80032c4 <HAL_RCC_OscConfig+0x958>
 80032ac:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4a11      	ldr	r2, [pc, #68]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	6213      	str	r3, [r2, #32]
 80032b8:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4a0e      	ldr	r2, [pc, #56]	@ (80032f8 <HAL_RCC_OscConfig+0x98c>)
 80032be:	f023 0304 	bic.w	r3, r3, #4
 80032c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 8085 	beq.w	80033e0 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d6:	f7fd fead 	bl	8001034 <HAL_GetTick>
 80032da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	e011      	b.n	8003304 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7fd fea8 	bl	8001034 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d907      	bls.n	8003304 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e356      	b.n	80039a6 <HAL_RCC_OscConfig+0x103a>
 80032f8:	40021000 	.word	0x40021000
 80032fc:	10908120 	.word	0x10908120
 8003300:	40007000 	.word	0x40007000
 8003304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003308:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800330c:	2202      	movs	r2, #2
 800330e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003314:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	fa93 f2a3 	rbit	r2, r3
 800331e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003322:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800332c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003330:	2202      	movs	r2, #2
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003338:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	fa93 f2a3 	rbit	r2, r3
 8003342:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003346:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800334a:	601a      	str	r2, [r3, #0]
  return result;
 800334c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003350:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003354:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_RCC_OscConfig+0xa00>
 8003366:	4b98      	ldr	r3, [pc, #608]	@ (80035c8 <HAL_RCC_OscConfig+0xc5c>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	e013      	b.n	8003394 <HAL_RCC_OscConfig+0xa28>
 800336c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003370:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003374:	2202      	movs	r2, #2
 8003376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800337c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800338a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	4b8d      	ldr	r3, [pc, #564]	@ (80035c8 <HAL_RCC_OscConfig+0xc5c>)
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003398:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800339c:	2102      	movs	r1, #2
 800339e:	6011      	str	r1, [r2, #0]
 80033a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033a4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	fa92 f1a2 	rbit	r1, r2
 80033ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033b2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80033b6:	6011      	str	r1, [r2, #0]
  return result;
 80033b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033bc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	fab2 f282 	clz	r2, r2
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f002 021f 	and.w	r2, r2, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f202 	lsl.w	r2, r1, r2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d080      	beq.n	80032e0 <HAL_RCC_OscConfig+0x974>
 80033de:	e07d      	b.n	80034dc <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fd fe28 	bl	8001034 <HAL_GetTick>
 80033e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e00b      	b.n	8003402 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fd fe23 	bl	8001034 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e2d1      	b.n	80039a6 <HAL_RCC_OscConfig+0x103a>
 8003402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003406:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800340a:	2202      	movs	r2, #2
 800340c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003412:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	fa93 f2a3 	rbit	r2, r3
 800341c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003420:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800342a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800342e:	2202      	movs	r2, #2
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003436:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003444:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003448:	601a      	str	r2, [r3, #0]
  return result;
 800344a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800344e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003452:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <HAL_RCC_OscConfig+0xafe>
 8003464:	4b58      	ldr	r3, [pc, #352]	@ (80035c8 <HAL_RCC_OscConfig+0xc5c>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	e013      	b.n	8003492 <HAL_RCC_OscConfig+0xb26>
 800346a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800346e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003472:	2202      	movs	r2, #2
 8003474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800347a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003488:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	4b4e      	ldr	r3, [pc, #312]	@ (80035c8 <HAL_RCC_OscConfig+0xc5c>)
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003496:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800349a:	2102      	movs	r1, #2
 800349c:	6011      	str	r1, [r2, #0]
 800349e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034a2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	fa92 f1a2 	rbit	r1, r2
 80034ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034b0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80034b4:	6011      	str	r1, [r2, #0]
  return result;
 80034b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034ba:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	fab2 f282 	clz	r2, r2
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f002 021f 	and.w	r2, r2, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d186      	bne.n	80033ea <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034dc:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b38      	ldr	r3, [pc, #224]	@ (80035c8 <HAL_RCC_OscConfig+0xc5c>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	4a37      	ldr	r2, [pc, #220]	@ (80035c8 <HAL_RCC_OscConfig+0xc5c>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8251 	beq.w	80039a4 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003502:	4b31      	ldr	r3, [pc, #196]	@ (80035c8 <HAL_RCC_OscConfig+0xc5c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b08      	cmp	r3, #8
 800350c:	f000 820f 	beq.w	800392e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003514:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b02      	cmp	r3, #2
 800351e:	f040 8165 	bne.w	80037ec <HAL_RCC_OscConfig+0xe80>
 8003522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003526:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800352a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800352e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003534:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fa93 f2a3 	rbit	r2, r3
 800353e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003542:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003546:	601a      	str	r2, [r3, #0]
  return result;
 8003548:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800354c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003550:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800355c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	461a      	mov	r2, r3
 8003564:	2300      	movs	r3, #0
 8003566:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fd fd64 	bl	8001034 <HAL_GetTick>
 800356c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003570:	e009      	b.n	8003586 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003572:	f7fd fd5f 	bl	8001034 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e20f      	b.n	80039a6 <HAL_RCC_OscConfig+0x103a>
 8003586:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800358a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800358e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003592:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003598:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	fa93 f2a3 	rbit	r2, r3
 80035a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035aa:	601a      	str	r2, [r3, #0]
  return result;
 80035ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80035be:	d805      	bhi.n	80035cc <HAL_RCC_OscConfig+0xc60>
 80035c0:	4b01      	ldr	r3, [pc, #4]	@ (80035c8 <HAL_RCC_OscConfig+0xc5c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	e02a      	b.n	800361c <HAL_RCC_OscConfig+0xcb0>
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035d0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	fa93 f2a3 	rbit	r2, r3
 80035e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80035fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003604:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	fa93 f2a3 	rbit	r2, r3
 800360e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003612:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	4bca      	ldr	r3, [pc, #808]	@ (8003944 <HAL_RCC_OscConfig+0xfd8>)
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003620:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003624:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003628:	6011      	str	r1, [r2, #0]
 800362a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800362e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	fa92 f1a2 	rbit	r1, r2
 8003638:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800363c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003640:	6011      	str	r1, [r2, #0]
  return result;
 8003642:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003646:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	fab2 f282 	clz	r2, r2
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	f042 0220 	orr.w	r2, r2, #32
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	f002 021f 	and.w	r2, r2, #31
 800365c:	2101      	movs	r1, #1
 800365e:	fa01 f202 	lsl.w	r2, r1, r2
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d184      	bne.n	8003572 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003668:	4bb6      	ldr	r3, [pc, #728]	@ (8003944 <HAL_RCC_OscConfig+0xfd8>)
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	f023 020f 	bic.w	r2, r3, #15
 8003670:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003674:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	49b1      	ldr	r1, [pc, #708]	@ (8003944 <HAL_RCC_OscConfig+0xfd8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003682:	4bb0      	ldr	r3, [pc, #704]	@ (8003944 <HAL_RCC_OscConfig+0xfd8>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800368a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800368e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a19      	ldr	r1, [r3, #32]
 8003696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800369a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	430b      	orrs	r3, r1
 80036a4:	49a7      	ldr	r1, [pc, #668]	@ (8003944 <HAL_RCC_OscConfig+0xfd8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
 80036aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036bc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fa93 f2a3 	rbit	r2, r3
 80036c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036ce:	601a      	str	r2, [r3, #0]
  return result;
 80036d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036d8:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	461a      	mov	r2, r3
 80036ec:	2301      	movs	r3, #1
 80036ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fd fca0 	bl	8001034 <HAL_GetTick>
 80036f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f8:	e009      	b.n	800370e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fd fc9b 	bl	8001034 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e14b      	b.n	80039a6 <HAL_RCC_OscConfig+0x103a>
 800370e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003712:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003716:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800371a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003720:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	fa93 f2a3 	rbit	r2, r3
 800372a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800372e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003732:	601a      	str	r2, [r3, #0]
  return result;
 8003734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003738:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800373c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b3f      	cmp	r3, #63	@ 0x3f
 8003746:	d802      	bhi.n	800374e <HAL_RCC_OscConfig+0xde2>
 8003748:	4b7e      	ldr	r3, [pc, #504]	@ (8003944 <HAL_RCC_OscConfig+0xfd8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	e027      	b.n	800379e <HAL_RCC_OscConfig+0xe32>
 800374e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003752:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003756:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800375a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003760:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f2a3 	rbit	r2, r3
 800376a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003778:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800377c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003786:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	fa93 f2a3 	rbit	r2, r3
 8003790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003794:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	4b6a      	ldr	r3, [pc, #424]	@ (8003944 <HAL_RCC_OscConfig+0xfd8>)
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037aa:	6011      	str	r1, [r2, #0]
 80037ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037b0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	fa92 f1a2 	rbit	r1, r2
 80037ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037be:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80037c2:	6011      	str	r1, [r2, #0]
  return result;
 80037c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037c8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	fab2 f282 	clz	r2, r2
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f042 0220 	orr.w	r2, r2, #32
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f002 021f 	and.w	r2, r2, #31
 80037de:	2101      	movs	r1, #1
 80037e0:	fa01 f202 	lsl.w	r2, r1, r2
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d087      	beq.n	80036fa <HAL_RCC_OscConfig+0xd8e>
 80037ea:	e0db      	b.n	80039a4 <HAL_RCC_OscConfig+0x1038>
 80037ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	fa93 f2a3 	rbit	r2, r3
 8003808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800380c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003810:	601a      	str	r2, [r3, #0]
  return result;
 8003812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003816:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800381a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003826:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	461a      	mov	r2, r3
 800382e:	2300      	movs	r3, #0
 8003830:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003832:	f7fd fbff 	bl	8001034 <HAL_GetTick>
 8003836:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800383a:	e009      	b.n	8003850 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383c:	f7fd fbfa 	bl	8001034 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e0aa      	b.n	80039a6 <HAL_RCC_OscConfig+0x103a>
 8003850:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003854:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003858:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800385c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003862:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	fa93 f2a3 	rbit	r2, r3
 800386c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003870:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003874:	601a      	str	r2, [r3, #0]
  return result;
 8003876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800387e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b3f      	cmp	r3, #63	@ 0x3f
 8003888:	d802      	bhi.n	8003890 <HAL_RCC_OscConfig+0xf24>
 800388a:	4b2e      	ldr	r3, [pc, #184]	@ (8003944 <HAL_RCC_OscConfig+0xfd8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	e027      	b.n	80038e0 <HAL_RCC_OscConfig+0xf74>
 8003890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003894:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003898:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800389c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038a2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	fa93 f2a3 	rbit	r2, r3
 80038ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	fa93 f2a3 	rbit	r2, r3
 80038d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	4b19      	ldr	r3, [pc, #100]	@ (8003944 <HAL_RCC_OscConfig+0xfd8>)
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038e4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80038e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038ec:	6011      	str	r1, [r2, #0]
 80038ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038f2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	fa92 f1a2 	rbit	r1, r2
 80038fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003900:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003904:	6011      	str	r1, [r2, #0]
  return result;
 8003906:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800390a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	fab2 f282 	clz	r2, r2
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f042 0220 	orr.w	r2, r2, #32
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f002 021f 	and.w	r2, r2, #31
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f202 	lsl.w	r2, r1, r2
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d187      	bne.n	800383c <HAL_RCC_OscConfig+0xed0>
 800392c:	e03a      	b.n	80039a4 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003932:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d104      	bne.n	8003948 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e031      	b.n	80039a6 <HAL_RCC_OscConfig+0x103a>
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003948:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <HAL_RCC_OscConfig+0x1044>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003950:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <HAL_RCC_OscConfig+0x1044>)
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003958:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800395c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003964:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	429a      	cmp	r2, r3
 800396e:	d117      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003970:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003974:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800397c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003984:	429a      	cmp	r2, r3
 8003986:	d10b      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800398c:	f003 020f 	and.w	r2, r3, #15
 8003990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003994:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000

080039b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b09e      	sub	sp, #120	@ 0x78
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e154      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b89      	ldr	r3, [pc, #548]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b86      	ldr	r3, [pc, #536]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	4984      	ldr	r1, [pc, #528]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b82      	ldr	r3, [pc, #520]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e13c      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a08:	4b7b      	ldr	r3, [pc, #492]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4978      	ldr	r1, [pc, #480]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80cd 	beq.w	8003bc2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d137      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xec>
 8003a30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a48:	d802      	bhi.n	8003a50 <HAL_RCC_ClockConfig+0x9c>
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	e00f      	b.n	8003a70 <HAL_RCC_ClockConfig+0xbc>
 8003a50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a62:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a6c:	4b62      	ldr	r3, [pc, #392]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a78:	fa92 f2a2 	rbit	r2, r2
 8003a7c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003a7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a80:	fab2 f282 	clz	r2, r2
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	f042 0220 	orr.w	r2, r2, #32
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	f002 021f 	and.w	r2, r2, #31
 8003a90:	2101      	movs	r1, #1
 8003a92:	fa01 f202 	lsl.w	r2, r1, r2
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d171      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0ea      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d137      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x164>
 8003aa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ac0:	d802      	bhi.n	8003ac8 <HAL_RCC_ClockConfig+0x114>
 8003ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	e00f      	b.n	8003ae8 <HAL_RCC_ClockConfig+0x134>
 8003ac8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003acc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ad0:	fa93 f3a3 	rbit	r3, r3
 8003ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8003adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae4:	4b44      	ldr	r3, [pc, #272]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aec:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003af0:	fa92 f2a2 	rbit	r2, r2
 8003af4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003af6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003af8:	fab2 f282 	clz	r2, r2
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	f042 0220 	orr.w	r2, r2, #32
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	f002 021f 	and.w	r2, r2, #31
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d135      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0ae      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2c2>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b2e:	d802      	bhi.n	8003b36 <HAL_RCC_ClockConfig+0x182>
 8003b30:	4b31      	ldr	r3, [pc, #196]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	e00d      	b.n	8003b52 <HAL_RCC_ClockConfig+0x19e>
 8003b36:	2302      	movs	r3, #2
 8003b38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b42:	2302      	movs	r3, #2
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	2202      	movs	r2, #2
 8003b54:	61ba      	str	r2, [r7, #24]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	fa92 f2a2 	rbit	r2, r2
 8003b5c:	617a      	str	r2, [r7, #20]
  return result;
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	fab2 f282 	clz	r2, r2
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	f042 0220 	orr.w	r2, r2, #32
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f002 021f 	and.w	r2, r2, #31
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f202 	lsl.w	r2, r1, r2
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e07a      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b80:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f023 0203 	bic.w	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	491a      	ldr	r1, [pc, #104]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b92:	f7fd fa4f 	bl	8001034 <HAL_GetTick>
 8003b96:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9a:	f7fd fa4b 	bl	8001034 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e062      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_RCC_ClockConfig+0x244>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 020c 	and.w	r2, r3, #12
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d1eb      	bne.n	8003b9a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d215      	bcs.n	8003bfc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd0:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 0207 	bic.w	r2, r3, #7
 8003bd8:	4906      	ldr	r1, [pc, #24]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be0:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <HAL_RCC_ClockConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d006      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e041      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2c2>
 8003bf2:	bf00      	nop
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c08:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <HAL_RCC_ClockConfig+0x2cc>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	491a      	ldr	r1, [pc, #104]	@ (8003c80 <HAL_RCC_ClockConfig+0x2cc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c26:	4b16      	ldr	r3, [pc, #88]	@ (8003c80 <HAL_RCC_ClockConfig+0x2cc>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4912      	ldr	r1, [pc, #72]	@ (8003c80 <HAL_RCC_ClockConfig+0x2cc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c3a:	f000 f829 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003c3e:	4601      	mov	r1, r0
 8003c40:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <HAL_RCC_ClockConfig+0x2cc>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c48:	22f0      	movs	r2, #240	@ 0xf0
 8003c4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	fa92 f2a2 	rbit	r2, r2
 8003c52:	60fa      	str	r2, [r7, #12]
  return result;
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	fab2 f282 	clz	r2, r2
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	40d3      	lsrs	r3, r2
 8003c5e:	4a09      	ldr	r2, [pc, #36]	@ (8003c84 <HAL_RCC_ClockConfig+0x2d0>)
 8003c60:	5cd3      	ldrb	r3, [r2, r3]
 8003c62:	fa21 f303 	lsr.w	r3, r1, r3
 8003c66:	4a08      	ldr	r2, [pc, #32]	@ (8003c88 <HAL_RCC_ClockConfig+0x2d4>)
 8003c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c6a:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <HAL_RCC_ClockConfig+0x2d8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd f99c 	bl	8000fac <HAL_InitTick>
  
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3778      	adds	r7, #120	@ 0x78
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08005680 	.word	0x08005680
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	20000004 	.word	0x20000004

08003c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003caa:	4b1f      	ldr	r3, [pc, #124]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x30>
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x36>
 8003cbe:	e029      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cc2:	613b      	str	r3, [r7, #16]
      break;
 8003cc4:	e029      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	0c9b      	lsrs	r3, r3, #18
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	4a18      	ldr	r2, [pc, #96]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cd0:	5cd3      	ldrb	r3, [r2, r3]
 8003cd2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003cd4:	4b14      	ldr	r3, [pc, #80]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	4a15      	ldr	r2, [pc, #84]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cde:	5cd3      	ldrb	r3, [r2, r3]
 8003ce0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cec:	4a0f      	ldr	r2, [pc, #60]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e007      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	613b      	str	r3, [r7, #16]
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d16:	613b      	str	r3, [r7, #16]
      break;
 8003d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1a:	693b      	ldr	r3, [r7, #16]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	007a1200 	.word	0x007a1200
 8003d30:	08005698 	.word	0x08005698
 8003d34:	080056a8 	.word	0x080056a8

08003d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d3c:	4b03      	ldr	r3, [pc, #12]	@ (8003d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000000 	.word	0x20000000

08003d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d56:	f7ff ffef 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003d5a:	4601      	mov	r1, r0
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d64:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003d68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	fa92 f2a2 	rbit	r2, r2
 8003d70:	603a      	str	r2, [r7, #0]
  return result;
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	fab2 f282 	clz	r2, r2
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	40d3      	lsrs	r3, r2
 8003d7c:	4a04      	ldr	r2, [pc, #16]	@ (8003d90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d7e:	5cd3      	ldrb	r3, [r2, r3]
 8003d80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	08005690 	.word	0x08005690

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d9a:	f7ff ffcd 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003d9e:	4601      	mov	r1, r0
 8003da0:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003da8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003dac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	fa92 f2a2 	rbit	r2, r2
 8003db4:	603a      	str	r2, [r7, #0]
  return result;
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	fab2 f282 	clz	r2, r2
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	40d3      	lsrs	r3, r2
 8003dc0:	4a04      	ldr	r2, [pc, #16]	@ (8003dd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08005690 	.word	0x08005690

08003dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b092      	sub	sp, #72	@ 0x48
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80d2 	beq.w	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10e      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e08:	4b4a      	ldr	r3, [pc, #296]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4a49      	ldr	r2, [pc, #292]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e12:	61d3      	str	r3, [r2, #28]
 8003e14:	4b47      	ldr	r3, [pc, #284]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	4b44      	ldr	r3, [pc, #272]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d118      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e32:	4b41      	ldr	r3, [pc, #260]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a40      	ldr	r2, [pc, #256]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3e:	f7fd f8f9 	bl	8001034 <HAL_GetTick>
 8003e42:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	e008      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fd f8f5 	bl	8001034 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b64      	cmp	r3, #100	@ 0x64
 8003e52:	d901      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e1d4      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	4b37      	ldr	r3, [pc, #220]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e64:	4b33      	ldr	r3, [pc, #204]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8082 	beq.w	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d07a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e84:	4b2b      	ldr	r3, [pc, #172]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b25      	ldr	r3, [pc, #148]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	461a      	mov	r2, r3
 8003eae:	2301      	movs	r3, #1
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eba:	fa93 f3a3 	rbit	r3, r3
 8003ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b1c      	ldr	r3, [pc, #112]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ed6:	4a17      	ldr	r2, [pc, #92]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eda:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d049      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fd f8a5 	bl	8001034 <HAL_GetTick>
 8003eea:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eec:	e00a      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fd f8a1 	bl	8001034 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e17e      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003f04:	2302      	movs	r3, #2
 8003f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f10:	2302      	movs	r3, #2
 8003f12:	623b      	str	r3, [r7, #32]
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	61fb      	str	r3, [r7, #28]
  return result;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003f2e:	4b01      	ldr	r3, [pc, #4]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	e00d      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	10908100 	.word	0x10908100
 8003f40:	2302      	movs	r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	4b9a      	ldr	r3, [pc, #616]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	2202      	movs	r2, #2
 8003f52:	613a      	str	r2, [r7, #16]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	fa92 f2a2 	rbit	r2, r2
 8003f5a:	60fa      	str	r2, [r7, #12]
  return result;
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	fab2 f282 	clz	r2, r2
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	f002 021f 	and.w	r2, r2, #31
 8003f6e:	2101      	movs	r1, #1
 8003f70:	fa01 f202 	lsl.w	r2, r1, r2
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0b9      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f7a:	4b8f      	ldr	r3, [pc, #572]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	498c      	ldr	r1, [pc, #560]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f94:	4b88      	ldr	r3, [pc, #544]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	4a87      	ldr	r2, [pc, #540]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fac:	4b82      	ldr	r3, [pc, #520]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb0:	f023 0203 	bic.w	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	497f      	ldr	r1, [pc, #508]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fca:	4b7b      	ldr	r3, [pc, #492]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	4978      	ldr	r1, [pc, #480]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fe8:	4b73      	ldr	r3, [pc, #460]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	4970      	ldr	r1, [pc, #448]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004006:	4b6c      	ldr	r3, [pc, #432]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	f023 0210 	bic.w	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4969      	ldr	r1, [pc, #420]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004014:	4313      	orrs	r3, r2
 8004016:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004024:	4b64      	ldr	r3, [pc, #400]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004030:	4961      	ldr	r1, [pc, #388]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	4313      	orrs	r3, r2
 8004034:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004042:	4b5d      	ldr	r3, [pc, #372]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004046:	f023 0220 	bic.w	r2, r3, #32
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	495a      	ldr	r1, [pc, #360]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004050:	4313      	orrs	r3, r2
 8004052:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004060:	4b55      	ldr	r3, [pc, #340]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	4952      	ldr	r1, [pc, #328]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406e:	4313      	orrs	r3, r2
 8004070:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d008      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800407e:	4b4e      	ldr	r3, [pc, #312]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	494b      	ldr	r1, [pc, #300]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408c:	4313      	orrs	r3, r2
 800408e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800409c:	4b46      	ldr	r3, [pc, #280]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	4943      	ldr	r1, [pc, #268]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040ba:	4b3f      	ldr	r3, [pc, #252]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	493c      	ldr	r1, [pc, #240]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040d8:	4b37      	ldr	r3, [pc, #220]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	4934      	ldr	r1, [pc, #208]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80040f6:	4b30      	ldr	r3, [pc, #192]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	492d      	ldr	r1, [pc, #180]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004114:	4b28      	ldr	r3, [pc, #160]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004118:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004120:	4925      	ldr	r1, [pc, #148]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004132:	4b21      	ldr	r3, [pc, #132]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	491e      	ldr	r1, [pc, #120]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004150:	4b19      	ldr	r3, [pc, #100]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415c:	4916      	ldr	r1, [pc, #88]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800416e:	4b12      	ldr	r3, [pc, #72]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417a:	490f      	ldr	r1, [pc, #60]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417c:	4313      	orrs	r3, r2
 800417e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800418c:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	4907      	ldr	r1, [pc, #28]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419a:	4313      	orrs	r3, r2
 800419c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00c      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80041aa:	4b03      	ldr	r3, [pc, #12]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	e002      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041be:	4913      	ldr	r1, [pc, #76]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80041d0:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041dc:	490b      	ldr	r1, [pc, #44]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80041ee:	4b07      	ldr	r3, [pc, #28]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fa:	4904      	ldr	r1, [pc, #16]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3748      	adds	r7, #72	@ 0x48
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000

08004210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e040      	b.n	80042a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fc fdc0 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	@ 0x24
 800423c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fa86 	bl	8004768 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f8af 	bl	80043c0 <UART_SetConfig>
 8004262:	4603      	mov	r3, r0
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e01b      	b.n	80042a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800427a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800428a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fb05 	bl	80048ac <UART_CheckIdleState>
 80042a2:	4603      	mov	r3, r0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	@ 0x28
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d177      	bne.n	80043b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_UART_Transmit+0x24>
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e070      	b.n	80043b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2221      	movs	r2, #33	@ 0x21
 80042e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042e2:	f7fc fea7 	bl	8001034 <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004300:	d108      	bne.n	8004314 <HAL_UART_Transmit+0x68>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d104      	bne.n	8004314 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e003      	b.n	800431c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800431c:	e02f      	b.n	800437e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2200      	movs	r2, #0
 8004326:	2180      	movs	r1, #128	@ 0x80
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fb67 	bl	80049fc <UART_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e03b      	b.n	80043b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	881a      	ldrh	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004350:	b292      	uxth	r2, r2
 8004352:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	3302      	adds	r3, #2
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e007      	b.n	800436c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3301      	adds	r3, #1
 800436a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1c9      	bne.n	800431e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	2140      	movs	r1, #64	@ 0x40
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fb31 	bl	80049fc <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d004      	beq.n	80043aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e005      	b.n	80043b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e000      	b.n	80043b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
  }
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3720      	adds	r7, #32
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b92      	ldr	r3, [pc, #584]	@ (8004634 <UART_SetConfig+0x274>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	6979      	ldr	r1, [r7, #20]
 80043f4:	430b      	orrs	r3, r1
 80043f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a80      	ldr	r2, [pc, #512]	@ (8004638 <UART_SetConfig+0x278>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d120      	bne.n	800447e <UART_SetConfig+0xbe>
 800443c:	4b7f      	ldr	r3, [pc, #508]	@ (800463c <UART_SetConfig+0x27c>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	2b03      	cmp	r3, #3
 8004446:	d817      	bhi.n	8004478 <UART_SetConfig+0xb8>
 8004448:	a201      	add	r2, pc, #4	@ (adr r2, 8004450 <UART_SetConfig+0x90>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004461 	.word	0x08004461
 8004454:	0800446d 	.word	0x0800446d
 8004458:	08004473 	.word	0x08004473
 800445c:	08004467 	.word	0x08004467
 8004460:	2301      	movs	r3, #1
 8004462:	77fb      	strb	r3, [r7, #31]
 8004464:	e0b5      	b.n	80045d2 <UART_SetConfig+0x212>
 8004466:	2302      	movs	r3, #2
 8004468:	77fb      	strb	r3, [r7, #31]
 800446a:	e0b2      	b.n	80045d2 <UART_SetConfig+0x212>
 800446c:	2304      	movs	r3, #4
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e0af      	b.n	80045d2 <UART_SetConfig+0x212>
 8004472:	2308      	movs	r3, #8
 8004474:	77fb      	strb	r3, [r7, #31]
 8004476:	e0ac      	b.n	80045d2 <UART_SetConfig+0x212>
 8004478:	2310      	movs	r3, #16
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e0a9      	b.n	80045d2 <UART_SetConfig+0x212>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6f      	ldr	r2, [pc, #444]	@ (8004640 <UART_SetConfig+0x280>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d124      	bne.n	80044d2 <UART_SetConfig+0x112>
 8004488:	4b6c      	ldr	r3, [pc, #432]	@ (800463c <UART_SetConfig+0x27c>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004490:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004494:	d011      	beq.n	80044ba <UART_SetConfig+0xfa>
 8004496:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800449a:	d817      	bhi.n	80044cc <UART_SetConfig+0x10c>
 800449c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044a0:	d011      	beq.n	80044c6 <UART_SetConfig+0x106>
 80044a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044a6:	d811      	bhi.n	80044cc <UART_SetConfig+0x10c>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <UART_SetConfig+0xf4>
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b0:	d006      	beq.n	80044c0 <UART_SetConfig+0x100>
 80044b2:	e00b      	b.n	80044cc <UART_SetConfig+0x10c>
 80044b4:	2300      	movs	r3, #0
 80044b6:	77fb      	strb	r3, [r7, #31]
 80044b8:	e08b      	b.n	80045d2 <UART_SetConfig+0x212>
 80044ba:	2302      	movs	r3, #2
 80044bc:	77fb      	strb	r3, [r7, #31]
 80044be:	e088      	b.n	80045d2 <UART_SetConfig+0x212>
 80044c0:	2304      	movs	r3, #4
 80044c2:	77fb      	strb	r3, [r7, #31]
 80044c4:	e085      	b.n	80045d2 <UART_SetConfig+0x212>
 80044c6:	2308      	movs	r3, #8
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	e082      	b.n	80045d2 <UART_SetConfig+0x212>
 80044cc:	2310      	movs	r3, #16
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e07f      	b.n	80045d2 <UART_SetConfig+0x212>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004644 <UART_SetConfig+0x284>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d124      	bne.n	8004526 <UART_SetConfig+0x166>
 80044dc:	4b57      	ldr	r3, [pc, #348]	@ (800463c <UART_SetConfig+0x27c>)
 80044de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80044e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044e8:	d011      	beq.n	800450e <UART_SetConfig+0x14e>
 80044ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044ee:	d817      	bhi.n	8004520 <UART_SetConfig+0x160>
 80044f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044f4:	d011      	beq.n	800451a <UART_SetConfig+0x15a>
 80044f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044fa:	d811      	bhi.n	8004520 <UART_SetConfig+0x160>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <UART_SetConfig+0x148>
 8004500:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004504:	d006      	beq.n	8004514 <UART_SetConfig+0x154>
 8004506:	e00b      	b.n	8004520 <UART_SetConfig+0x160>
 8004508:	2300      	movs	r3, #0
 800450a:	77fb      	strb	r3, [r7, #31]
 800450c:	e061      	b.n	80045d2 <UART_SetConfig+0x212>
 800450e:	2302      	movs	r3, #2
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e05e      	b.n	80045d2 <UART_SetConfig+0x212>
 8004514:	2304      	movs	r3, #4
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e05b      	b.n	80045d2 <UART_SetConfig+0x212>
 800451a:	2308      	movs	r3, #8
 800451c:	77fb      	strb	r3, [r7, #31]
 800451e:	e058      	b.n	80045d2 <UART_SetConfig+0x212>
 8004520:	2310      	movs	r3, #16
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e055      	b.n	80045d2 <UART_SetConfig+0x212>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a47      	ldr	r2, [pc, #284]	@ (8004648 <UART_SetConfig+0x288>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d124      	bne.n	800457a <UART_SetConfig+0x1ba>
 8004530:	4b42      	ldr	r3, [pc, #264]	@ (800463c <UART_SetConfig+0x27c>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004534:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004538:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800453c:	d011      	beq.n	8004562 <UART_SetConfig+0x1a2>
 800453e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004542:	d817      	bhi.n	8004574 <UART_SetConfig+0x1b4>
 8004544:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004548:	d011      	beq.n	800456e <UART_SetConfig+0x1ae>
 800454a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800454e:	d811      	bhi.n	8004574 <UART_SetConfig+0x1b4>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <UART_SetConfig+0x19c>
 8004554:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004558:	d006      	beq.n	8004568 <UART_SetConfig+0x1a8>
 800455a:	e00b      	b.n	8004574 <UART_SetConfig+0x1b4>
 800455c:	2300      	movs	r3, #0
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	e037      	b.n	80045d2 <UART_SetConfig+0x212>
 8004562:	2302      	movs	r3, #2
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e034      	b.n	80045d2 <UART_SetConfig+0x212>
 8004568:	2304      	movs	r3, #4
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e031      	b.n	80045d2 <UART_SetConfig+0x212>
 800456e:	2308      	movs	r3, #8
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e02e      	b.n	80045d2 <UART_SetConfig+0x212>
 8004574:	2310      	movs	r3, #16
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e02b      	b.n	80045d2 <UART_SetConfig+0x212>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a33      	ldr	r2, [pc, #204]	@ (800464c <UART_SetConfig+0x28c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d124      	bne.n	80045ce <UART_SetConfig+0x20e>
 8004584:	4b2d      	ldr	r3, [pc, #180]	@ (800463c <UART_SetConfig+0x27c>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800458c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004590:	d011      	beq.n	80045b6 <UART_SetConfig+0x1f6>
 8004592:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004596:	d817      	bhi.n	80045c8 <UART_SetConfig+0x208>
 8004598:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800459c:	d011      	beq.n	80045c2 <UART_SetConfig+0x202>
 800459e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045a2:	d811      	bhi.n	80045c8 <UART_SetConfig+0x208>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <UART_SetConfig+0x1f0>
 80045a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045ac:	d006      	beq.n	80045bc <UART_SetConfig+0x1fc>
 80045ae:	e00b      	b.n	80045c8 <UART_SetConfig+0x208>
 80045b0:	2300      	movs	r3, #0
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e00d      	b.n	80045d2 <UART_SetConfig+0x212>
 80045b6:	2302      	movs	r3, #2
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e00a      	b.n	80045d2 <UART_SetConfig+0x212>
 80045bc:	2304      	movs	r3, #4
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e007      	b.n	80045d2 <UART_SetConfig+0x212>
 80045c2:	2308      	movs	r3, #8
 80045c4:	77fb      	strb	r3, [r7, #31]
 80045c6:	e004      	b.n	80045d2 <UART_SetConfig+0x212>
 80045c8:	2310      	movs	r3, #16
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e001      	b.n	80045d2 <UART_SetConfig+0x212>
 80045ce:	2310      	movs	r3, #16
 80045d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045da:	d16b      	bne.n	80046b4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80045dc:	7ffb      	ldrb	r3, [r7, #31]
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d838      	bhi.n	8004654 <UART_SetConfig+0x294>
 80045e2:	a201      	add	r2, pc, #4	@ (adr r2, 80045e8 <UART_SetConfig+0x228>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	08004615 	.word	0x08004615
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	08004655 	.word	0x08004655
 80045f8:	08004623 	.word	0x08004623
 80045fc:	08004655 	.word	0x08004655
 8004600:	08004655 	.word	0x08004655
 8004604:	08004655 	.word	0x08004655
 8004608:	0800462b 	.word	0x0800462b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7ff fba0 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 8004610:	61b8      	str	r0, [r7, #24]
        break;
 8004612:	e024      	b.n	800465e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7ff fbbe 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8004618:	61b8      	str	r0, [r7, #24]
        break;
 800461a:	e020      	b.n	800465e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <UART_SetConfig+0x290>)
 800461e:	61bb      	str	r3, [r7, #24]
        break;
 8004620:	e01d      	b.n	800465e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004622:	f7ff fb35 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8004626:	61b8      	str	r0, [r7, #24]
        break;
 8004628:	e019      	b.n	800465e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800462e:	61bb      	str	r3, [r7, #24]
        break;
 8004630:	e015      	b.n	800465e <UART_SetConfig+0x29e>
 8004632:	bf00      	nop
 8004634:	efff69f3 	.word	0xefff69f3
 8004638:	40013800 	.word	0x40013800
 800463c:	40021000 	.word	0x40021000
 8004640:	40004400 	.word	0x40004400
 8004644:	40004800 	.word	0x40004800
 8004648:	40004c00 	.word	0x40004c00
 800464c:	40005000 	.word	0x40005000
 8004650:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	77bb      	strb	r3, [r7, #30]
        break;
 800465c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d073      	beq.n	800474c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	005a      	lsls	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	441a      	add	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b0f      	cmp	r3, #15
 800467e:	d916      	bls.n	80046ae <UART_SetConfig+0x2ee>
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004686:	d212      	bcs.n	80046ae <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f023 030f 	bic.w	r3, r3, #15
 8004690:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	b29b      	uxth	r3, r3
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	b29a      	uxth	r2, r3
 800469e:	89fb      	ldrh	r3, [r7, #14]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	89fa      	ldrh	r2, [r7, #14]
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	e04e      	b.n	800474c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	77bb      	strb	r3, [r7, #30]
 80046b2:	e04b      	b.n	800474c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046b4:	7ffb      	ldrb	r3, [r7, #31]
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d827      	bhi.n	800470a <UART_SetConfig+0x34a>
 80046ba:	a201      	add	r2, pc, #4	@ (adr r2, 80046c0 <UART_SetConfig+0x300>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	080046f5 	.word	0x080046f5
 80046cc:	0800470b 	.word	0x0800470b
 80046d0:	080046fb 	.word	0x080046fb
 80046d4:	0800470b 	.word	0x0800470b
 80046d8:	0800470b 	.word	0x0800470b
 80046dc:	0800470b 	.word	0x0800470b
 80046e0:	08004703 	.word	0x08004703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e4:	f7ff fb34 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 80046e8:	61b8      	str	r0, [r7, #24]
        break;
 80046ea:	e013      	b.n	8004714 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ec:	f7ff fb52 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80046f0:	61b8      	str	r0, [r7, #24]
        break;
 80046f2:	e00f      	b.n	8004714 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <UART_SetConfig+0x3a4>)
 80046f6:	61bb      	str	r3, [r7, #24]
        break;
 80046f8:	e00c      	b.n	8004714 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fa:	f7ff fac9 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 80046fe:	61b8      	str	r0, [r7, #24]
        break;
 8004700:	e008      	b.n	8004714 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004706:	61bb      	str	r3, [r7, #24]
        break;
 8004708:	e004      	b.n	8004714 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	77bb      	strb	r3, [r7, #30]
        break;
 8004712:	bf00      	nop
    }

    if (pclk != 0U)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d018      	beq.n	800474c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	085a      	lsrs	r2, r3, #1
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	441a      	add	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b0f      	cmp	r3, #15
 8004732:	d909      	bls.n	8004748 <UART_SetConfig+0x388>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473a:	d205      	bcs.n	8004748 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	e001      	b.n	800474c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004758:	7fbb      	ldrb	r3, [r7, #30]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	007a1200 	.word	0x007a1200

08004768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01a      	beq.n	800487e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004866:	d10a      	bne.n	800487e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]
  }
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b098      	sub	sp, #96	@ 0x60
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048bc:	f7fc fbba 	bl	8001034 <HAL_GetTick>
 80048c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d12e      	bne.n	800492e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d8:	2200      	movs	r2, #0
 80048da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f88c 	bl	80049fc <UART_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d021      	beq.n	800492e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004908:	647b      	str	r3, [r7, #68]	@ 0x44
 800490a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800490e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e6      	bne.n	80048ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e062      	b.n	80049f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b04      	cmp	r3, #4
 800493a:	d149      	bne.n	80049d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800493c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004944:	2200      	movs	r2, #0
 8004946:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f856 	bl	80049fc <UART_WaitOnFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d03c      	beq.n	80049d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	623b      	str	r3, [r7, #32]
   return(result);
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800496a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004974:	633b      	str	r3, [r7, #48]	@ 0x30
 8004976:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800497a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e6      	bne.n	8004956 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3308      	adds	r3, #8
 800498e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	60fb      	str	r3, [r7, #12]
   return(result);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3308      	adds	r3, #8
 80049a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049a8:	61fa      	str	r2, [r7, #28]
 80049aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	69b9      	ldr	r1, [r7, #24]
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	e841 2300 	strex	r3, r2, [r1]
 80049b4:	617b      	str	r3, [r7, #20]
   return(result);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e5      	bne.n	8004988 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e011      	b.n	80049f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3758      	adds	r7, #88	@ 0x58
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0c:	e04f      	b.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d04b      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fc fb0d 	bl	8001034 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e04e      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d037      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b80      	cmp	r3, #128	@ 0x80
 8004a42:	d034      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b40      	cmp	r3, #64	@ 0x40
 8004a48:	d031      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d110      	bne.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f838 	bl	8004ad6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2208      	movs	r2, #8
 8004a6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e029      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a88:	d111      	bne.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f81e 	bl	8004ad6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e00f      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d0a0      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b095      	sub	sp, #84	@ 0x54
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004afe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e6      	bne.n	8004ade <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f023 0301 	bic.w	r3, r3, #1
 8004b26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d118      	bne.n	8004b7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f023 0310 	bic.w	r3, r3, #16
 8004b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6979      	ldr	r1, [r7, #20]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	613b      	str	r3, [r7, #16]
   return(result);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e6      	bne.n	8004b4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b92:	bf00      	nop
 8004b94:	3754      	adds	r7, #84	@ 0x54
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <sniprintf>:
 8004ba0:	b40c      	push	{r2, r3}
 8004ba2:	b530      	push	{r4, r5, lr}
 8004ba4:	4b18      	ldr	r3, [pc, #96]	@ (8004c08 <sniprintf+0x68>)
 8004ba6:	1e0c      	subs	r4, r1, #0
 8004ba8:	681d      	ldr	r5, [r3, #0]
 8004baa:	b09d      	sub	sp, #116	@ 0x74
 8004bac:	da08      	bge.n	8004bc0 <sniprintf+0x20>
 8004bae:	238b      	movs	r3, #139	@ 0x8b
 8004bb0:	602b      	str	r3, [r5, #0]
 8004bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb6:	b01d      	add	sp, #116	@ 0x74
 8004bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bbc:	b002      	add	sp, #8
 8004bbe:	4770      	bx	lr
 8004bc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004bc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004bce:	bf14      	ite	ne
 8004bd0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004bd4:	4623      	moveq	r3, r4
 8004bd6:	9304      	str	r3, [sp, #16]
 8004bd8:	9307      	str	r3, [sp, #28]
 8004bda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004bde:	9002      	str	r0, [sp, #8]
 8004be0:	9006      	str	r0, [sp, #24]
 8004be2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004be6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004be8:	ab21      	add	r3, sp, #132	@ 0x84
 8004bea:	a902      	add	r1, sp, #8
 8004bec:	4628      	mov	r0, r5
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	f000 f994 	bl	8004f1c <_svfiprintf_r>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	bfbc      	itt	lt
 8004bf8:	238b      	movlt	r3, #139	@ 0x8b
 8004bfa:	602b      	strlt	r3, [r5, #0]
 8004bfc:	2c00      	cmp	r4, #0
 8004bfe:	d0da      	beq.n	8004bb6 <sniprintf+0x16>
 8004c00:	9b02      	ldr	r3, [sp, #8]
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	e7d6      	b.n	8004bb6 <sniprintf+0x16>
 8004c08:	2000000c 	.word	0x2000000c

08004c0c <memset>:
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d100      	bne.n	8004c16 <memset+0xa>
 8004c14:	4770      	bx	lr
 8004c16:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1a:	e7f9      	b.n	8004c10 <memset+0x4>

08004c1c <__errno>:
 8004c1c:	4b01      	ldr	r3, [pc, #4]	@ (8004c24 <__errno+0x8>)
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	2000000c 	.word	0x2000000c

08004c28 <__libc_init_array>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8004c60 <__libc_init_array+0x38>)
 8004c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8004c64 <__libc_init_array+0x3c>)
 8004c2e:	1b64      	subs	r4, r4, r5
 8004c30:	10a4      	asrs	r4, r4, #2
 8004c32:	2600      	movs	r6, #0
 8004c34:	42a6      	cmp	r6, r4
 8004c36:	d109      	bne.n	8004c4c <__libc_init_array+0x24>
 8004c38:	4d0b      	ldr	r5, [pc, #44]	@ (8004c68 <__libc_init_array+0x40>)
 8004c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c6c <__libc_init_array+0x44>)
 8004c3c:	f000 fc64 	bl	8005508 <_init>
 8004c40:	1b64      	subs	r4, r4, r5
 8004c42:	10a4      	asrs	r4, r4, #2
 8004c44:	2600      	movs	r6, #0
 8004c46:	42a6      	cmp	r6, r4
 8004c48:	d105      	bne.n	8004c56 <__libc_init_array+0x2e>
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c50:	4798      	blx	r3
 8004c52:	3601      	adds	r6, #1
 8004c54:	e7ee      	b.n	8004c34 <__libc_init_array+0xc>
 8004c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5a:	4798      	blx	r3
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	e7f2      	b.n	8004c46 <__libc_init_array+0x1e>
 8004c60:	080056f4 	.word	0x080056f4
 8004c64:	080056f4 	.word	0x080056f4
 8004c68:	080056f4 	.word	0x080056f4
 8004c6c:	080056f8 	.word	0x080056f8

08004c70 <__retarget_lock_acquire_recursive>:
 8004c70:	4770      	bx	lr

08004c72 <__retarget_lock_release_recursive>:
 8004c72:	4770      	bx	lr

08004c74 <_free_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4605      	mov	r5, r0
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	d041      	beq.n	8004d00 <_free_r+0x8c>
 8004c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c80:	1f0c      	subs	r4, r1, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bfb8      	it	lt
 8004c86:	18e4      	addlt	r4, r4, r3
 8004c88:	f000 f8e0 	bl	8004e4c <__malloc_lock>
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d04 <_free_r+0x90>)
 8004c8e:	6813      	ldr	r3, [r2, #0]
 8004c90:	b933      	cbnz	r3, 8004ca0 <_free_r+0x2c>
 8004c92:	6063      	str	r3, [r4, #4]
 8004c94:	6014      	str	r4, [r2, #0]
 8004c96:	4628      	mov	r0, r5
 8004c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c9c:	f000 b8dc 	b.w	8004e58 <__malloc_unlock>
 8004ca0:	42a3      	cmp	r3, r4
 8004ca2:	d908      	bls.n	8004cb6 <_free_r+0x42>
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	1821      	adds	r1, r4, r0
 8004ca8:	428b      	cmp	r3, r1
 8004caa:	bf01      	itttt	eq
 8004cac:	6819      	ldreq	r1, [r3, #0]
 8004cae:	685b      	ldreq	r3, [r3, #4]
 8004cb0:	1809      	addeq	r1, r1, r0
 8004cb2:	6021      	streq	r1, [r4, #0]
 8004cb4:	e7ed      	b.n	8004c92 <_free_r+0x1e>
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b10b      	cbz	r3, 8004cc0 <_free_r+0x4c>
 8004cbc:	42a3      	cmp	r3, r4
 8004cbe:	d9fa      	bls.n	8004cb6 <_free_r+0x42>
 8004cc0:	6811      	ldr	r1, [r2, #0]
 8004cc2:	1850      	adds	r0, r2, r1
 8004cc4:	42a0      	cmp	r0, r4
 8004cc6:	d10b      	bne.n	8004ce0 <_free_r+0x6c>
 8004cc8:	6820      	ldr	r0, [r4, #0]
 8004cca:	4401      	add	r1, r0
 8004ccc:	1850      	adds	r0, r2, r1
 8004cce:	4283      	cmp	r3, r0
 8004cd0:	6011      	str	r1, [r2, #0]
 8004cd2:	d1e0      	bne.n	8004c96 <_free_r+0x22>
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	6053      	str	r3, [r2, #4]
 8004cda:	4408      	add	r0, r1
 8004cdc:	6010      	str	r0, [r2, #0]
 8004cde:	e7da      	b.n	8004c96 <_free_r+0x22>
 8004ce0:	d902      	bls.n	8004ce8 <_free_r+0x74>
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	602b      	str	r3, [r5, #0]
 8004ce6:	e7d6      	b.n	8004c96 <_free_r+0x22>
 8004ce8:	6820      	ldr	r0, [r4, #0]
 8004cea:	1821      	adds	r1, r4, r0
 8004cec:	428b      	cmp	r3, r1
 8004cee:	bf04      	itt	eq
 8004cf0:	6819      	ldreq	r1, [r3, #0]
 8004cf2:	685b      	ldreq	r3, [r3, #4]
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	bf04      	itt	eq
 8004cf8:	1809      	addeq	r1, r1, r0
 8004cfa:	6021      	streq	r1, [r4, #0]
 8004cfc:	6054      	str	r4, [r2, #4]
 8004cfe:	e7ca      	b.n	8004c96 <_free_r+0x22>
 8004d00:	bd38      	pop	{r3, r4, r5, pc}
 8004d02:	bf00      	nop
 8004d04:	20000350 	.word	0x20000350

08004d08 <sbrk_aligned>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	4e0f      	ldr	r6, [pc, #60]	@ (8004d48 <sbrk_aligned+0x40>)
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	6831      	ldr	r1, [r6, #0]
 8004d10:	4605      	mov	r5, r0
 8004d12:	b911      	cbnz	r1, 8004d1a <sbrk_aligned+0x12>
 8004d14:	f000 fba4 	bl	8005460 <_sbrk_r>
 8004d18:	6030      	str	r0, [r6, #0]
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f000 fb9f 	bl	8005460 <_sbrk_r>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	d103      	bne.n	8004d2e <sbrk_aligned+0x26>
 8004d26:	f04f 34ff 	mov.w	r4, #4294967295
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
 8004d2e:	1cc4      	adds	r4, r0, #3
 8004d30:	f024 0403 	bic.w	r4, r4, #3
 8004d34:	42a0      	cmp	r0, r4
 8004d36:	d0f8      	beq.n	8004d2a <sbrk_aligned+0x22>
 8004d38:	1a21      	subs	r1, r4, r0
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f000 fb90 	bl	8005460 <_sbrk_r>
 8004d40:	3001      	adds	r0, #1
 8004d42:	d1f2      	bne.n	8004d2a <sbrk_aligned+0x22>
 8004d44:	e7ef      	b.n	8004d26 <sbrk_aligned+0x1e>
 8004d46:	bf00      	nop
 8004d48:	2000034c 	.word	0x2000034c

08004d4c <_malloc_r>:
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	1ccd      	adds	r5, r1, #3
 8004d52:	f025 0503 	bic.w	r5, r5, #3
 8004d56:	3508      	adds	r5, #8
 8004d58:	2d0c      	cmp	r5, #12
 8004d5a:	bf38      	it	cc
 8004d5c:	250c      	movcc	r5, #12
 8004d5e:	2d00      	cmp	r5, #0
 8004d60:	4606      	mov	r6, r0
 8004d62:	db01      	blt.n	8004d68 <_malloc_r+0x1c>
 8004d64:	42a9      	cmp	r1, r5
 8004d66:	d904      	bls.n	8004d72 <_malloc_r+0x26>
 8004d68:	230c      	movs	r3, #12
 8004d6a:	6033      	str	r3, [r6, #0]
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e48 <_malloc_r+0xfc>
 8004d76:	f000 f869 	bl	8004e4c <__malloc_lock>
 8004d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d7e:	461c      	mov	r4, r3
 8004d80:	bb44      	cbnz	r4, 8004dd4 <_malloc_r+0x88>
 8004d82:	4629      	mov	r1, r5
 8004d84:	4630      	mov	r0, r6
 8004d86:	f7ff ffbf 	bl	8004d08 <sbrk_aligned>
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	d158      	bne.n	8004e42 <_malloc_r+0xf6>
 8004d90:	f8d8 4000 	ldr.w	r4, [r8]
 8004d94:	4627      	mov	r7, r4
 8004d96:	2f00      	cmp	r7, #0
 8004d98:	d143      	bne.n	8004e22 <_malloc_r+0xd6>
 8004d9a:	2c00      	cmp	r4, #0
 8004d9c:	d04b      	beq.n	8004e36 <_malloc_r+0xea>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	4639      	mov	r1, r7
 8004da2:	4630      	mov	r0, r6
 8004da4:	eb04 0903 	add.w	r9, r4, r3
 8004da8:	f000 fb5a 	bl	8005460 <_sbrk_r>
 8004dac:	4581      	cmp	r9, r0
 8004dae:	d142      	bne.n	8004e36 <_malloc_r+0xea>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	1a6d      	subs	r5, r5, r1
 8004db4:	4629      	mov	r1, r5
 8004db6:	4630      	mov	r0, r6
 8004db8:	f7ff ffa6 	bl	8004d08 <sbrk_aligned>
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d03a      	beq.n	8004e36 <_malloc_r+0xea>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	442b      	add	r3, r5
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	bb62      	cbnz	r2, 8004e28 <_malloc_r+0xdc>
 8004dce:	f8c8 7000 	str.w	r7, [r8]
 8004dd2:	e00f      	b.n	8004df4 <_malloc_r+0xa8>
 8004dd4:	6822      	ldr	r2, [r4, #0]
 8004dd6:	1b52      	subs	r2, r2, r5
 8004dd8:	d420      	bmi.n	8004e1c <_malloc_r+0xd0>
 8004dda:	2a0b      	cmp	r2, #11
 8004ddc:	d917      	bls.n	8004e0e <_malloc_r+0xc2>
 8004dde:	1961      	adds	r1, r4, r5
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	6025      	str	r5, [r4, #0]
 8004de4:	bf18      	it	ne
 8004de6:	6059      	strne	r1, [r3, #4]
 8004de8:	6863      	ldr	r3, [r4, #4]
 8004dea:	bf08      	it	eq
 8004dec:	f8c8 1000 	streq.w	r1, [r8]
 8004df0:	5162      	str	r2, [r4, r5]
 8004df2:	604b      	str	r3, [r1, #4]
 8004df4:	4630      	mov	r0, r6
 8004df6:	f000 f82f 	bl	8004e58 <__malloc_unlock>
 8004dfa:	f104 000b 	add.w	r0, r4, #11
 8004dfe:	1d23      	adds	r3, r4, #4
 8004e00:	f020 0007 	bic.w	r0, r0, #7
 8004e04:	1ac2      	subs	r2, r0, r3
 8004e06:	bf1c      	itt	ne
 8004e08:	1a1b      	subne	r3, r3, r0
 8004e0a:	50a3      	strne	r3, [r4, r2]
 8004e0c:	e7af      	b.n	8004d6e <_malloc_r+0x22>
 8004e0e:	6862      	ldr	r2, [r4, #4]
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	bf0c      	ite	eq
 8004e14:	f8c8 2000 	streq.w	r2, [r8]
 8004e18:	605a      	strne	r2, [r3, #4]
 8004e1a:	e7eb      	b.n	8004df4 <_malloc_r+0xa8>
 8004e1c:	4623      	mov	r3, r4
 8004e1e:	6864      	ldr	r4, [r4, #4]
 8004e20:	e7ae      	b.n	8004d80 <_malloc_r+0x34>
 8004e22:	463c      	mov	r4, r7
 8004e24:	687f      	ldr	r7, [r7, #4]
 8004e26:	e7b6      	b.n	8004d96 <_malloc_r+0x4a>
 8004e28:	461a      	mov	r2, r3
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	d1fb      	bne.n	8004e28 <_malloc_r+0xdc>
 8004e30:	2300      	movs	r3, #0
 8004e32:	6053      	str	r3, [r2, #4]
 8004e34:	e7de      	b.n	8004df4 <_malloc_r+0xa8>
 8004e36:	230c      	movs	r3, #12
 8004e38:	6033      	str	r3, [r6, #0]
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f000 f80c 	bl	8004e58 <__malloc_unlock>
 8004e40:	e794      	b.n	8004d6c <_malloc_r+0x20>
 8004e42:	6005      	str	r5, [r0, #0]
 8004e44:	e7d6      	b.n	8004df4 <_malloc_r+0xa8>
 8004e46:	bf00      	nop
 8004e48:	20000350 	.word	0x20000350

08004e4c <__malloc_lock>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	@ (8004e54 <__malloc_lock+0x8>)
 8004e4e:	f7ff bf0f 	b.w	8004c70 <__retarget_lock_acquire_recursive>
 8004e52:	bf00      	nop
 8004e54:	20000348 	.word	0x20000348

08004e58 <__malloc_unlock>:
 8004e58:	4801      	ldr	r0, [pc, #4]	@ (8004e60 <__malloc_unlock+0x8>)
 8004e5a:	f7ff bf0a 	b.w	8004c72 <__retarget_lock_release_recursive>
 8004e5e:	bf00      	nop
 8004e60:	20000348 	.word	0x20000348

08004e64 <__ssputs_r>:
 8004e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	688e      	ldr	r6, [r1, #8]
 8004e6a:	461f      	mov	r7, r3
 8004e6c:	42be      	cmp	r6, r7
 8004e6e:	680b      	ldr	r3, [r1, #0]
 8004e70:	4682      	mov	sl, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	4690      	mov	r8, r2
 8004e76:	d82d      	bhi.n	8004ed4 <__ssputs_r+0x70>
 8004e78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e80:	d026      	beq.n	8004ed0 <__ssputs_r+0x6c>
 8004e82:	6965      	ldr	r5, [r4, #20]
 8004e84:	6909      	ldr	r1, [r1, #16]
 8004e86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e8a:	eba3 0901 	sub.w	r9, r3, r1
 8004e8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e92:	1c7b      	adds	r3, r7, #1
 8004e94:	444b      	add	r3, r9
 8004e96:	106d      	asrs	r5, r5, #1
 8004e98:	429d      	cmp	r5, r3
 8004e9a:	bf38      	it	cc
 8004e9c:	461d      	movcc	r5, r3
 8004e9e:	0553      	lsls	r3, r2, #21
 8004ea0:	d527      	bpl.n	8004ef2 <__ssputs_r+0x8e>
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7ff ff52 	bl	8004d4c <_malloc_r>
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	b360      	cbz	r0, 8004f06 <__ssputs_r+0xa2>
 8004eac:	6921      	ldr	r1, [r4, #16]
 8004eae:	464a      	mov	r2, r9
 8004eb0:	f000 fae6 	bl	8005480 <memcpy>
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ebe:	81a3      	strh	r3, [r4, #12]
 8004ec0:	6126      	str	r6, [r4, #16]
 8004ec2:	6165      	str	r5, [r4, #20]
 8004ec4:	444e      	add	r6, r9
 8004ec6:	eba5 0509 	sub.w	r5, r5, r9
 8004eca:	6026      	str	r6, [r4, #0]
 8004ecc:	60a5      	str	r5, [r4, #8]
 8004ece:	463e      	mov	r6, r7
 8004ed0:	42be      	cmp	r6, r7
 8004ed2:	d900      	bls.n	8004ed6 <__ssputs_r+0x72>
 8004ed4:	463e      	mov	r6, r7
 8004ed6:	6820      	ldr	r0, [r4, #0]
 8004ed8:	4632      	mov	r2, r6
 8004eda:	4641      	mov	r1, r8
 8004edc:	f000 faa6 	bl	800542c <memmove>
 8004ee0:	68a3      	ldr	r3, [r4, #8]
 8004ee2:	1b9b      	subs	r3, r3, r6
 8004ee4:	60a3      	str	r3, [r4, #8]
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	4433      	add	r3, r6
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	2000      	movs	r0, #0
 8004eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef2:	462a      	mov	r2, r5
 8004ef4:	f000 fad2 	bl	800549c <_realloc_r>
 8004ef8:	4606      	mov	r6, r0
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d1e0      	bne.n	8004ec0 <__ssputs_r+0x5c>
 8004efe:	6921      	ldr	r1, [r4, #16]
 8004f00:	4650      	mov	r0, sl
 8004f02:	f7ff feb7 	bl	8004c74 <_free_r>
 8004f06:	230c      	movs	r3, #12
 8004f08:	f8ca 3000 	str.w	r3, [sl]
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	e7e9      	b.n	8004eee <__ssputs_r+0x8a>
	...

08004f1c <_svfiprintf_r>:
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	4698      	mov	r8, r3
 8004f22:	898b      	ldrh	r3, [r1, #12]
 8004f24:	061b      	lsls	r3, r3, #24
 8004f26:	b09d      	sub	sp, #116	@ 0x74
 8004f28:	4607      	mov	r7, r0
 8004f2a:	460d      	mov	r5, r1
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	d510      	bpl.n	8004f52 <_svfiprintf_r+0x36>
 8004f30:	690b      	ldr	r3, [r1, #16]
 8004f32:	b973      	cbnz	r3, 8004f52 <_svfiprintf_r+0x36>
 8004f34:	2140      	movs	r1, #64	@ 0x40
 8004f36:	f7ff ff09 	bl	8004d4c <_malloc_r>
 8004f3a:	6028      	str	r0, [r5, #0]
 8004f3c:	6128      	str	r0, [r5, #16]
 8004f3e:	b930      	cbnz	r0, 8004f4e <_svfiprintf_r+0x32>
 8004f40:	230c      	movs	r3, #12
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	b01d      	add	sp, #116	@ 0x74
 8004f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4e:	2340      	movs	r3, #64	@ 0x40
 8004f50:	616b      	str	r3, [r5, #20]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f56:	2320      	movs	r3, #32
 8004f58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f60:	2330      	movs	r3, #48	@ 0x30
 8004f62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005100 <_svfiprintf_r+0x1e4>
 8004f66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f6a:	f04f 0901 	mov.w	r9, #1
 8004f6e:	4623      	mov	r3, r4
 8004f70:	469a      	mov	sl, r3
 8004f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f76:	b10a      	cbz	r2, 8004f7c <_svfiprintf_r+0x60>
 8004f78:	2a25      	cmp	r2, #37	@ 0x25
 8004f7a:	d1f9      	bne.n	8004f70 <_svfiprintf_r+0x54>
 8004f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f80:	d00b      	beq.n	8004f9a <_svfiprintf_r+0x7e>
 8004f82:	465b      	mov	r3, fp
 8004f84:	4622      	mov	r2, r4
 8004f86:	4629      	mov	r1, r5
 8004f88:	4638      	mov	r0, r7
 8004f8a:	f7ff ff6b 	bl	8004e64 <__ssputs_r>
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f000 80a7 	beq.w	80050e2 <_svfiprintf_r+0x1c6>
 8004f94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f96:	445a      	add	r2, fp
 8004f98:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 809f 	beq.w	80050e2 <_svfiprintf_r+0x1c6>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fae:	f10a 0a01 	add.w	sl, sl, #1
 8004fb2:	9304      	str	r3, [sp, #16]
 8004fb4:	9307      	str	r3, [sp, #28]
 8004fb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fba:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fbc:	4654      	mov	r4, sl
 8004fbe:	2205      	movs	r2, #5
 8004fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc4:	484e      	ldr	r0, [pc, #312]	@ (8005100 <_svfiprintf_r+0x1e4>)
 8004fc6:	f7fb f913 	bl	80001f0 <memchr>
 8004fca:	9a04      	ldr	r2, [sp, #16]
 8004fcc:	b9d8      	cbnz	r0, 8005006 <_svfiprintf_r+0xea>
 8004fce:	06d0      	lsls	r0, r2, #27
 8004fd0:	bf44      	itt	mi
 8004fd2:	2320      	movmi	r3, #32
 8004fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fd8:	0711      	lsls	r1, r2, #28
 8004fda:	bf44      	itt	mi
 8004fdc:	232b      	movmi	r3, #43	@ 0x2b
 8004fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe8:	d015      	beq.n	8005016 <_svfiprintf_r+0xfa>
 8004fea:	9a07      	ldr	r2, [sp, #28]
 8004fec:	4654      	mov	r4, sl
 8004fee:	2000      	movs	r0, #0
 8004ff0:	f04f 0c0a 	mov.w	ip, #10
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ffa:	3b30      	subs	r3, #48	@ 0x30
 8004ffc:	2b09      	cmp	r3, #9
 8004ffe:	d94b      	bls.n	8005098 <_svfiprintf_r+0x17c>
 8005000:	b1b0      	cbz	r0, 8005030 <_svfiprintf_r+0x114>
 8005002:	9207      	str	r2, [sp, #28]
 8005004:	e014      	b.n	8005030 <_svfiprintf_r+0x114>
 8005006:	eba0 0308 	sub.w	r3, r0, r8
 800500a:	fa09 f303 	lsl.w	r3, r9, r3
 800500e:	4313      	orrs	r3, r2
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	46a2      	mov	sl, r4
 8005014:	e7d2      	b.n	8004fbc <_svfiprintf_r+0xa0>
 8005016:	9b03      	ldr	r3, [sp, #12]
 8005018:	1d19      	adds	r1, r3, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	9103      	str	r1, [sp, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	bfbb      	ittet	lt
 8005022:	425b      	neglt	r3, r3
 8005024:	f042 0202 	orrlt.w	r2, r2, #2
 8005028:	9307      	strge	r3, [sp, #28]
 800502a:	9307      	strlt	r3, [sp, #28]
 800502c:	bfb8      	it	lt
 800502e:	9204      	strlt	r2, [sp, #16]
 8005030:	7823      	ldrb	r3, [r4, #0]
 8005032:	2b2e      	cmp	r3, #46	@ 0x2e
 8005034:	d10a      	bne.n	800504c <_svfiprintf_r+0x130>
 8005036:	7863      	ldrb	r3, [r4, #1]
 8005038:	2b2a      	cmp	r3, #42	@ 0x2a
 800503a:	d132      	bne.n	80050a2 <_svfiprintf_r+0x186>
 800503c:	9b03      	ldr	r3, [sp, #12]
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	9203      	str	r2, [sp, #12]
 8005044:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005048:	3402      	adds	r4, #2
 800504a:	9305      	str	r3, [sp, #20]
 800504c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005110 <_svfiprintf_r+0x1f4>
 8005050:	7821      	ldrb	r1, [r4, #0]
 8005052:	2203      	movs	r2, #3
 8005054:	4650      	mov	r0, sl
 8005056:	f7fb f8cb 	bl	80001f0 <memchr>
 800505a:	b138      	cbz	r0, 800506c <_svfiprintf_r+0x150>
 800505c:	9b04      	ldr	r3, [sp, #16]
 800505e:	eba0 000a 	sub.w	r0, r0, sl
 8005062:	2240      	movs	r2, #64	@ 0x40
 8005064:	4082      	lsls	r2, r0
 8005066:	4313      	orrs	r3, r2
 8005068:	3401      	adds	r4, #1
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005070:	4824      	ldr	r0, [pc, #144]	@ (8005104 <_svfiprintf_r+0x1e8>)
 8005072:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005076:	2206      	movs	r2, #6
 8005078:	f7fb f8ba 	bl	80001f0 <memchr>
 800507c:	2800      	cmp	r0, #0
 800507e:	d036      	beq.n	80050ee <_svfiprintf_r+0x1d2>
 8005080:	4b21      	ldr	r3, [pc, #132]	@ (8005108 <_svfiprintf_r+0x1ec>)
 8005082:	bb1b      	cbnz	r3, 80050cc <_svfiprintf_r+0x1b0>
 8005084:	9b03      	ldr	r3, [sp, #12]
 8005086:	3307      	adds	r3, #7
 8005088:	f023 0307 	bic.w	r3, r3, #7
 800508c:	3308      	adds	r3, #8
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005092:	4433      	add	r3, r6
 8005094:	9309      	str	r3, [sp, #36]	@ 0x24
 8005096:	e76a      	b.n	8004f6e <_svfiprintf_r+0x52>
 8005098:	fb0c 3202 	mla	r2, ip, r2, r3
 800509c:	460c      	mov	r4, r1
 800509e:	2001      	movs	r0, #1
 80050a0:	e7a8      	b.n	8004ff4 <_svfiprintf_r+0xd8>
 80050a2:	2300      	movs	r3, #0
 80050a4:	3401      	adds	r4, #1
 80050a6:	9305      	str	r3, [sp, #20]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f04f 0c0a 	mov.w	ip, #10
 80050ae:	4620      	mov	r0, r4
 80050b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b4:	3a30      	subs	r2, #48	@ 0x30
 80050b6:	2a09      	cmp	r2, #9
 80050b8:	d903      	bls.n	80050c2 <_svfiprintf_r+0x1a6>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0c6      	beq.n	800504c <_svfiprintf_r+0x130>
 80050be:	9105      	str	r1, [sp, #20]
 80050c0:	e7c4      	b.n	800504c <_svfiprintf_r+0x130>
 80050c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c6:	4604      	mov	r4, r0
 80050c8:	2301      	movs	r3, #1
 80050ca:	e7f0      	b.n	80050ae <_svfiprintf_r+0x192>
 80050cc:	ab03      	add	r3, sp, #12
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	462a      	mov	r2, r5
 80050d2:	4b0e      	ldr	r3, [pc, #56]	@ (800510c <_svfiprintf_r+0x1f0>)
 80050d4:	a904      	add	r1, sp, #16
 80050d6:	4638      	mov	r0, r7
 80050d8:	f3af 8000 	nop.w
 80050dc:	1c42      	adds	r2, r0, #1
 80050de:	4606      	mov	r6, r0
 80050e0:	d1d6      	bne.n	8005090 <_svfiprintf_r+0x174>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	065b      	lsls	r3, r3, #25
 80050e6:	f53f af2d 	bmi.w	8004f44 <_svfiprintf_r+0x28>
 80050ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050ec:	e72c      	b.n	8004f48 <_svfiprintf_r+0x2c>
 80050ee:	ab03      	add	r3, sp, #12
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	462a      	mov	r2, r5
 80050f4:	4b05      	ldr	r3, [pc, #20]	@ (800510c <_svfiprintf_r+0x1f0>)
 80050f6:	a904      	add	r1, sp, #16
 80050f8:	4638      	mov	r0, r7
 80050fa:	f000 f879 	bl	80051f0 <_printf_i>
 80050fe:	e7ed      	b.n	80050dc <_svfiprintf_r+0x1c0>
 8005100:	080056b8 	.word	0x080056b8
 8005104:	080056c2 	.word	0x080056c2
 8005108:	00000000 	.word	0x00000000
 800510c:	08004e65 	.word	0x08004e65
 8005110:	080056be 	.word	0x080056be

08005114 <_printf_common>:
 8005114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	4616      	mov	r6, r2
 800511a:	4698      	mov	r8, r3
 800511c:	688a      	ldr	r2, [r1, #8]
 800511e:	690b      	ldr	r3, [r1, #16]
 8005120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005124:	4293      	cmp	r3, r2
 8005126:	bfb8      	it	lt
 8005128:	4613      	movlt	r3, r2
 800512a:	6033      	str	r3, [r6, #0]
 800512c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005130:	4607      	mov	r7, r0
 8005132:	460c      	mov	r4, r1
 8005134:	b10a      	cbz	r2, 800513a <_printf_common+0x26>
 8005136:	3301      	adds	r3, #1
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	0699      	lsls	r1, r3, #26
 800513e:	bf42      	ittt	mi
 8005140:	6833      	ldrmi	r3, [r6, #0]
 8005142:	3302      	addmi	r3, #2
 8005144:	6033      	strmi	r3, [r6, #0]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	f015 0506 	ands.w	r5, r5, #6
 800514c:	d106      	bne.n	800515c <_printf_common+0x48>
 800514e:	f104 0a19 	add.w	sl, r4, #25
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	6832      	ldr	r2, [r6, #0]
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	42ab      	cmp	r3, r5
 800515a:	dc26      	bgt.n	80051aa <_printf_common+0x96>
 800515c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005160:	6822      	ldr	r2, [r4, #0]
 8005162:	3b00      	subs	r3, #0
 8005164:	bf18      	it	ne
 8005166:	2301      	movne	r3, #1
 8005168:	0692      	lsls	r2, r2, #26
 800516a:	d42b      	bmi.n	80051c4 <_printf_common+0xb0>
 800516c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005170:	4641      	mov	r1, r8
 8005172:	4638      	mov	r0, r7
 8005174:	47c8      	blx	r9
 8005176:	3001      	adds	r0, #1
 8005178:	d01e      	beq.n	80051b8 <_printf_common+0xa4>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	f003 0306 	and.w	r3, r3, #6
 8005182:	2b04      	cmp	r3, #4
 8005184:	bf02      	ittt	eq
 8005186:	68e5      	ldreq	r5, [r4, #12]
 8005188:	6833      	ldreq	r3, [r6, #0]
 800518a:	1aed      	subeq	r5, r5, r3
 800518c:	68a3      	ldr	r3, [r4, #8]
 800518e:	bf0c      	ite	eq
 8005190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005194:	2500      	movne	r5, #0
 8005196:	4293      	cmp	r3, r2
 8005198:	bfc4      	itt	gt
 800519a:	1a9b      	subgt	r3, r3, r2
 800519c:	18ed      	addgt	r5, r5, r3
 800519e:	2600      	movs	r6, #0
 80051a0:	341a      	adds	r4, #26
 80051a2:	42b5      	cmp	r5, r6
 80051a4:	d11a      	bne.n	80051dc <_printf_common+0xc8>
 80051a6:	2000      	movs	r0, #0
 80051a8:	e008      	b.n	80051bc <_printf_common+0xa8>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4652      	mov	r2, sl
 80051ae:	4641      	mov	r1, r8
 80051b0:	4638      	mov	r0, r7
 80051b2:	47c8      	blx	r9
 80051b4:	3001      	adds	r0, #1
 80051b6:	d103      	bne.n	80051c0 <_printf_common+0xac>
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c0:	3501      	adds	r5, #1
 80051c2:	e7c6      	b.n	8005152 <_printf_common+0x3e>
 80051c4:	18e1      	adds	r1, r4, r3
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	2030      	movs	r0, #48	@ 0x30
 80051ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051ce:	4422      	add	r2, r4
 80051d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051d8:	3302      	adds	r3, #2
 80051da:	e7c7      	b.n	800516c <_printf_common+0x58>
 80051dc:	2301      	movs	r3, #1
 80051de:	4622      	mov	r2, r4
 80051e0:	4641      	mov	r1, r8
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c8      	blx	r9
 80051e6:	3001      	adds	r0, #1
 80051e8:	d0e6      	beq.n	80051b8 <_printf_common+0xa4>
 80051ea:	3601      	adds	r6, #1
 80051ec:	e7d9      	b.n	80051a2 <_printf_common+0x8e>
	...

080051f0 <_printf_i>:
 80051f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	7e0f      	ldrb	r7, [r1, #24]
 80051f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051f8:	2f78      	cmp	r7, #120	@ 0x78
 80051fa:	4691      	mov	r9, r2
 80051fc:	4680      	mov	r8, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	469a      	mov	sl, r3
 8005202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005206:	d807      	bhi.n	8005218 <_printf_i+0x28>
 8005208:	2f62      	cmp	r7, #98	@ 0x62
 800520a:	d80a      	bhi.n	8005222 <_printf_i+0x32>
 800520c:	2f00      	cmp	r7, #0
 800520e:	f000 80d1 	beq.w	80053b4 <_printf_i+0x1c4>
 8005212:	2f58      	cmp	r7, #88	@ 0x58
 8005214:	f000 80b8 	beq.w	8005388 <_printf_i+0x198>
 8005218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800521c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005220:	e03a      	b.n	8005298 <_printf_i+0xa8>
 8005222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005226:	2b15      	cmp	r3, #21
 8005228:	d8f6      	bhi.n	8005218 <_printf_i+0x28>
 800522a:	a101      	add	r1, pc, #4	@ (adr r1, 8005230 <_printf_i+0x40>)
 800522c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005230:	08005289 	.word	0x08005289
 8005234:	0800529d 	.word	0x0800529d
 8005238:	08005219 	.word	0x08005219
 800523c:	08005219 	.word	0x08005219
 8005240:	08005219 	.word	0x08005219
 8005244:	08005219 	.word	0x08005219
 8005248:	0800529d 	.word	0x0800529d
 800524c:	08005219 	.word	0x08005219
 8005250:	08005219 	.word	0x08005219
 8005254:	08005219 	.word	0x08005219
 8005258:	08005219 	.word	0x08005219
 800525c:	0800539b 	.word	0x0800539b
 8005260:	080052c7 	.word	0x080052c7
 8005264:	08005355 	.word	0x08005355
 8005268:	08005219 	.word	0x08005219
 800526c:	08005219 	.word	0x08005219
 8005270:	080053bd 	.word	0x080053bd
 8005274:	08005219 	.word	0x08005219
 8005278:	080052c7 	.word	0x080052c7
 800527c:	08005219 	.word	0x08005219
 8005280:	08005219 	.word	0x08005219
 8005284:	0800535d 	.word	0x0800535d
 8005288:	6833      	ldr	r3, [r6, #0]
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6032      	str	r2, [r6, #0]
 8005290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005298:	2301      	movs	r3, #1
 800529a:	e09c      	b.n	80053d6 <_printf_i+0x1e6>
 800529c:	6833      	ldr	r3, [r6, #0]
 800529e:	6820      	ldr	r0, [r4, #0]
 80052a0:	1d19      	adds	r1, r3, #4
 80052a2:	6031      	str	r1, [r6, #0]
 80052a4:	0606      	lsls	r6, r0, #24
 80052a6:	d501      	bpl.n	80052ac <_printf_i+0xbc>
 80052a8:	681d      	ldr	r5, [r3, #0]
 80052aa:	e003      	b.n	80052b4 <_printf_i+0xc4>
 80052ac:	0645      	lsls	r5, r0, #25
 80052ae:	d5fb      	bpl.n	80052a8 <_printf_i+0xb8>
 80052b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052b4:	2d00      	cmp	r5, #0
 80052b6:	da03      	bge.n	80052c0 <_printf_i+0xd0>
 80052b8:	232d      	movs	r3, #45	@ 0x2d
 80052ba:	426d      	negs	r5, r5
 80052bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052c0:	4858      	ldr	r0, [pc, #352]	@ (8005424 <_printf_i+0x234>)
 80052c2:	230a      	movs	r3, #10
 80052c4:	e011      	b.n	80052ea <_printf_i+0xfa>
 80052c6:	6821      	ldr	r1, [r4, #0]
 80052c8:	6833      	ldr	r3, [r6, #0]
 80052ca:	0608      	lsls	r0, r1, #24
 80052cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80052d0:	d402      	bmi.n	80052d8 <_printf_i+0xe8>
 80052d2:	0649      	lsls	r1, r1, #25
 80052d4:	bf48      	it	mi
 80052d6:	b2ad      	uxthmi	r5, r5
 80052d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80052da:	4852      	ldr	r0, [pc, #328]	@ (8005424 <_printf_i+0x234>)
 80052dc:	6033      	str	r3, [r6, #0]
 80052de:	bf14      	ite	ne
 80052e0:	230a      	movne	r3, #10
 80052e2:	2308      	moveq	r3, #8
 80052e4:	2100      	movs	r1, #0
 80052e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052ea:	6866      	ldr	r6, [r4, #4]
 80052ec:	60a6      	str	r6, [r4, #8]
 80052ee:	2e00      	cmp	r6, #0
 80052f0:	db05      	blt.n	80052fe <_printf_i+0x10e>
 80052f2:	6821      	ldr	r1, [r4, #0]
 80052f4:	432e      	orrs	r6, r5
 80052f6:	f021 0104 	bic.w	r1, r1, #4
 80052fa:	6021      	str	r1, [r4, #0]
 80052fc:	d04b      	beq.n	8005396 <_printf_i+0x1a6>
 80052fe:	4616      	mov	r6, r2
 8005300:	fbb5 f1f3 	udiv	r1, r5, r3
 8005304:	fb03 5711 	mls	r7, r3, r1, r5
 8005308:	5dc7      	ldrb	r7, [r0, r7]
 800530a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800530e:	462f      	mov	r7, r5
 8005310:	42bb      	cmp	r3, r7
 8005312:	460d      	mov	r5, r1
 8005314:	d9f4      	bls.n	8005300 <_printf_i+0x110>
 8005316:	2b08      	cmp	r3, #8
 8005318:	d10b      	bne.n	8005332 <_printf_i+0x142>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	07df      	lsls	r7, r3, #31
 800531e:	d508      	bpl.n	8005332 <_printf_i+0x142>
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	6861      	ldr	r1, [r4, #4]
 8005324:	4299      	cmp	r1, r3
 8005326:	bfde      	ittt	le
 8005328:	2330      	movle	r3, #48	@ 0x30
 800532a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800532e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005332:	1b92      	subs	r2, r2, r6
 8005334:	6122      	str	r2, [r4, #16]
 8005336:	f8cd a000 	str.w	sl, [sp]
 800533a:	464b      	mov	r3, r9
 800533c:	aa03      	add	r2, sp, #12
 800533e:	4621      	mov	r1, r4
 8005340:	4640      	mov	r0, r8
 8005342:	f7ff fee7 	bl	8005114 <_printf_common>
 8005346:	3001      	adds	r0, #1
 8005348:	d14a      	bne.n	80053e0 <_printf_i+0x1f0>
 800534a:	f04f 30ff 	mov.w	r0, #4294967295
 800534e:	b004      	add	sp, #16
 8005350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	f043 0320 	orr.w	r3, r3, #32
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	4832      	ldr	r0, [pc, #200]	@ (8005428 <_printf_i+0x238>)
 800535e:	2778      	movs	r7, #120	@ 0x78
 8005360:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	6831      	ldr	r1, [r6, #0]
 8005368:	061f      	lsls	r7, r3, #24
 800536a:	f851 5b04 	ldr.w	r5, [r1], #4
 800536e:	d402      	bmi.n	8005376 <_printf_i+0x186>
 8005370:	065f      	lsls	r7, r3, #25
 8005372:	bf48      	it	mi
 8005374:	b2ad      	uxthmi	r5, r5
 8005376:	6031      	str	r1, [r6, #0]
 8005378:	07d9      	lsls	r1, r3, #31
 800537a:	bf44      	itt	mi
 800537c:	f043 0320 	orrmi.w	r3, r3, #32
 8005380:	6023      	strmi	r3, [r4, #0]
 8005382:	b11d      	cbz	r5, 800538c <_printf_i+0x19c>
 8005384:	2310      	movs	r3, #16
 8005386:	e7ad      	b.n	80052e4 <_printf_i+0xf4>
 8005388:	4826      	ldr	r0, [pc, #152]	@ (8005424 <_printf_i+0x234>)
 800538a:	e7e9      	b.n	8005360 <_printf_i+0x170>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	f023 0320 	bic.w	r3, r3, #32
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	e7f6      	b.n	8005384 <_printf_i+0x194>
 8005396:	4616      	mov	r6, r2
 8005398:	e7bd      	b.n	8005316 <_printf_i+0x126>
 800539a:	6833      	ldr	r3, [r6, #0]
 800539c:	6825      	ldr	r5, [r4, #0]
 800539e:	6961      	ldr	r1, [r4, #20]
 80053a0:	1d18      	adds	r0, r3, #4
 80053a2:	6030      	str	r0, [r6, #0]
 80053a4:	062e      	lsls	r6, r5, #24
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	d501      	bpl.n	80053ae <_printf_i+0x1be>
 80053aa:	6019      	str	r1, [r3, #0]
 80053ac:	e002      	b.n	80053b4 <_printf_i+0x1c4>
 80053ae:	0668      	lsls	r0, r5, #25
 80053b0:	d5fb      	bpl.n	80053aa <_printf_i+0x1ba>
 80053b2:	8019      	strh	r1, [r3, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	6123      	str	r3, [r4, #16]
 80053b8:	4616      	mov	r6, r2
 80053ba:	e7bc      	b.n	8005336 <_printf_i+0x146>
 80053bc:	6833      	ldr	r3, [r6, #0]
 80053be:	1d1a      	adds	r2, r3, #4
 80053c0:	6032      	str	r2, [r6, #0]
 80053c2:	681e      	ldr	r6, [r3, #0]
 80053c4:	6862      	ldr	r2, [r4, #4]
 80053c6:	2100      	movs	r1, #0
 80053c8:	4630      	mov	r0, r6
 80053ca:	f7fa ff11 	bl	80001f0 <memchr>
 80053ce:	b108      	cbz	r0, 80053d4 <_printf_i+0x1e4>
 80053d0:	1b80      	subs	r0, r0, r6
 80053d2:	6060      	str	r0, [r4, #4]
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	6123      	str	r3, [r4, #16]
 80053d8:	2300      	movs	r3, #0
 80053da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053de:	e7aa      	b.n	8005336 <_printf_i+0x146>
 80053e0:	6923      	ldr	r3, [r4, #16]
 80053e2:	4632      	mov	r2, r6
 80053e4:	4649      	mov	r1, r9
 80053e6:	4640      	mov	r0, r8
 80053e8:	47d0      	blx	sl
 80053ea:	3001      	adds	r0, #1
 80053ec:	d0ad      	beq.n	800534a <_printf_i+0x15a>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	079b      	lsls	r3, r3, #30
 80053f2:	d413      	bmi.n	800541c <_printf_i+0x22c>
 80053f4:	68e0      	ldr	r0, [r4, #12]
 80053f6:	9b03      	ldr	r3, [sp, #12]
 80053f8:	4298      	cmp	r0, r3
 80053fa:	bfb8      	it	lt
 80053fc:	4618      	movlt	r0, r3
 80053fe:	e7a6      	b.n	800534e <_printf_i+0x15e>
 8005400:	2301      	movs	r3, #1
 8005402:	4632      	mov	r2, r6
 8005404:	4649      	mov	r1, r9
 8005406:	4640      	mov	r0, r8
 8005408:	47d0      	blx	sl
 800540a:	3001      	adds	r0, #1
 800540c:	d09d      	beq.n	800534a <_printf_i+0x15a>
 800540e:	3501      	adds	r5, #1
 8005410:	68e3      	ldr	r3, [r4, #12]
 8005412:	9903      	ldr	r1, [sp, #12]
 8005414:	1a5b      	subs	r3, r3, r1
 8005416:	42ab      	cmp	r3, r5
 8005418:	dcf2      	bgt.n	8005400 <_printf_i+0x210>
 800541a:	e7eb      	b.n	80053f4 <_printf_i+0x204>
 800541c:	2500      	movs	r5, #0
 800541e:	f104 0619 	add.w	r6, r4, #25
 8005422:	e7f5      	b.n	8005410 <_printf_i+0x220>
 8005424:	080056c9 	.word	0x080056c9
 8005428:	080056da 	.word	0x080056da

0800542c <memmove>:
 800542c:	4288      	cmp	r0, r1
 800542e:	b510      	push	{r4, lr}
 8005430:	eb01 0402 	add.w	r4, r1, r2
 8005434:	d902      	bls.n	800543c <memmove+0x10>
 8005436:	4284      	cmp	r4, r0
 8005438:	4623      	mov	r3, r4
 800543a:	d807      	bhi.n	800544c <memmove+0x20>
 800543c:	1e43      	subs	r3, r0, #1
 800543e:	42a1      	cmp	r1, r4
 8005440:	d008      	beq.n	8005454 <memmove+0x28>
 8005442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800544a:	e7f8      	b.n	800543e <memmove+0x12>
 800544c:	4402      	add	r2, r0
 800544e:	4601      	mov	r1, r0
 8005450:	428a      	cmp	r2, r1
 8005452:	d100      	bne.n	8005456 <memmove+0x2a>
 8005454:	bd10      	pop	{r4, pc}
 8005456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800545a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800545e:	e7f7      	b.n	8005450 <memmove+0x24>

08005460 <_sbrk_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4d06      	ldr	r5, [pc, #24]	@ (800547c <_sbrk_r+0x1c>)
 8005464:	2300      	movs	r3, #0
 8005466:	4604      	mov	r4, r0
 8005468:	4608      	mov	r0, r1
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	f7fb fd16 	bl	8000e9c <_sbrk>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_sbrk_r+0x1a>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	b103      	cbz	r3, 800547a <_sbrk_r+0x1a>
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	20000344 	.word	0x20000344

08005480 <memcpy>:
 8005480:	440a      	add	r2, r1
 8005482:	4291      	cmp	r1, r2
 8005484:	f100 33ff 	add.w	r3, r0, #4294967295
 8005488:	d100      	bne.n	800548c <memcpy+0xc>
 800548a:	4770      	bx	lr
 800548c:	b510      	push	{r4, lr}
 800548e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005492:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005496:	4291      	cmp	r1, r2
 8005498:	d1f9      	bne.n	800548e <memcpy+0xe>
 800549a:	bd10      	pop	{r4, pc}

0800549c <_realloc_r>:
 800549c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a0:	4607      	mov	r7, r0
 80054a2:	4614      	mov	r4, r2
 80054a4:	460d      	mov	r5, r1
 80054a6:	b921      	cbnz	r1, 80054b2 <_realloc_r+0x16>
 80054a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ac:	4611      	mov	r1, r2
 80054ae:	f7ff bc4d 	b.w	8004d4c <_malloc_r>
 80054b2:	b92a      	cbnz	r2, 80054c0 <_realloc_r+0x24>
 80054b4:	f7ff fbde 	bl	8004c74 <_free_r>
 80054b8:	4625      	mov	r5, r4
 80054ba:	4628      	mov	r0, r5
 80054bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c0:	f000 f81a 	bl	80054f8 <_malloc_usable_size_r>
 80054c4:	4284      	cmp	r4, r0
 80054c6:	4606      	mov	r6, r0
 80054c8:	d802      	bhi.n	80054d0 <_realloc_r+0x34>
 80054ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054ce:	d8f4      	bhi.n	80054ba <_realloc_r+0x1e>
 80054d0:	4621      	mov	r1, r4
 80054d2:	4638      	mov	r0, r7
 80054d4:	f7ff fc3a 	bl	8004d4c <_malloc_r>
 80054d8:	4680      	mov	r8, r0
 80054da:	b908      	cbnz	r0, 80054e0 <_realloc_r+0x44>
 80054dc:	4645      	mov	r5, r8
 80054de:	e7ec      	b.n	80054ba <_realloc_r+0x1e>
 80054e0:	42b4      	cmp	r4, r6
 80054e2:	4622      	mov	r2, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	bf28      	it	cs
 80054e8:	4632      	movcs	r2, r6
 80054ea:	f7ff ffc9 	bl	8005480 <memcpy>
 80054ee:	4629      	mov	r1, r5
 80054f0:	4638      	mov	r0, r7
 80054f2:	f7ff fbbf 	bl	8004c74 <_free_r>
 80054f6:	e7f1      	b.n	80054dc <_realloc_r+0x40>

080054f8 <_malloc_usable_size_r>:
 80054f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fc:	1f18      	subs	r0, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bfbc      	itt	lt
 8005502:	580b      	ldrlt	r3, [r1, r0]
 8005504:	18c0      	addlt	r0, r0, r3
 8005506:	4770      	bx	lr

08005508 <_init>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	bf00      	nop
 800550c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550e:	bc08      	pop	{r3}
 8005510:	469e      	mov	lr, r3
 8005512:	4770      	bx	lr

08005514 <_fini>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr
